Search.setIndex({"docnames": ["developers_guide", "examples/README", "examples/pool/README", "examples/stream/README", "generated/api/skactiveml.base.AnnotatorModelMixin", "generated/api/skactiveml.base.BudgetManager", "generated/api/skactiveml.base.ClassFrequencyEstimator", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.ProbabilisticRegressor", "generated/api/skactiveml.base.QueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy", "generated/api/skactiveml.base.SkactivemlClassifier", "generated/api/skactiveml.base.SkactivemlRegressor", "generated/api/skactiveml.classifier.MixtureModelClassifier", "generated/api/skactiveml.classifier.ParzenWindowClassifier", "generated/api/skactiveml.classifier.SklearnClassifier", "generated/api/skactiveml.classifier.SlidingWindowClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "generated/api/skactiveml.exceptions.MappingError", "generated/api/skactiveml.pool.BatchBALD", "generated/api/skactiveml.pool.CostEmbeddingAL", "generated/api/skactiveml.pool.DiscriminativeAL", "generated/api/skactiveml.pool.EpistemicUncertaintySampling", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization", "generated/api/skactiveml.pool.ExpectedModelOutputChange", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction", "generated/api/skactiveml.pool.FourDs", "generated/api/skactiveml.pool.GreedyBALD", "generated/api/skactiveml.pool.GreedySamplingTarget", "generated/api/skactiveml.pool.GreedySamplingX", "generated/api/skactiveml.pool.KLDivergenceMaximization", "generated/api/skactiveml.pool.MonteCarloEER", "generated/api/skactiveml.pool.ProbabilisticAL", "generated/api/skactiveml.pool.QueryByCommittee", "generated/api/skactiveml.pool.Quire", "generated/api/skactiveml.pool.RandomSampling", "generated/api/skactiveml.pool.UncertaintySampling", "generated/api/skactiveml.pool.ValueOfInformationEER", "generated/api/skactiveml.pool.average_kl_divergence", "generated/api/skactiveml.pool.batch_bald", "generated/api/skactiveml.pool.cost_reduction", "generated/api/skactiveml.pool.expected_average_precision", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "generated/api/skactiveml.pool.uncertainty_scores", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper", "generated/api/skactiveml.pool.vote_entropy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn", "generated/api/skactiveml.stream.FixedUncertainty", "generated/api/skactiveml.stream.PeriodicSampling", "generated/api/skactiveml.stream.RandomVariableUncertainty", "generated/api/skactiveml.stream.Split", "generated/api/skactiveml.stream.StreamDensityBasedAL", "generated/api/skactiveml.stream.StreamProbabilisticAL", "generated/api/skactiveml.stream.StreamRandomSampling", "generated/api/skactiveml.stream.VariableUncertainty", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "generated/api/skactiveml.utils.ExtLabelEncoder", "generated/api/skactiveml.utils._check_callable", "generated/api/skactiveml.utils.call_func", "generated/api/skactiveml.utils.check_X_y", "generated/api/skactiveml.utils.check_bound", "generated/api/skactiveml.utils.check_budget_manager", "generated/api/skactiveml.utils.check_class_prior", "generated/api/skactiveml.utils.check_classes", "generated/api/skactiveml.utils.check_classifier_params", "generated/api/skactiveml.utils.check_cost_matrix", "generated/api/skactiveml.utils.check_equal_missing_label", "generated/api/skactiveml.utils.check_indices", "generated/api/skactiveml.utils.check_missing_label", "generated/api/skactiveml.utils.check_random_state", "generated/api/skactiveml.utils.check_scalar", "generated/api/skactiveml.utils.check_type", "generated/api/skactiveml.utils.compute_vote_vectors", "generated/api/skactiveml.utils.ext_confusion_matrix", "generated/api/skactiveml.utils.is_labeled", "generated/api/skactiveml.utils.is_unlabeled", "generated/api/skactiveml.utils.labeled_indices", "generated/api/skactiveml.utils.majority_vote", "generated/api/skactiveml.utils.rand_argmax", "generated/api/skactiveml.utils.rand_argmin", "generated/api/skactiveml.utils.simple_batch", "generated/api/skactiveml.utils.unlabeled_indices", "generated/api/skactiveml.visualization.mesh", "generated/api/skactiveml.visualization.plot_annotator_utilities", "generated/api/skactiveml.visualization.plot_contour_for_samples", "generated/api/skactiveml.visualization.plot_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_training_data", "generated/api/skactiveml.visualization.plot_utilities", "generated/api_reference", "generated/examples/README", "generated/examples/pool/README", "generated/examples/stream/README", "generated/sphinx_gallery_examples/index", "generated/sphinx_gallery_examples/pool/index", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Bayesian_Active_Learning_by_Disagreement_(BALD)", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE)", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL)", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS)", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx)", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL)", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_with_Kullback-Leibler_Divergence", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_with_Vote_Entropy", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE)", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_strategy_for_Active_Learning", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI)", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples", "generated/sphinx_gallery_examples/pool/sg_execution_times", "generated/sphinx_gallery_examples/sg_execution_times", "generated/sphinx_gallery_examples/stream/index", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-Split-Split", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/sg_execution_times", "generated/strategy_overview", "generated/tutorials/00_pool_getting_started", "generated/tutorials/01_deep_pool_al_with_skorch", "generated/tutorials/02_pool_regression_getting_started", "generated/tutorials/03_pool_oracle_annotations", "generated/tutorials/04_pool_simple_evaluation_study", "generated/tutorials/10_multiple_annotators_getting_started", "generated/tutorials/20_stream_getting_started", "generated/tutorials/21_stream_batch_with_pool_al", "generated/tutorials/22_river_classifier", "index", "sg_execution_times", "skactiveml.utils.MISSING_LABEL", "tutorials"], "filenames": ["developers_guide.rst", "examples/README.rst", "examples/pool/README.rst", "examples/stream/README.rst", "generated/api/skactiveml.base.AnnotatorModelMixin.rst", "generated/api/skactiveml.base.BudgetManager.rst", "generated/api/skactiveml.base.ClassFrequencyEstimator.rst", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.ProbabilisticRegressor.rst", "generated/api/skactiveml.base.QueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy.rst", "generated/api/skactiveml.base.SkactivemlClassifier.rst", "generated/api/skactiveml.base.SkactivemlRegressor.rst", "generated/api/skactiveml.classifier.MixtureModelClassifier.rst", "generated/api/skactiveml.classifier.ParzenWindowClassifier.rst", "generated/api/skactiveml.classifier.SklearnClassifier.rst", "generated/api/skactiveml.classifier.SlidingWindowClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.rst", "generated/api/skactiveml.exceptions.MappingError.rst", "generated/api/skactiveml.pool.BatchBALD.rst", "generated/api/skactiveml.pool.CostEmbeddingAL.rst", "generated/api/skactiveml.pool.DiscriminativeAL.rst", "generated/api/skactiveml.pool.EpistemicUncertaintySampling.rst", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization.rst", "generated/api/skactiveml.pool.ExpectedModelOutputChange.rst", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction.rst", "generated/api/skactiveml.pool.FourDs.rst", "generated/api/skactiveml.pool.GreedyBALD.rst", "generated/api/skactiveml.pool.GreedySamplingTarget.rst", "generated/api/skactiveml.pool.GreedySamplingX.rst", "generated/api/skactiveml.pool.KLDivergenceMaximization.rst", "generated/api/skactiveml.pool.MonteCarloEER.rst", "generated/api/skactiveml.pool.ProbabilisticAL.rst", "generated/api/skactiveml.pool.QueryByCommittee.rst", "generated/api/skactiveml.pool.Quire.rst", "generated/api/skactiveml.pool.RandomSampling.rst", "generated/api/skactiveml.pool.UncertaintySampling.rst", "generated/api/skactiveml.pool.ValueOfInformationEER.rst", "generated/api/skactiveml.pool.average_kl_divergence.rst", "generated/api/skactiveml.pool.batch_bald.rst", "generated/api/skactiveml.pool.cost_reduction.rst", "generated/api/skactiveml.pool.expected_average_precision.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold.rst", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper.rst", "generated/api/skactiveml.pool.uncertainty_scores.rst", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper.rst", "generated/api/skactiveml.pool.vote_entropy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn.rst", "generated/api/skactiveml.stream.FixedUncertainty.rst", "generated/api/skactiveml.stream.PeriodicSampling.rst", "generated/api/skactiveml.stream.RandomVariableUncertainty.rst", "generated/api/skactiveml.stream.Split.rst", "generated/api/skactiveml.stream.StreamDensityBasedAL.rst", "generated/api/skactiveml.stream.StreamProbabilisticAL.rst", "generated/api/skactiveml.stream.StreamRandomSampling.rst", "generated/api/skactiveml.stream.VariableUncertainty.rst", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.rst", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.rst", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.utils.ExtLabelEncoder.rst", "generated/api/skactiveml.utils._check_callable.rst", "generated/api/skactiveml.utils.call_func.rst", "generated/api/skactiveml.utils.check_X_y.rst", "generated/api/skactiveml.utils.check_bound.rst", "generated/api/skactiveml.utils.check_budget_manager.rst", "generated/api/skactiveml.utils.check_class_prior.rst", "generated/api/skactiveml.utils.check_classes.rst", "generated/api/skactiveml.utils.check_classifier_params.rst", "generated/api/skactiveml.utils.check_cost_matrix.rst", "generated/api/skactiveml.utils.check_equal_missing_label.rst", "generated/api/skactiveml.utils.check_indices.rst", "generated/api/skactiveml.utils.check_missing_label.rst", "generated/api/skactiveml.utils.check_random_state.rst", "generated/api/skactiveml.utils.check_scalar.rst", "generated/api/skactiveml.utils.check_type.rst", "generated/api/skactiveml.utils.compute_vote_vectors.rst", "generated/api/skactiveml.utils.ext_confusion_matrix.rst", "generated/api/skactiveml.utils.is_labeled.rst", "generated/api/skactiveml.utils.is_unlabeled.rst", "generated/api/skactiveml.utils.labeled_indices.rst", "generated/api/skactiveml.utils.majority_vote.rst", "generated/api/skactiveml.utils.rand_argmax.rst", "generated/api/skactiveml.utils.rand_argmin.rst", "generated/api/skactiveml.utils.simple_batch.rst", "generated/api/skactiveml.utils.unlabeled_indices.rst", "generated/api/skactiveml.visualization.mesh.rst", "generated/api/skactiveml.visualization.plot_annotator_utilities.rst", "generated/api/skactiveml.visualization.plot_contour_for_samples.rst", "generated/api/skactiveml.visualization.plot_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_training_data.rst", "generated/api/skactiveml.visualization.plot_utilities.rst", "generated/api_reference.rst", "generated/examples/README.rst", "generated/examples/pool/README.rst", "generated/examples/stream/README.rst", "generated/sphinx_gallery_examples/index.rst", "generated/sphinx_gallery_examples/pool/index.rst", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement.rst", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Bayesian_Active_Learning_by_Disagreement_(BALD).rst", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE).rst", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL).rst", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction.rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS).rst", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx).rst", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL).rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_with_Kullback-Leibler_Divergence.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_with_Vote_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE).rst", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_strategy_for_Active_Learning.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI).rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples.rst", "generated/sphinx_gallery_examples/pool/sg_execution_times.rst", "generated/sphinx_gallery_examples/sg_execution_times.rst", "generated/sphinx_gallery_examples/stream/index.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-Split-Split.rst", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/sg_execution_times.rst", "generated/strategy_overview.rst", "generated/tutorials/00_pool_getting_started.ipynb", "generated/tutorials/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials/02_pool_regression_getting_started.ipynb", "generated/tutorials/03_pool_oracle_annotations.ipynb", "generated/tutorials/04_pool_simple_evaluation_study.ipynb", "generated/tutorials/10_multiple_annotators_getting_started.ipynb", "generated/tutorials/20_stream_getting_started.ipynb", "generated/tutorials/21_stream_batch_with_pool_al.ipynb", "generated/tutorials/22_river_classifier.ipynb", "index.rst", "sg_execution_times.rst", "skactiveml.utils.MISSING_LABEL.rst", "tutorials.rst"], "titles": ["Developer Guide", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "skactiveml.base.AnnotatorModelMixin", "skactiveml.base.BudgetManager", "skactiveml.base.ClassFrequencyEstimator", "skactiveml.base.MultiAnnotatorPoolQueryStrategy", "skactiveml.base.ProbabilisticRegressor", "skactiveml.base.QueryStrategy", "skactiveml.base.SingleAnnotatorPoolQueryStrategy", "skactiveml.base.SingleAnnotatorStreamQueryStrategy", "skactiveml.base.SkactivemlClassifier", "skactiveml.base.SkactivemlRegressor", "skactiveml.classifier.MixtureModelClassifier", "skactiveml.classifier.ParzenWindowClassifier", "skactiveml.classifier.SklearnClassifier", "skactiveml.classifier.SlidingWindowClassifier", "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "skactiveml.exceptions.MappingError", "skactiveml.pool.BatchBALD", "skactiveml.pool.CostEmbeddingAL", "skactiveml.pool.DiscriminativeAL", "skactiveml.pool.EpistemicUncertaintySampling", "skactiveml.pool.ExpectedModelChangeMaximization", "skactiveml.pool.ExpectedModelOutputChange", "skactiveml.pool.ExpectedModelVarianceReduction", "skactiveml.pool.FourDs", "skactiveml.pool.GreedyBALD", "skactiveml.pool.GreedySamplingTarget", "skactiveml.pool.GreedySamplingX", "skactiveml.pool.KLDivergenceMaximization", "skactiveml.pool.MonteCarloEER", "skactiveml.pool.ProbabilisticAL", "skactiveml.pool.QueryByCommittee", "skactiveml.pool.Quire", "skactiveml.pool.RandomSampling", "skactiveml.pool.UncertaintySampling", "skactiveml.pool.ValueOfInformationEER", "skactiveml.pool.average_kl_divergence", "skactiveml.pool.batch_bald", "skactiveml.pool.cost_reduction", "skactiveml.pool.expected_average_precision", "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "skactiveml.pool.multiannotator.IntervalEstimationThreshold", "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "skactiveml.pool.uncertainty_scores", "skactiveml.pool.utils.IndexClassifierWrapper", "skactiveml.pool.vote_entropy", "skactiveml.stream.CognitiveDualQueryStrategy", "skactiveml.stream.CognitiveDualQueryStrategyFixUn", "skactiveml.stream.CognitiveDualQueryStrategyRan", "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "skactiveml.stream.CognitiveDualQueryStrategyVarUn", "skactiveml.stream.FixedUncertainty", "skactiveml.stream.PeriodicSampling", "skactiveml.stream.RandomVariableUncertainty", "skactiveml.stream.Split", "skactiveml.stream.StreamDensityBasedAL", "skactiveml.stream.StreamProbabilisticAL", "skactiveml.stream.StreamRandomSampling", "skactiveml.stream.VariableUncertainty", "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.RandomBudgetManager", "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.SplitBudgetManager", "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "skactiveml.utils.ExtLabelEncoder", "skactiveml.utils._check_callable", "skactiveml.utils.call_func", "skactiveml.utils.check_X_y", "skactiveml.utils.check_bound", "skactiveml.utils.check_budget_manager", "skactiveml.utils.check_class_prior", "skactiveml.utils.check_classes", "skactiveml.utils.check_classifier_params", "skactiveml.utils.check_cost_matrix", "skactiveml.utils.check_equal_missing_label", "skactiveml.utils.check_indices", "skactiveml.utils.check_missing_label", "skactiveml.utils.check_random_state", "skactiveml.utils.check_scalar", "skactiveml.utils.check_type", "skactiveml.utils.compute_vote_vectors", "skactiveml.utils.ext_confusion_matrix", "skactiveml.utils.is_labeled", "skactiveml.utils.is_unlabeled", "skactiveml.utils.labeled_indices", "skactiveml.utils.majority_vote", "skactiveml.utils.rand_argmax", "skactiveml.utils.rand_argmin", "skactiveml.utils.simple_batch", "skactiveml.utils.unlabeled_indices", "skactiveml.visualization.mesh", "skactiveml.visualization.plot_annotator_utilities", "skactiveml.visualization.plot_contour_for_samples", "skactiveml.visualization.plot_decision_boundary", "skactiveml.visualization.plot_stream_decision_boundary", "skactiveml.visualization.plot_stream_training_data", "skactiveml.visualization.plot_utilities", "API Reference", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "Examples", "Pool Based AL Strategies", "Batch Bayesian Active Learning by Disagreement (BatchBALD)", "Bayesian Active Learning by Disagreement", "Active Learning with Cost Embedding", "Discriminative Active Learning", "Epistemic Uncertainty Sampling", "Expected Model Change", "Expected Model Output Change", "Expected Model Variance Reduction", "Batch Density-Diversity-Distribution-Distance Sampling", "Density-Diversity-Distribution-Distance Sampling", "Bayesian Active Learning by Disagreement", "Greedy Sampling on the Target Space (GSy)", "Improved Greedy Sampling (GSi)", "Greedy Sampling on the Feature Space (GSx)", "Regression based Kullback Leibler Divergence Maximization", "Monte-Carlo EER with Log-Loss", "Monte-Carlo EER with Misclassification-Loss", "Multi-class Probabilistic Active Learning", "Query-by-Committee with Kullback-Leibler Divergence", "Query-by-Committee with Vote Entropy", "Querying Informative and Representative Examples", "Random Sampling", "Density-weighted Uncertainty Sampling", "Dual strategy for Active Learning", "Expected Average Precision", "Uncertainty Sampling with Entropy", "Uncertainty Sampling with Least-Confidence", "Uncertainty Sampling with Margin", "Value of Information", "Value of Information on Labeled Samples", "Value of Information on Unlabeled Samples", "Computation times", "Computation times", "Stream Based AL Strategies", "Cognitive Dual-Query Strategy with Fixed-Uncertainty", "Cognitive Dual-Query Strategy with Random Sampling", "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty", "Cognitive Dual-Query Strategy with Variable-Uncertainty", "Fixed-Uncertainty", "Periodic Sampling", "Randomized-Variable-Uncertainty", "Split", "Density Based Active Learning for Data Streams", "Probabilistic Active Learning in Datastreams", "Stream Random Sampling", "Variable-Uncertainty", "Computation times", "Strategy Overview", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning With Pool Query Strategies", "Stream-based Active Learning With River", "Welcome to scikit-activeml\u2019s documentation!", "Computation times", "skactiveml.utils.MISSING_LABEL", "Tutorials"], "terms": {"scikit": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 88, 158, 162, 164, 165, 166, 170], "activeml": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 158, 162, 170], "i": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "librari": [0, 158, 166], "implement": [0, 16, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 64, 69, 100, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 161, 167], "most": [0, 11, 26, 31, 47, 50, 51, 52, 53, 54, 55, 57, 62, 64, 66, 68, 70, 158, 160, 167], "import": [0, 33, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "activ": [0, 5, 6, 7, 9, 10, 11, 12, 15, 16, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 89, 91, 95, 96, 99, 100, 101, 102, 103, 104, 108, 109, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 155, 156, 157, 161, 168, 169, 170], "learn": [0, 5, 6, 7, 9, 10, 11, 12, 15, 16, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 89, 91, 95, 96, 99, 100, 101, 102, 103, 104, 108, 109, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 155, 156, 157, 161, 168, 169, 170], "It": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 31, 45, 60, 63, 86, 93, 94, 100, 158, 161], "built": [0, 158, 160], "upon": [0, 158], "well": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 158, 161, 164, 165, 166, 167], "known": [0, 88, 158], "machin": [0, 19, 35, 40, 125, 126, 128, 132, 133, 152, 158, 161, 167], "framework": [0, 32, 124, 159, 161], "our": [0, 158, 159, 161, 162, 163, 164, 165, 166, 167], "philosophi": 0, "extend": [0, 6, 39, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "sklearn": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 25, 26, 30, 31, 34, 36, 44, 50, 51, 52, 53, 54, 59, 60, 88, 100, 101, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "eco": 0, "system": [0, 21, 36, 41, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 110, 130, 144, 145, 146, 147, 148, 150, 151, 152, 155, 167], "relev": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 33, 35, 39, 44, 158], "tool": [0, 104, 161], "partial": [0, 16, 17, 48], "unlabel": [0, 6, 7, 9, 10, 12, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 71, 74, 91, 98, 99, 100, 101, 102, 103, 108, 109, 141, 158, 160, 161, 167, 168, 169], "data": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 74, 83, 85, 92, 93, 94, 98, 99, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 167, 168, 169], "repositori": 0, "": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 85, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 163, 164, 165, 166], "structur": [0, 93, 94], "given": [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 81, 83, 84, 85, 86, 88, 95, 97, 98, 99, 100, 101, 102, 103, 159, 163, 167], "imag": [0, 39, 140, 159, 161], "below": [0, 157, 158, 160, 163, 164, 165, 166, 167], "each": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 81, 87, 92, 100, 101, 102, 158, 159, 160, 162, 163, 164, 165, 166], "node": 0, "repres": [0, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 50, 51, 52, 53, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 100, 103, 108, 109, 141, 164, 165, 166, 168, 169], "class": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 96, 100, 102, 103, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169], "interfac": [0, 161], "The": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 85, 86, 95, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167], "arrow": 0, "illustr": [0, 167], "inherit": [0, 50, 161], "hierarchi": 0, "among": 0, "them": [0, 18, 48, 164, 166], "function": [0, 11, 15, 17, 25, 30, 31, 33, 34, 36, 39, 46, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 72, 73, 86, 88, 92, 93, 94, 97, 98, 100, 103, 159, 160, 161, 162, 163, 164, 165, 166], "dash": [0, 100], "yet": 0, "avail": [0, 7, 15, 20, 45, 46, 47, 48, 56, 63, 64, 67, 160, 161, 164, 165, 166], "In": [0, 11, 16, 17, 18, 22, 26, 35, 39, 40, 47, 50, 51, 52, 53, 54, 59, 60, 63, 93, 94, 112, 114, 115, 116, 125, 126, 127, 128, 129, 132, 133, 134, 138, 139, 140, 152, 153, 158, 159, 161, 162, 164, 165, 166], "packag": [0, 73, 104, 158, 159, 161, 164, 166, 167, 169], "skactiveml": [0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "three": [0, 47, 161, 163], "major": [0, 18, 44, 45, 46, 163], "compon": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 162], "e": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 63, 64, 65, 67, 68, 69, 70, 71, 73, 82, 98, 99, 101, 102, 103, 159, 161, 162], "skactivemlclassifi": [0, 6, 16, 17, 18, 19, 21, 23, 29, 33, 35, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 161], "skactivemlregressor": [0, 8, 21, 25, 29, 30, 35], "querystrategi": [0, 11, 98, 161], "modul": [0, 22, 88, 104, 159, 167], "ar": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 84, 88, 92, 95, 98, 103, 104, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "necessari": [0, 48, 161, 164, 165, 166], "deal": [0, 16, 45, 163], "specif": [0, 18, 86, 167], "estim": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 88, 125, 126, 159, 166], "thi": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 80, 88, 98, 99, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "wai": [0, 39, 159, 167], "can": [0, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 39, 46, 48, 50, 51, 52, 53, 54, 56, 61, 74, 85, 86, 99, 157, 158, 159, 161, 162, 164, 165, 166, 167], "easili": [0, 167], "zero": [0, 80, 127, 159, 163], "initi": [0, 14, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 159, 167], "label": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 68, 69, 70, 71, 74, 78, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "regard": [0, 4, 6, 12, 14, 15, 16, 17, 18, 19, 159], "we": [0, 15, 48, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "current": [0, 33, 39, 48, 99, 102], "differ": [0, 11, 32, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 159, 160, 161, 162, 163, 167], "between": [0, 19, 20, 28, 32, 41, 47, 71, 75, 160, 161, 166], "larg": [0, 159, 167], "sampl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 87, 88, 89, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 108, 109, 112, 134, 141, 143, 144, 146, 147, 148, 150, 151, 152, 153, 155, 156, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170], "arriv": [0, 56], "sequenti": 0, "paradigm": 0, "On": 0, "top": [0, 29, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167], "both": [0, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 158], "also": [0, 7, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 86, 158, 161, 162, 163], "distinguish": 0, "set": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 95, 98, 99, 101, 102, 103, 104, 161, 167], "latter": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "multipl": [0, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 41, 44, 45, 46, 48, 88, 92, 93, 94, 104, 163, 164, 165, 166], "error": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 33, 39, 44, 45, 74, 83, 85, 125, 126, 162], "prone": [0, 45], "provid": [0, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 160, 161, 163, 164, 165, 166, 167], "As": [0, 19, 39, 56, 61, 158, 160, 161, 162, 167], "result": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 48, 56, 74, 92, 93, 94, 160, 163, 164, 165, 166, 167], "onli": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 30, 35, 38, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 80, 98, 102, 103, 160, 161, 162, 164, 165, 166], "decid": [0, 44, 45, 164, 166], "which": [0, 5, 7, 10, 11, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 98, 99, 100, 101, 102, 103, 104, 158, 159, 160, 161, 162, 167], "should": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 101, 162, 164, 165, 166], "big": [0, 152], "all": [0, 4, 5, 7, 8, 9, 10, 11, 13, 15, 21, 22, 24, 28, 29, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 46, 48, 49, 73, 74, 88, 98, 102, 103, 108, 157, 158, 160, 161, 162, 164, 165, 166, 168], "who": [0, 163], "project": [0, 167], "new": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 48, 59, 74, 84, 101, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 162, 164, 165, 166], "enhanc": 0, "fix": [0, 6, 9, 11, 12, 15, 23, 50, 51, 55, 64, 101, 102, 108, 143, 156, 162, 168, 169], "have": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 85, 86, 91, 96, 102, 161, 162, 163, 164, 166], "ani": [0, 15, 17, 18, 30, 31, 34, 36, 56, 60, 61, 74, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "question": [0, 63], "pleas": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 167], "reach": [0, 50, 51, 52, 53, 54, 158], "out": [0, 159, 164, 165, 166], "other": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 79, 81, 88, 98, 103, 158, 159, 161, 164, 165, 166, 167], "via": [0, 11, 38, 43, 63, 134, 163], "follow": [0, 33, 39, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 157, 159, 160, 161, 167], "channel": [0, 159], "github": [0, 167], "summar": 0, "upcom": 0, "featur": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 30, 31, 56, 61, 74, 75, 89, 91, 108, 109, 141, 158, 160, 162, 164, 165, 166, 168, 169], "befor": [0, 164, 165, 166], "might": [0, 26, 33, 39, 48, 74, 162], "execut": [0, 141, 142, 156, 158, 159, 161, 167, 168], "step": [0, 18, 19, 33, 39, 65, 66, 67, 68, 69, 70, 101, 159, 161], "There": [0, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 158], "sever": 0, "creat": [0, 76, 89, 90, 95, 159, 160, 162, 164, 165, 166, 167], "local": [0, 50, 51, 52, 53, 54, 59, 161], "python": [0, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 167], "virtualenv": 0, "pipenv": 0, "etc": [0, 26, 27, 32, 74], "One": 0, "possibl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 86, 98, 103, 159], "workflow": 0, "us": [0, 5, 7, 17, 18, 19, 41, 44, 45, 46, 47, 48, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 84, 88, 98, 121, 122, 123, 132, 133, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167], "name": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 83, 85, 86, 162], "conda": 0, "n": [0, 15, 33, 35, 39, 57, 95, 132, 133, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160], "To": [0, 11, 45, 50, 57, 63, 158, 161, 162, 163, 164, 165, 166, 167], "sure": [0, 74], "correct": [0, 19, 39, 44, 72, 86, 163], "Then": [0, 21, 29, 34, 35, 38, 46, 158, 163], "pip": [0, 161, 167], "now": [0, 160, 161], "some": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 74, 160, 161, 164, 165, 166], "requir": [0, 30, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 159, 161], "defin": [0, 8, 12, 13, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 45, 47, 50, 60, 98, 103, 159, 161, 162, 164, 165, 166, 169], "txt": 0, "requirements_extra": 0, "file": [0, 141, 142, 156, 168], "make": [0, 74, 158, 159, 160, 161, 162, 164, 165, 166], "your": [0, 28, 118, 119, 161, 167], "cd": 0, "root": 0, "r": [0, 7, 8, 13, 36, 45, 46, 89, 90, 91, 96, 110, 111, 120], "after": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 163, 164, 165, 166], "wa": [0, 66, 67, 68, 70, 99, 100, 101, 161, 167], "success": 0, "pandoc": 0, "ghostscript": 0, "brew": 0, "conform": 0, "pep": 0, "8": [0, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 160, 161], "style": [0, 74], "For": [0, 8, 13, 15, 21, 22, 26, 27, 28, 29, 32, 47, 56, 73, 74, 158, 159, 161, 162, 164, 165, 166, 167], "lint": 0, "flake8": 0, "recommend": [0, 18], "black": [0, 115, 116, 117, 121, 122, 123, 124, 160, 163, 167], "simpl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 161, 167, 170], "solut": 0, "format": [0, 74], "concret": 0, "command": 0, "line": [0, 100, 102, 160, 163, 167], "length": [0, 34, 38, 56, 74, 164, 165, 166], "79": [0, 132, 133], "example_fil": 0, "py": [0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 168], "1": [0, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 88, 95, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "fork": 0, "button": [0, 161], "clone": [0, 113, 161], "git": 0, "http": [0, 22, 88, 167], "com": [0, 167], "usernam": 0, "branch": 0, "chang": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 44, 57, 74, 89, 91, 108, 109, 134, 141, 159, 168, 169], "from": [0, 5, 7, 8, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "checkout": 0, "b": [0, 19, 28, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "finish": 0, "pass": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 30, 31, 34, 36, 44, 46, 48, 60, 73, 74, 86, 92, 93, 94, 98, 103, 161, 163], "run": [0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "pytest": 0, "cover": 0, "cov": 0, "commit": 0, "push": 0, "add": [0, 19, 164, 165, 166], "modifi": 0, "m": [0, 35, 60, 63, 110, 111, 120], "messag": [0, 74, 83, 85], "abstract": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 65], "superclass": 0, "default": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 161, 164, 166, 167], "random_st": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 161, 163], "enforc": [0, 74], "select": [0, 7, 10, 11, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 64, 67, 68, 69, 88, 93, 94, 95, 118, 119, 138, 158, 159, 160, 161, 164, 165, 166], "logic": [0, 64], "store": [0, 74, 158, 162, 164, 165, 166, 167], "singleannotatorpoolquerystrategi": [0, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 46, 103], "must": [0, 6, 12, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 31, 34, 35, 36, 45, 60, 75, 80, 86, 98, 99, 100, 102, 103], "descript": [0, 15], "whose": [0, 6, 17, 28, 45, 47, 88, 93, 94, 100, 101], "typic": 0, "standard": [0, 8, 38, 74, 159, 162], "number": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 55, 57, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 159, 161, 162, 163, 164, 165, 166], "np": [0, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 48, 49, 64, 67, 68, 69, 71, 74, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "random": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 91, 92, 93, 94, 95, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 151, 152, 153, 155, 156, 159, 163, 168, 169], "randomst": [0, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 164, 165, 166], "like": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 161, 167], "prior": [0, 6, 14, 15, 19, 34, 42, 60, 77, 160, 161, 163], "option": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 80, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 161, 162], "probabl": [0, 6, 12, 14, 15, 16, 17, 18, 19, 21, 26, 27, 29, 32, 34, 35, 40, 41, 44, 47, 48, 55, 57, 60, 61, 62, 64, 66, 68, 70], "distribut": [0, 6, 8, 9, 10, 12, 14, 19, 26, 27, 28, 34, 44, 45, 46, 64, 68, 91, 99, 100, 103, 108, 109, 141, 167, 168, 169], "probabilist": [0, 6, 8, 9, 10, 11, 12, 15, 38, 43, 47, 60, 63, 91, 100, 101, 102, 103, 108, 109, 141, 143, 156, 162, 163, 165, 168, 169], "string": [0, 7, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 71, 74, 78, 87, 88, 92], "cost_matrix": [0, 6, 12, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 47, 79, 80], "cost": [0, 6, 9, 10, 12, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 42, 47, 49, 79, 80, 91, 100, 103, 108, 109, 129, 139, 141, 168, 169], "matrix": [0, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 42, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 79, 80, 88], "interchang": 0, "x": [0, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 75, 85, 95, 97, 98, 99, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "train": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 49, 98, 99, 101, 102, 103, 118, 119, 129, 159, 161, 162, 164, 165, 166, 167], "usual": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 98, 99, 101, 102, 103, 159, 161], "complet": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 61, 98, 99, 101, 102, 103, 161], "includ": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 74, 98, 99, 101, 102, 103, 104, 159, 161], "y": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 87, 89, 90, 91, 92, 96, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "possibli": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 98, 102, 103, 161], "ones": [0, 7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 98, 102, 103, 161], "indic": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 82, 86, 88, 89, 90, 91, 93, 94, 96, 98, 102, 103, 160, 161, 163], "missing_label": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 71, 74, 79, 83, 87, 88, 89, 90, 91, 92, 96, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167], "candid": [0, 5, 7, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 98, 99, 102, 103, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166, 167], "none": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 159, 161], "consid": [0, 7, 10, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 82, 98, 103], "shape": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 161, 162, 163, 165, 167], "n_candid": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 98, 103], "type": [0, 7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 83, 85, 86, 98, 103, 159, 161], "int": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 80, 82, 84, 85, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 159, 161, 163], "n_featur": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 103, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162], "directli": [0, 7, 10, 15, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 60, 98, 103], "necessarili": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 98, 103], "contain": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 80, 88, 98, 99, 100, 101, 103, 159], "support": [0, 5, 7, 10, 11, 15, 19, 21, 22, 24, 28, 29, 33, 34, 35, 36, 37, 38, 39, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 102, 103, 161], "batch_siz": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 95, 110, 118, 158, 159, 161, 162, 163, 165], "one": [0, 7, 10, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 48, 86, 95, 158, 159, 160, 161, 162, 163, 164, 166, 167], "al": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 50, 51, 52, 53, 54, 59, 95, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 138, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 161], "return_util": [0, 7, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 95, 110, 115, 116, 117, 118, 121, 122, 123, 124, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 164, 166], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 80, 82, 85, 86, 88, 95, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 164, 165, 166], "addition": [0, 164, 166], "return": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 121, 122, 123, 124, 158, 159, 160, 161, 162, 164, 165, 166], "util": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "query_indic": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46], "g": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 65, 82, 132, 133], "0": [0, 5, 6, 7, 8, 10, 11, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 82, 88, 98, 99, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "first": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 82, 158, 159, 160, 161, 163, 166, 167], "index": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 82, 88, 91, 93, 94, 95, 96, 158, 163, 167], "refer": [0, 7, 10, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 73, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 167], "batch": [0, 6, 7, 9, 10, 12, 14, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 91, 95, 99, 100, 108, 109, 141, 159, 161, 163, 167, 168, 169, 170], "nan": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 71, 74, 79, 81, 83, 87, 88, 89, 90, 91, 92, 95, 96, 99, 158, 160, 161, 162], "self": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 98, 102, 103, 159, 161], "_validate_data": 0, "input": [0, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 161], "onc": [0, 48, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "mai": [0, 5, 6, 8, 11, 12, 13, 18, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 99], "fit_if_not_fit": 0, "calcul": [0, 4, 15, 19, 26, 27, 30, 31, 32, 34, 35, 38, 40, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "extra": 0, "public": 0, "simple_batch": [0, 133], "determin": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 56, 59, 63, 64, 65, 66, 67, 68, 69, 70, 80, 92, 93, 94, 98, 99, 100, 102, 103, 158, 160], "naiv": 0, "testquerystrategi": 0, "need": [0, 20, 50, 51, 52, 53, 54, 158, 161, 162, 163, 164, 165, 166, 167], "templat": 0, "template_query_strategi": 0, "templatesingleannotatorpoolquerystrategi": 0, "mani": [0, 15, 35, 46, 65, 67, 68, 69, 70, 158], "automat": 0, "specifi": [0, 5, 7, 11, 19, 22, 30, 45, 46, 48, 56, 61, 63, 64, 65, 66, 67, 68, 69, 70, 75, 97, 158, 161, 163, 164, 165, 166], "qs_class": 0, "init_default_param": 0, "accordingli": 0, "whether": [0, 5, 8, 14, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 45, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 83, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 165, 166], "handl": [0, 12, 16, 48, 162, 167], "regress": [0, 2, 8, 9, 10, 13, 19, 24, 25, 26, 30, 31, 32, 35, 74, 89, 91, 106, 108, 109, 115, 116, 121, 122, 123, 141, 157, 158, 167, 168, 169, 170], "classif": [0, 2, 3, 12, 19, 21, 23, 29, 35, 38, 39, 40, 41, 47, 88, 106, 107, 108, 109, 110, 111, 120, 128, 140, 143, 157], "query_default_params_reg": 0, "query_default_params_clf": 0, "adjust": 0, "until": [0, 158], "resolv": 0, "particular": 0, "test_queri": 0, "more": [0, 19, 28, 47, 159, 167], "detail": [0, 26, 27, 32, 158], "inform": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 91, 100, 103, 108, 109, 110, 118, 119, 121, 122, 123, 141, 159, 168, 169], "skactivml": 0, "everi": [0, 19, 56, 82], "singleannotatorstreamquerystrategi": [0, 50, 56, 59, 60, 61], "ha": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 44, 45, 46, 48, 63, 64, 65, 66, 67, 68, 69, 70, 74, 80, 91, 93, 94, 96, 100, 101, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 167], "either": [0, 46, 56, 86], "intern": [0, 11, 15, 22, 23, 24, 25, 35, 38, 40, 43, 44, 45, 48, 112, 114, 115, 125, 126, 128, 132, 133, 134, 139, 152, 153], "budget": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 104, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166, 167], "outsourc": 0, "integ": 0, "act": [0, 158, 162], "seed": [0, 84, 159, 163], "share": [0, 160], "thestrategi": 0, "allow": [0, 5, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 86, 88], "constraint": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104], "identifi": [0, 35, 159], "instanc": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 84, 92, 93, 94, 95, 97, 98, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167], "without": 0, "adapt": [0, 11, 45, 57, 82, 161], "state": [0, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 64, 67, 68, 69, 84, 95, 162, 164, 165, 166], "monitor": [0, 50, 51, 52, 53, 54], "accord": [0, 6, 12, 14, 15, 17, 18, 19, 41, 45, 46, 48, 58, 69, 159], "singleannotatorstreambasedquerystrategi": 0, "clf": [0, 24, 28, 33, 34, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 100, 101, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167], "unknown": 0, "sample_weight": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74], "weight": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74, 87, 91, 92, 96, 100, 103, 108, 109, 141, 168, 169], "equal": [0, 25, 45, 46, 81, 82, 86, 88], "fit_clf": [0, 24, 28, 33, 34, 38, 39, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 159, 164, 165, 166], "queried_indic": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166, 167], "best": [0, 8, 13, 100], "x_cand": [0, 32, 74, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167], "assess": [0, 55, 57, 59, 60, 62, 63, 66, 67, 68, 70], "same": [0, 6, 12, 14, 15, 16, 17, 18, 19, 45, 48, 50, 51, 52, 53, 54, 64, 93, 94, 160], "attribut": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 35, 36, 44, 48, 71], "valu": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 81, 85, 86, 87, 88, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 108, 109, 141, 160, 161, 167, 168, 169], "budget_manager_param_dict": [0, 11, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166], "addit": [0, 18, 19, 48, 50, 52, 53, 54, 59, 98, 99, 100, 103, 161], "case": [0, 11, 16, 17, 21, 29, 33, 34, 35, 38, 39, 44, 45, 46, 47, 58, 69, 93, 94, 159, 161, 167], "forward": [0, 159], "call": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 73, 92, 93, 94, 161], "unittest": 0, "test_stream": 0, "examplequerystrategi": 0, "_exampl": 0, "test_exampl": 0, "filenam": 0, "moreov": [0, 48], "testexamplequerystrategi": 0, "testcas": 0, "written": 0, "variabl": [0, 6, 8, 9, 11, 12, 13, 15, 18, 19, 50, 53, 54, 57, 62, 83, 86, 101, 102, 108, 143, 156, 164, 165, 166, 168, 169], "arg": [0, 5, 7, 9, 10, 11, 20, 65], "evalu": [0, 26, 27, 33, 39, 56, 60, 88, 159, 160, 161, 164, 165, 166, 167, 170], "testclass": 0, "test_init_param_arg": 0, "test_query_param_arg": 0, "unchang": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "manag": [0, 5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 104, 161], "budgetmanag": [0, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 76], "throw": 0, "test_budget_manag": 0, "examplebudgetmanag": 0, "testexamplebudgetmanag": 0, "test_query_by_util": 0, "_param_arg": 0, "multiannotatorpoolquerystrategi": [0, 45, 46], "pair": [0, 7, 33, 39, 45, 46, 48, 163], "mean": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 60, 74, 159, 161, 162, 164, 165, 166], "j": [0, 6, 7, 12, 14, 15, 16, 17, 18, 19, 22, 33, 35, 36, 38, 39, 45, 46, 47, 50, 51, 52, 53, 54, 87, 88, 110, 118, 140, 159, 161], "n_avl_annot": [0, 7, 45, 46], "boolean": [0, 7, 24, 45, 46, 48, 73, 74, 86, 89, 90], "arrai": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 159, 161, 163, 164, 165, 166, 167], "entri": [0, 6, 7, 14, 15, 45, 46, 80, 88, 100, 101], "form": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "combin": [0, 159, 162], "perform": [0, 4, 19, 44, 45, 46, 74, 158, 159, 161, 164, 165, 166, 167], "aggreg": [0, 46], "singleannotatorwrapp": [0, 163], "greedi": [0, 8, 9, 10, 13, 29, 30, 31, 89, 91, 108, 109, 141, 168, 169], "multiannot": [0, 163], "test_init_param_a": 0, "appli": [0, 15, 29, 74], "test_query_param_a": 0, "main": [0, 56, 158, 162, 167], "part": [0, 158, 159, 164, 165, 166], "subpackag": 0, "its": [0, 21, 29, 33, 35, 39, 64, 65, 67, 68, 69, 70, 74, 167], "membership": [0, 47], "super": [0, 159, 161], "hold": [0, 6, 12, 14, 15, 16, 17, 18, 19, 43, 44, 71, 87, 92, 102, 164, 165, 166], "dure": [0, 6, 12, 14, 15, 16, 17, 18, 19, 46], "miss": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 158, 159, 169], "ensur": [0, 74], "reproduc": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 92, 93, 94, 162], "cf": 0, "through": [0, 33, 125, 126, 161, 163, 164, 165, 166], "column": [0, 74, 88], "except": [0, 8, 13, 34, 38, 60, 64, 82, 98, 103, 161], "expect": [0, 6, 8, 9, 10, 12, 13, 15, 19, 21, 25, 26, 27, 29, 32, 33, 38, 39, 42, 43, 47, 48, 89, 91, 100, 103, 108, 109, 141, 161, 168, 169], "object": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 85, 86, 164, 165, 166], "assign": [0, 19, 46, 92, 158, 160, 161, 163], "output": [0, 8, 9, 10, 13, 14, 25, 26, 27, 89, 91, 108, 109, 141, 161, 168, 169], "uniform": [0, 115, 116, 117, 121, 122, 123, 124, 160], "when": [0, 8, 11, 13, 15, 30, 33, 34, 38, 45, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 74, 161], "p": [0, 6, 12, 14, 15, 16, 17, 18, 19, 39, 48, 49, 129, 159, 163], "per": [0, 6, 14, 15, 16, 17, 18, 44, 87, 159, 163], "_check_n_featur": 0, "been": [0, 5, 11, 18, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 167], "classfrequencyestim": [0, 14, 15, 34], "y_pred": [0, 8, 13, 88, 115, 116, 117, 121, 122, 123, 124, 160], "overwritten": 0, "imbalanc": 0, "comput": [0, 14, 21, 29, 30, 35, 38, 40, 41, 44, 47, 48, 63, 88, 128, 129, 135, 136, 137, 140], "accuraci": [0, 6, 12, 14, 15, 16, 17, 18, 19, 44, 45, 88, 158, 159, 162, 163, 164, 165, 166, 167], "test_classifi": 0, "exampleclassifi": 0, "_example_classifi": 0, "test_example_classifi": 0, "testexampleclassifi": 0, "test_methodname_parameternam": 0, "invalid": 0, "correctli": 0, "test_methodnam": 0, "intend": 0, "target": [0, 8, 9, 10, 13, 26, 30, 32, 71, 74, 83, 88, 89, 91, 108, 109, 141, 160, 168, 169], "probabilisticregressor": [0, 26, 27, 32], "r2": 0, "exampleregressor": 0, "_example_regressor": 0, "testexampleregressor": 0, "test_example_regressor": 0, "mark": 0, "annotatormodelmixin": [0, 19, 44], "These": [0, 19, 164, 165, 166], "proxi": [0, 14], "qualiti": 0, "p_annot": [0, 4, 19, 44], "were": [0, 15, 65, 67, 68, 69, 70, 98, 102, 103], "previou": [0, 161, 164, 165, 166], "maximum": [0, 19, 34, 42, 85, 93, 161], "two": [0, 19, 24, 33, 39, 81, 158, 162, 163, 167], "goal": [0, 158, 167], "understand": [0, 158], "improv": [0, 8, 9, 10, 13, 30, 89, 91, 108, 109, 141, 158, 167, 168, 169], "usabl": 0, "therefor": [0, 16, 33, 39, 44], "do": [0, 158, 160, 161, 162], "so": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 158, 160, 161], "doc": 0, "query_strategi": [0, 46, 161, 164, 165, 166], "json": 0, "sub": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "offici": 0, "categori": 0, "methodolog": 0, "reduct": [0, 8, 9, 10, 13, 27, 33, 42, 89, 91, 108, 109, 125, 126, 141, 168, 169], "committe": [0, 6, 9, 10, 12, 15, 16, 21, 29, 35, 91, 100, 103, 108, 109, 141, 159, 168, 169], "uncertainti": [0, 6, 9, 10, 11, 12, 15, 16, 21, 22, 24, 29, 38, 43, 45, 47, 50, 51, 52, 53, 54, 55, 57, 59, 62, 91, 96, 100, 101, 102, 103, 108, 109, 112, 134, 141, 143, 152, 156, 158, 159, 163, 167, 168, 169], "template_pool": 0, "template_pool_regress": 0, "template_stream": 0, "template_pool_batch": 0, "tag": 0, "search": [0, 167], "titl": [0, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 164, 166, 167], "text_0": 0, "placehold": 0, "explan": 0, "ref": 0, "bibtex": 0, "kei": [0, 18, 159, 162], "paper": [0, 26, 50, 51, 52, 53, 54, 167], "sequenc": [0, 48], "order": [0, 6, 12, 14, 15, 16, 17, 18, 19, 48, 50, 51, 52, 53, 54, 74, 88], "content": 0, "displai": [0, 160, 161, 163, 164, 165, 166], "plot": [0, 2, 3, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 163, 164, 165, 166, 168], "import_misc": 0, "randomsampl": [0, 61, 131, 141, 159, 162, 164, 165, 166, 168], "n_sampl": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 162, 163, 164, 165, 166, 167], "init_q": 0, "query_param": 0, "preproc": 0, "preprocess": [0, 25, 159, 161], "min": [0, 28, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163], "max": [0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 162, 163], "n_cycl": [0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 161, 162, 163, 167], "init_clf": 0, "parzenwindowclassifi": [0, 24, 112, 113, 114, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 167], "init_reg": 0, "nickernelregressor": [0, 115, 116, 117, 121, 122, 123, 124, 160], "close": 0, "100": [0, 19, 58, 59, 63, 65, 66, 67, 68, 69, 70, 156, 158, 159, 160, 161, 162, 163], "view": [0, 19, 159], "here": [0, 48, 158, 160, 164, 165, 166], "adopt": 0, "sphinx": [0, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "html": [0, 22, 88, 161], "_build": 0, "tracker": 0, "think": 0, "found": [0, 161, 167], "see": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 27, 32, 44, 47, 60, 63, 64, 65, 66, 67, 68, 69, 70, 73, 99, 158], "problem": [0, 19, 24, 163, 167], "next": [0, 22, 34, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 160, 161, 164, 165, 166], "releas": 0, "save": [0, 17, 166], "time": [0, 19, 48, 56, 57, 62, 64, 65, 67, 68, 69, 70, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167], "what": 0, "done": [0, 39, 159], "how": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 160, 161, 162, 164, 165, 166], "replic": 0, "databas": 0, "box": 0, "page": [0, 25, 26, 27, 30, 31, 32, 34, 35, 40, 167], "usecas": 0, "someth": [0, 48], "isn": 0, "t": [0, 7, 8, 13, 28, 44, 45, 46, 50, 51, 52, 53, 54, 63, 64, 65, 67, 68, 69, 70, 89, 90, 91, 96, 110, 111, 120, 132, 133, 164, 165, 167], "legend": [2, 3, 106, 107, 108, 109, 143, 159, 162, 164, 165, 166], "sourc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "abc": [4, 5, 9, 12, 13], "annot": [4, 7, 10, 18, 19, 22, 44, 45, 46, 49, 88, 98, 102, 103, 104, 129, 157, 167, 170], "model": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 33, 34, 38, 39, 41, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 89, 91, 104, 108, 109, 141, 152, 159, 160, 161, 164, 165, 166, 168, 169], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 116, 121, 122, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 158, 160, 161, 162, 164, 166, 167], "predict_annotator_perf": [4, 19, 44], "an": [4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 35, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "test": [4, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 159, 161, 162, 164, 165, 166], "numpi": [4, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 71, 77, 80, 88, 89, 90, 91, 93, 94, 96, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "ndarrai": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 77, 80, 82, 88, 89, 90, 91, 93, 94, 95, 96, 97], "n_annot": [4, 7, 19, 44, 45, 46, 87, 88, 92, 98, 103, 163], "l": [4, 15, 19, 44, 167], "baseestim": [5, 9, 12, 13, 44, 71], "stream": [5, 6, 9, 11, 12, 15, 101, 102, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 168, 169, 170], "float": [5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 28, 29, 34, 35, 36, 40, 41, 42, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 85, 102, 164, 165, 166], "ratio": [5, 63, 64, 65, 66, 67, 68, 69, 70, 100], "If": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 81, 82, 84, 85, 88, 91, 95, 96, 98, 99, 100, 101, 102, 103, 161, 164, 165, 166, 167], "replac": [5, 48, 99], "get_metadata_rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "get": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 167, 170], "metadata": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "check": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 96, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 164, 165, 166], "user": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 158, 161], "guid": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 138], "mechan": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "work": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 158], "metadatarequest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "A": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 82, 112, 117, 124, 142, 161, 163, 167], "encapsul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "get_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "deep": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 110, 167, 170], "bool": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 80, 82, 85, 95, 98, 102, 103], "subobject": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "dict": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 93, 94, 98, 99, 100, 103, 161], "map": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "query_by_util": [5, 63, 64, 65, 66, 67, 68, 69, 70], "kwarg": [5, 7, 9, 10, 11, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 65, 73, 98, 103, 161], "ask": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 158, 162], "suffici": [5, 50, 51, 52, 53, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 167], "queri": [5, 6, 7, 9, 10, 11, 12, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 91, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 163, 168, 169, 170], "correspond": [5, 19, 48, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 68, 69, 70, 82, 167], "strategi": [5, 6, 7, 9, 10, 11, 12, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 89, 95, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 163, 168, 169, 170], "worth": [5, 63, 64, 65, 66, 67, 68, 69, 70], "n_queried_inst": [5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "set_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "nest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "pipelin": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 161], "__": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "updat": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 164, 166, 167], "spars": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "matric": [5, 11, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "accept": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 83, 85, 86, 161], "thei": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73], "itself": [5, 11, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "class_prior": [6, 14, 15, 77, 163], "classifi": [6, 12, 23, 24, 28, 33, 34, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 100, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 166, 167], "abl": [6, 16, 159, 163], "frequenc": [6, 14, 15, 17, 34, 48, 60], "predict_freq": [6, 14, 15, 17, 34, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 127], "n_class": [6, 12, 14, 15, 16, 17, 18, 19, 22, 33, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 71, 77, 78, 79, 80, 87, 88, 92, 102, 159, 162, 165], "fit": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 82, 100, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "scalar": [6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 71, 74, 85, 87, 88, 92, 100, 102], "str": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 31, 34, 36, 44, 60, 72, 74, 79, 81, 83, 85, 86, 89, 90, 91, 96, 100, 101, 102, 161], "predict": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 30, 32, 33, 38, 39, 47, 48, 49, 55, 57, 62, 88, 101, 115, 116, 117, 121, 122, 123, 124, 160, 164, 165, 166, 167], "observ": [6, 14, 15, 42, 57, 62, 63, 64, 68, 70, 88, 160, 163], "non": [6, 14, 15, 74, 80], "neg": [6, 8, 13, 14, 15, 80, 88], "belong": [6, 14, 15, 19, 163], "classes_": [6, 12, 14, 15, 16, 17, 18, 19, 44, 48, 71], "across": [6, 8, 12, 13, 14, 16, 17, 18, 19, 92, 93, 94, 160, 162], "class_prior_": [6, 14, 15], "cost_matrix_": [6, 12, 14, 15, 16, 18, 19], "n_output": [6, 8, 12, 13, 16, 17, 19, 71, 89, 90, 91, 96], "where": [6, 8, 12, 13, 18, 19, 26, 32, 33, 39, 44, 46, 50, 51, 52, 53, 54, 82, 160, 163], "f": [6, 14, 15, 17, 32, 39, 48, 74, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 165], "predict_proba": [6, 12, 14, 15, 16, 17, 18, 19, 23, 33, 38, 39, 45, 48, 60, 100], "m_sampl": [6, 14, 15], "metric": [6, 14, 15, 26, 30, 31, 34, 36, 50, 51, 52, 53, 54, 59, 60, 88, 130, 162, 163, 166], "precomput": [6, 8, 13, 14, 15, 24, 36, 48], "score": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 40, 41, 43, 47, 158, 159, 161, 162], "set_fit_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "union": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 161], "note": [6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 56, 61, 63, 161, 167], "enable_metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "set_config": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "ignor": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 98, 99, 103, 158, 159, 160, 161, 162], "fals": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 73, 74, 75, 80, 88, 95, 98, 103, 133, 139, 140, 159, 163, 164, 165, 166], "meta": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "rais": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 34, 44, 60, 74, 81, 82, 84, 85, 98, 103, 161], "alia": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "instead": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 33, 34, 39, 44, 48, 60, 99], "origin": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 71, 74, 159], "metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "retain": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "exist": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 73, 159, 160], "you": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 157, 161, 167], "version": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 74, 159], "3": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 35, 38, 39, 44, 46, 50, 51, 52, 53, 54, 60, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "insid": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "otherwis": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 33, 44, 45, 84, 85, 91, 96, 98, 99, 102, 103], "effect": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 74], "set_score_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19], "embed": [6, 9, 10, 12, 15, 22, 91, 100, 103, 108, 109, 141, 167, 168, 169], "entropi": [6, 8, 9, 10, 12, 15, 16, 21, 29, 32, 35, 38, 47, 49, 91, 100, 103, 108, 109, 124, 141, 158, 167, 168, 169], "epistem": [6, 9, 10, 12, 15, 24, 91, 100, 103, 108, 109, 141, 168, 169], "margin": [6, 9, 10, 12, 15, 38, 47, 91, 100, 103, 108, 109, 141, 168, 169], "least": [6, 9, 10, 12, 15, 22, 38, 47, 80, 88, 91, 100, 103, 108, 109, 141, 161, 164, 165, 166, 168, 169], "confid": [6, 9, 10, 12, 15, 22, 38, 44, 45, 47, 91, 100, 102, 103, 108, 109, 141, 168, 169], "averag": [6, 9, 10, 12, 15, 38, 39, 40, 43, 61, 91, 100, 103, 108, 109, 141, 162, 164, 165, 166, 168, 169], "precis": [6, 9, 10, 12, 15, 38, 43, 91, 100, 103, 108, 109, 141, 168, 169], "densiti": [6, 9, 10, 11, 12, 14, 15, 16, 28, 34, 38, 50, 51, 52, 53, 54, 59, 60, 91, 96, 99, 100, 101, 102, 103, 108, 109, 133, 141, 143, 156, 160, 166, 168, 169], "divers": [6, 9, 10, 12, 14, 21, 28, 30, 31, 41, 91, 99, 100, 103, 108, 109, 110, 141, 160, 168, 169], "distanc": [6, 9, 10, 12, 14, 28, 30, 31, 50, 51, 52, 53, 54, 59, 75, 91, 99, 100, 103, 108, 109, 141, 168, 169], "mont": [6, 9, 10, 12, 15, 21, 29, 33, 41, 91, 100, 103, 108, 109, 141, 168, 169], "carlo": [6, 9, 10, 12, 15, 21, 29, 33, 41, 91, 100, 103, 108, 109, 141, 168, 169], "eer": [6, 9, 10, 12, 15, 33, 91, 100, 103, 108, 109, 141, 168, 169], "log": [6, 9, 10, 12, 15, 21, 29, 33, 35, 39, 40, 41, 91, 100, 103, 108, 109, 141, 168, 169], "loss": [6, 9, 10, 12, 15, 26, 33, 39, 91, 100, 103, 108, 109, 141, 168, 169], "misclassif": [6, 9, 10, 12, 15, 33, 39, 91, 100, 103, 108, 109, 141, 168, 169], "discrimin": [6, 9, 10, 12, 15, 23, 91, 100, 103, 108, 109, 141, 168, 169], "multi": [6, 9, 10, 12, 15, 22, 34, 60, 74, 91, 98, 100, 103, 104, 108, 109, 140, 141, 157, 167, 168, 169, 170], "vote": [6, 9, 10, 12, 15, 16, 18, 35, 44, 45, 46, 49, 87, 91, 92, 100, 103, 108, 109, 141, 159, 163, 168, 169], "kullback": [6, 8, 9, 10, 12, 13, 15, 16, 32, 35, 40, 89, 91, 100, 103, 108, 109, 141, 168, 169], "leibler": [6, 8, 9, 10, 12, 13, 15, 16, 32, 35, 40, 89, 91, 100, 103, 108, 109, 141, 168, 169], "diverg": [6, 8, 9, 10, 12, 13, 15, 16, 32, 35, 40, 89, 91, 100, 103, 108, 109, 141, 168, 169], "split": [6, 9, 11, 12, 15, 101, 102, 108, 143, 156, 159, 162, 164, 166, 167, 168, 169], "period": [6, 9, 11, 12, 15, 56, 101, 102, 108, 143, 156, 168, 169], "cognit": [6, 9, 11, 12, 15, 50, 51, 52, 53, 54, 101, 102, 108, 143, 156, 168, 169], "dual": [6, 9, 10, 11, 12, 15, 16, 38, 50, 51, 52, 53, 54, 89, 95, 99, 100, 101, 102, 108, 109, 132, 141, 143, 156, 168, 169], "datastream": [6, 9, 11, 12, 15, 60, 61, 63, 101, 102, 108, 143, 156, 168, 169], "poolquerystrategi": [7, 10], "pool": [7, 10, 60, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 161, 168, 170], "control": [7, 9, 11, 36, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 161], "dtype": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 98, 103, 159, 163, 164, 165, 166], "cycl": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 161, 162, 163, 167], "batchsiz": [7, 46], "2": [7, 8, 13, 15, 19, 21, 25, 34, 35, 38, 39, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 59, 60, 66, 74, 75, 88, 91, 96, 98, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166], "respect": [7, 25, 45, 46], "w": [7, 8, 13, 45, 46, 63, 65, 66, 67, 68, 69, 70, 87, 89, 90, 91, 92, 96], "regressor": [8, 13, 22, 25, 26, 27, 30, 32, 115, 116, 117, 121, 122, 123, 124, 160], "numer": [8, 13, 19, 22, 34, 74, 77, 98, 99, 103], "n_target": [8, 13], "return_std": [8, 160], "return_entropi": 8, "std": [8, 160, 162], "differenti": 8, "condit": [8, 27, 32, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 88], "deviat": [8, 64, 68, 162], "mu": 8, "predict_target_distribut": 8, "dist": 8, "scipi": [8, 19, 115, 116, 117, 121, 122, 123, 124, 160, 164, 165, 166], "stat": [8, 115, 116, 117, 121, 122, 123, 124, 160], "_distn_infrastructur": 8, "rv_frozen": 8, "sample_i": 8, "n_samples_x": 8, "drawn": 8, "gener": [8, 13, 14, 22, 28, 57, 88, 92, 93, 94, 95, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 167, 168], "randomli": [8, 46, 58, 61, 67, 69, 93, 94], "draw": [8, 84], "y_sampl": 8, "coeffici": [8, 13], "frac": [8, 13], "u": [8, 13, 28, 45, 64, 65, 67, 68, 69, 70, 118, 119, 133, 167], "v": [8, 13, 15, 19, 45, 58, 69, 87], "residu": [8, 13], "sum": [8, 13, 18, 39, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161], "squar": [8, 13], "y_true": [8, 13, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 167], "total": [8, 13, 25, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 163, 168], "becaus": [8, 13, 100, 160], "arbitrarili": [8, 13], "wors": [8, 13], "constant": [8, 13, 19, 169], "alwai": [8, 13], "disregard": [8, 13, 56, 61], "would": [8, 13, 56], "kernel": [8, 13, 15, 34, 36, 48, 60, 166], "list": [8, 13, 18, 21, 29, 35, 49, 74, 88, 100, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 164, 165, 166, 167], "n_samples_fit": [8, 13], "multioutput": [8, 13], "uniform_averag": [8, 13], "23": [8, 13, 36, 74, 141], "keep": [8, 13, 162], "consist": [8, 13, 18, 48, 74, 159, 164, 165, 166], "r2_score": [8, 13], "influenc": [8, 13, 28, 74], "multioutputregressor": [8, 13], "set_predict_request": 8, "space": [8, 9, 10, 13, 26, 27, 30, 31, 56, 61, 89, 91, 108, 109, 141, 160, 161, 164, 165, 166, 168, 169], "gsx": [8, 9, 10, 13, 30, 31, 89, 91, 108, 109, 141, 168, 169], "gsy": [8, 9, 10, 13, 30, 89, 91, 108, 109, 141, 168, 169], "gsi": [8, 9, 10, 13, 30, 89, 91, 108, 109, 141, 168, 169], "varianc": [8, 9, 10, 13, 15, 27, 35, 89, 91, 108, 109, 141, 160, 168, 169], "maxim": [8, 9, 10, 13, 21, 25, 29, 30, 32, 38, 42, 43, 47, 89, 91, 108, 109, 115, 134, 141, 168, 169], "argument": [9, 18, 25, 26, 27, 30, 31, 32, 93, 94, 98, 103, 161, 163], "bayesian": [9, 10, 12, 14, 16, 19, 21, 29, 35, 41, 91, 96, 99, 100, 103, 108, 109, 141, 168, 169], "disagr": [9, 10, 12, 16, 21, 29, 35, 40, 41, 49, 91, 96, 99, 100, 103, 108, 109, 141, 168, 169], "batchbald": [9, 10, 12, 16, 35, 41, 91, 99, 100, 108, 109, 111, 141, 159, 168, 169], "singl": [10, 46, 102, 103, 157, 162, 163, 164, 165, 166], "acquir": [11, 34, 42, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 158], "startegi": 11, "within": [11, 18, 23, 28, 50, 51, 52, 53, 54, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 162, 164, 165, 166], "doe": [11, 74, 85], "alter": 11, "n_sampled_inst": 11, "decis": [11, 19, 28, 39, 50, 51, 52, 53, 54, 56, 61, 100, 101, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163, 167], "taken": [11, 65, 66, 67, 68, 69, 70], "conjunct": 11, "end": [11, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161], "simul": [11, 33, 39, 48, 56, 61], "final": [11, 50, 51, 52, 53, 54, 56, 61, 158, 167], "especi": [11, 56, 61], "help": [11, 33, 39, 56, 61, 167], "develop": [11, 56, 61, 167], "wrapper": [11, 16, 17, 46, 48, 56, 61, 159, 163], "could": [11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73], "streambasedquerystrategi": 11, "classifiermixin": [12, 16], "sensit": [12, 22, 38, 39, 47, 112, 139], "regressormixin": 13, "mixture_model": [14, 118, 119], "weight_mod": 14, "respons": 14, "base": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 91, 92, 98, 99, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 153, 155, 156, 161, 165, 168, 169, 170], "mixtur": [14, 118, 119, 132, 133], "gaussian": [14, 167], "gmm": [14, 28, 132, 133], "gaussianmixtur": [14, 118, 119, 132, 133], "bayesiangaussianmixtur": 14, "unsupervis": 14, "algorithm": [14, 19, 22, 74, 112, 152, 158, 161, 167], "refit": [14, 23, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 164, 166], "bayesianmixturemodel": 14, "n_compon": [14, 118, 119, 132, 133], "similar": 14, "exponenti": 14, "mahalanobi": 14, "f_components_": 14, "c": [14, 15, 19, 42, 47, 50, 51, 52, 53, 54, 74, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 160, 162, 163, 164, 165, 166, 167], "mixture_model_": 14, "n_neighbor": 15, "rbf": [15, 34, 36, 60, 130, 162, 163, 166], "metric_dict": [15, 31, 34, 36, 60, 115, 116, 117, 121, 122, 123, 124, 130, 160, 162, 163], "parzen": [15, 24, 48, 167], "window": [15, 17, 24, 48, 50, 51, 52, 53, 54, 59, 63, 65, 66, 67, 68, 69, 70, 164, 165, 166, 167], "pwc": [15, 167], "parametr": 15, "obtain": [15, 63, 159, 163, 167], "callabl": [15, 19, 25, 26, 34, 36, 46, 50, 51, 52, 53, 54, 59, 60, 72, 73, 161], "valid": [15, 18, 30, 31, 34, 36, 60, 72, 74, 75, 76, 77, 82, 84, 85, 161, 162], "pairwis": [15, 34, 36, 50, 51, 52, 53, 54, 59, 60], "pairwise_kernel": [15, 34, 36, 60], "nearest": [15, 59], "neighbour": 15, "further": [15, 16, 17, 22, 30, 31, 34, 36, 60, 73, 86, 163], "gamma": [15, 19, 34, 60, 115, 116, 117, 121, 122, 123, 124, 130, 160, 162, 163], "while": [15, 161, 164, 165, 166], "over": [15, 19, 46, 50, 51, 52, 53, 54, 59, 88, 97, 152, 159, 160, 161, 162, 163, 164, 165, 166], "o": 15, "chapel": 15, "proceed": [15, 22, 35, 40, 112, 114, 125, 126, 127, 128, 129, 134, 139, 140, 152], "tenth": 15, "workshop": [15, 35, 128, 129, 152], "artifici": [15, 34, 38, 43, 47, 117, 127, 134, 139, 159, 166], "intellig": [15, 34, 35, 38, 43, 47, 60, 63, 117, 127, 134, 139, 153, 167], "statist": [15, 27, 117], "2005": [15, 39, 139], "chaudhuri": 15, "kakd": 15, "d": [15, 23, 35, 39, 50, 51, 52, 53, 54, 59, 63, 95, 139], "sadek": 15, "gonzalez": 15, "kong": 15, "median": 15, "criteria": 15, "bandwidth": 15, "vector": [15, 19, 46, 74, 115, 116, 117, 121, 122, 123, 124, 158, 167], "ieee": [15, 22, 25, 38, 39, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 112, 115, 140, 144, 145, 146, 147, 148, 150, 151, 155], "confer": [15, 22, 24, 25, 35, 38, 40, 43, 44, 45, 47, 112, 114, 115, 125, 126, 127, 128, 132, 133, 134, 139, 140], "mine": [15, 22, 25, 44, 45, 112, 115, 152], "icdmw": 15, "2017": 15, "x_": [15, 115, 116, 117, 121, 122, 123, 124, 160], "v_": 15, "count": [15, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 87, 88, 164, 165, 166], "additive_chi2": [15, 36], "chi2": [15, 36], "cosin": [15, 36], "linear": [15, 25, 36, 159], "poli": [15, 36], "polynomi": [15, 36], "laplacian": [15, 36], "sigmoid": [15, 36], "metaestimatormixin": [16, 17], "filter": [16, 60, 63, 157], "estimator_": 16, "fit_kwarg": [16, 17], "duplic": [16, 17], "partial_fit": [16, 17, 33, 39, 48, 166], "predict_kwarg": [16, 17], "predict_proba_kwarg": [16, 17], "lexicograph": [16, 17, 48], "set_partial_fit_request": [16, 17], "window_s": [17, 59], "only_label": 17, "ignore_estimator_partial_fit": 17, "limit": [17, 164, 165], "latest": 17, "furthermor": [17, 162], "enabl": [17, 161], "wrap": [17, 24, 158, 163, 167], "slide": [17, 59, 164, 165, 166], "size": [17, 25, 50, 51, 52, 53, 54, 59, 65, 66, 67, 68, 69, 70, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166], "unrestrict": 17, "discard": 17, "warn": [17, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74, 158, 159, 160, 161, 162], "thrown": [17, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62], "base_estim": 17, "hard": 18, "_baseheterogeneousensembl": 18, "tupl": [18, 21, 29, 35, 82, 83, 85, 160, 161], "ensembl": [18, 21, 29, 35, 110, 111, 120, 128, 129, 160, 161], "element": [18, 21, 29, 35, 93, 94], "soft": [18, 159], "rule": 18, "els": [18, 95, 115, 116, 117, 121, 122, 123, 124, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 166, 167], "argmax": [18, 93], "calibr": 18, "estimators_": [18, 21, 29, 35], "drop": 18, "appear": [18, 48, 88], "n_estim": [18, 21, 29, 35, 40, 41, 49, 160], "constructor": [18, 161], "variou": [18, 38, 104], "properti": 18, "named_estim": 18, "dictionari": [18, 19, 26, 27, 32, 46, 161, 162], "access": [18, 48, 158], "bunch": 18, "keyword": [18, 93, 94, 98, 103], "parameter_nam": 18, "new_valu": 18, "individu": 18, "remov": [18, 93, 94], "tol": 19, "01": [19, 64, 68, 69, 70, 141, 159, 168], "max_it": 19, "fit_intercept": 19, "annot_prior_ful": 19, "annot_prior_diag": 19, "weights_prior": 19, "solver": [19, 161], "newton": 19, "cg": 19, "solver_dict": 19, "logist": [19, 24, 158], "raykar": 19, "besid": [19, 46], "build": [19, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "task": [19, 23, 26, 116, 159], "assum": [19, 22, 25, 32, 45], "depend": [19, 46, 57, 61, 62, 64, 68, 70, 162], "confus": [19, 88], "row": [19, 49, 74, 88, 95], "normal": [19, 39, 71, 88, 140], "bia": 19, "bias": 19, "refin": 19, "regular": 19, "threshold": [19, 21, 29, 35, 40, 41, 45, 55, 57, 62, 63, 64, 66, 68, 69, 70], "stop": [19, 33, 39], "em": [19, 40, 128], "smaller": [19, 64, 65, 67, 68, 69, 70], "than": [19, 28, 30, 36, 45, 63, 64, 65, 66, 67, 68, 69, 70], "iter": [19, 86, 158, 159, 161, 163, 167], "k": [19, 29, 40, 46, 101, 116, 162], "intercept": 19, "ad": [19, 39, 48, 159], "dirichlet": [19, 34], "diagon": [19, 80], "being": [19, 88], "ey": 19, "invers": 19, "covari": 19, "ident": [19, 25], "nelder": 19, "mead": 19, "powel": 19, "bfg": 19, "tnc": 19, "cobyla": 19, "slsqp": 19, "trust": 19, "constr": 19, "dogleg": 19, "ncg": 19, "exact": 19, "krylov": 19, "custom": [19, 86], "optim": [19, 33, 38, 48, 66, 125, 126, 159], "minim": [19, 21, 27, 29, 47, 49, 75, 129], "maxit": 19, "5": [19, 25, 28, 39, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166], "yu": 19, "zhao": [19, 144, 145, 146, 147], "h": [19, 35, 36, 128, 129], "valadez": 19, "florin": 19, "bogoni": 19, "moi": 19, "2010": [19, 36, 130], "crowd": 19, "journal": [19, 117, 167], "research": [19, 117, 152, 167], "11": [19, 39], "4": [19, 110, 117, 118, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "_": [19, 88, 115, 116, 117, 121, 122, 123, 124, 160], "n_annotators_": [19, 44], "w_": 19, "alpha_": 19, "describ": [19, 39, 48], "herebi": 19, "hi": 19, "her": 19, "with_traceback": 20, "tb": 20, "__traceback__": 20, "n_mc_sampl": [21, 29, 41], "ep": [21, 29, 35, 40, 41], "1e": [21, 29, 35, 40, 41], "07": [21, 29, 35, 40, 41], "_generalbald": [21, 29], "reduc": [21, 29], "hypothes": [21, 29], "fast": [21, 29], "about": [21, 29, 56, 61], "shannon": [21, 29], "seek": [21, 29], "point": [21, 29, 41, 102, 158, 159, 162, 167], "maximis": [21, 29], "decreas": [21, 29, 63], "posterior": [21, 29, 47], "advanc": [21, 36, 41, 60, 63, 110, 130, 153, 161], "7": [21, 29, 35, 39, 40, 41, 110, 111, 112, 113, 114, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 162, 164, 166], "minimum": [21, 29, 35, 40, 41, 47, 74, 85, 94], "houlsbi": [21, 29, 41, 110, 111, 120], "neil": [21, 29, 41, 110, 111, 120], "ferenc": [21, 29, 41, 110, 111, 120], "husz\u00e1r": [21, 29, 41], "zoubin": [21, 27, 29, 41, 110, 111, 117, 120], "ghahramani": [21, 27, 29, 41, 110, 111, 117, 120], "m\u00e1t\u00e9": [21, 29, 41], "lengyel": [21, 29, 41, 110, 111, 120], "prefer": [21, 29, 41, 46, 110, 111, 120], "arxiv": [21, 23, 29, 41, 49, 110, 111, 113, 120, 129], "preprint": [21, 29, 41, 49, 110, 111, 120, 167], "1112": [21, 29, 41, 110, 111, 120], "5745": [21, 29, 41, 110, 111, 120], "2011": [21, 29, 41, 110, 111, 120], "kirsch": [21, 41, 110], "andrea": [21, 41, 110], "joost": [21, 41, 110], "van": [21, 41, 63, 110], "amersfoort": [21, 41, 110], "yarin": [21, 41, 110], "gal": [21, 41, 110], "effici": [21, 41, 44, 45, 110], "acquisit": [21, 41, 63, 110, 164, 165], "neural": [21, 36, 41, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 110, 130, 144, 145, 146, 147, 148, 150, 151, 155], "process": [21, 36, 41, 46, 110, 130, 163, 165, 167], "32": [21, 41, 74, 159], "2019": [21, 23, 24, 30, 31, 32, 41, 110, 113, 114, 121, 122, 123, 124], "fit_ensembl": [21, 29, 35, 159], "member": [21, 29, 35], "base_regressor": 22, "embed_dim": 22, "mds_param": 22, "nn_param": 22, "alc": [22, 112, 141, 168], "libact": 22, "actual": [22, 33, 38, 39, 47, 162], "variant": [22, 38, 47, 160], "symbol": [22, 79, 81, 83, 89, 90, 91, 96], "org": [22, 88], "stabl": [22, 88], "manifold": 22, "md": 22, "neighbor": [22, 59], "nearestneighbor": 22, "kuan": [22, 112], "hao": [22, 112], "hsuan": [22, 38, 47, 112], "tien": [22, 38, 47, 112], "lin": [22, 30, 31, 38, 47, 112, 121, 122, 123], "novel": [22, 32, 112, 124], "multiclass": [22, 38, 39, 47, 112], "icdm": 22, "2016": [22, 34, 112, 127], "greedy_select": 23, "dal": [23, 113, 141, 168], "Its": 23, "idea": [23, 48, 50, 51, 52, 53, 54, 56], "solv": [23, 167], "binari": [23, 88], "choos": [23, 46], "indistinguish": 23, "kept": 23, "gissin": [23, 113], "shalev": [23, 113], "shwartz": [23, 113], "1907": 23, "06347": 23, "redefin": 23, "signific": [24, 158], "nguyen": [24, 114, 132, 133], "vu": [24, 114], "linh": [24, 114], "s\u00e9bastien": [24, 114], "desterck": [24, 114], "eyk": [24, 114], "h\u00fcllermeier": [24, 114], "discoveri": [24, 44, 45, 114], "scienc": [24, 28, 30, 31, 38, 47, 63, 114, 118, 119, 121, 122, 123, 135, 136, 137], "springer": [24, 60, 63, 114, 132, 133, 153], "cham": [24, 63, 153], "linear_model": [24, 132, 133, 158], "logisticregress": [24, 132, 133, 158], "bootstrap_s": 25, "n_train": 25, "ord": 25, "feature_map": 25, "bootstrap": 25, "compar": [25, 63, 64, 65, 67, 68, 69, 70, 158, 162, 164, 165, 166], "lie": 25, "rang": [25, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 160, 161, 162, 163, 165, 167], "greater": [25, 36, 45, 46], "norm": [25, 160], "measur": [25, 28, 38, 40, 49, 59, 158], "gradient": 25, "linalg": 25, "take": [25, 26, 85, 159], "dimens": [25, 74, 75, 82, 93, 94], "polynomialfeatur": 25, "fit_transform": [25, 71, 159], "cai": [25, 115], "wenbin": [25, 115], "ya": [25, 115], "zhang": [25, 115], "jun": [25, 115, 130], "zhou": [25, 36, 50, 51, 52, 53, 54, 115, 130, 144, 145, 146, 147], "2013": [25, 28, 38, 47, 115, 118, 119], "13th": [25, 115], "51": [25, 115], "60": [25, 115, 160], "reg": [25, 26, 27, 30, 32, 115, 116, 117, 121, 122, 123, 124, 160, 161], "fit_reg": [25, 26, 27, 30, 32, 160], "integration_dict": [26, 27, 116], "approach": [26, 33], "integr": [26, 27, 32], "integration_method": 26, "_conditional_expect": [26, 27, 32], "assume_linear": [26, 160], "mean_squared_error": 26, "altern": 26, "mean_absolute_error": 26, "christoph": [26, 116, 167], "kaed": 26, "erik": [26, 116], "rodner": [26, 116], "alexand": [26, 116, 167], "freytag": [26, 116], "oliv": [26, 116], "moth": [26, 116], "bjoern": 26, "barz": [26, 116], "joachim": [26, 116], "denzler": [26, 116], "bmvc": [26, 116], "15": [26, 50, 51, 52, 53, 54, 115, 116, 117, 121, 122, 123, 124, 159, 160], "2018": [26, 38, 43, 116, 134], "x_eval": [26, 27, 33, 161], "n_eval_sampl": [26, 27, 33, 161], "referenc": 26, "propos": [26, 50, 51, 52, 53, 54, 59, 63], "is_unlabel": [26, 89], "tri": [27, 31, 50, 51, 52, 53, 54], "cohn": [27, 117], "david": [27, 117], "jordan": [27, 117], "michael": [27, 117], "129": [27, 117], "145": [27, 60, 117, 153], "1996": [27, 49, 117, 129], "lmbda": [28, 36, 130], "4d": [28, 118, 119, 141, 168], "mixturemodelclassifi": [28, 118, 119], "05": [28, 44, 45, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159], "round": [28, 159], "avoid": 28, "redund": 28, "regul": 28, "factor": [28, 50, 51, 52, 53, 54], "reitmaier": [28, 118, 119], "sick": [28, 118, 119, 167], "let": [28, 118, 119, 158], "know": [28, 118, 119, 158, 162], "230": [28, 118, 119], "106": [28, 118, 119], "131": [28, 118, 119], "bald": [29, 41, 111, 120, 141, 159, 168], "x_metric": 30, "y_metric": 30, "x_metric_dict": 30, "y_metric_dict": 30, "n_gsx_sampl": 30, "pairwise_dist": [30, 31, 50, 51, 52, 53, 54, 59], "till": 30, "switch": 30, "exce": [30, 55, 57, 61, 62, 64, 66, 68, 70], "wu": [30, 31, 50, 51, 52, 53, 54, 121, 122, 123, 144, 145, 146, 147], "dongrui": [30, 31, 121, 122, 123], "chin": [30, 31, 121, 122, 123], "teng": [30, 31, 121, 122, 123], "jian": [30, 31, 121, 122, 123, 144, 145, 146, 147], "huang": [30, 31, 36, 112, 121, 122, 123, 130], "90": [30, 31, 121, 122, 123], "105": [30, 31, 121, 122, 123], "those": [31, 32, 88, 163, 167], "increas": [31, 63, 64, 68, 69, 70], "euclidean": 31, "integration_dict_target_v": [32, 124, 160], "integration_dict_cross_entropi": [32, 160], "independ": [32, 39], "cross": [32, 161, 162, 163], "old": 32, "conditional_expect": 32, "elreedi": [32, 124], "dina": [32, 124], "atiya": [32, 124], "amir": [32, 124], "shaheen": [32, 124], "samir": [32, 124], "balanc": [32, 60, 63, 124], "explor": [32, 45, 124], "exploit": [32, 45, 124], "trade": [32, 45, 124], "off": [32, 45, 124], "651": [32, 124], "subsequ": 32, "potenti": [32, 48], "misclassification_loss": [33, 126], "subtract_curr": [33, 39, 138, 139, 140], "expectederrorreduct": [33, 39], "ever": [33, 39], "outcom": [33, 39], "kind": [33, 39, 73], "risk": [33, 39], "log_loss": [33, 125], "subtract": [33, 39], "criterion": [33, 39], "roi": [33, 125, 126], "mccallum": [33, 40, 125, 126, 128], "2001": [33, 125, 126], "toward": [33, 125, 126], "icml": [33, 35, 40], "pp": [33, 39, 44, 45, 50, 51, 52, 53, 54, 59, 60], "441": [33, 125, 126], "448": [33, 125, 126, 127, 141, 168], "ignore_partial_fit": [33, 39, 48, 125, 126, 138, 139, 140], "sample_weight_candid": 33, "sample_weight_ev": 33, "ndim": [33, 34, 38, 74, 75, 95, 98, 102, 103], "Not": [33, 161], "applic": [33, 34, 38, 47, 152, 167], "m_max": [34, 42, 60], "mcpal": [34, 60, 127, 141, 168], "hypothet": [34, 42], "multipli": [34, 38, 57, 60, 84], "typeerror": [34, 85], "daniel": [34, 113, 127, 153, 167], "kottk": [34, 60, 63, 127, 153, 167], "georg": [34, 127, 153], "krempl": [34, 63, 127, 153], "dominik": [34, 127], "lang": [34, 127], "johann": [34, 127], "teschner": [34, 127], "myra": [34, 127, 153], "spiliopoul": [34, 63, 127, 153], "vol": [34, 39, 63], "285": [34, 127], "frontier": 34, "586": [34, 126, 127, 141, 168], "594": [34, 127, 131, 141, 168], "io": [34, 127], "press": [34, 127, 161], "utility_weight": [34, 38, 60, 127, 132, 133], "kl_diverg": [35, 128], "disagre": 35, "vote_entropi": [35, 129], "empir": 35, "seung": [35, 128, 129], "opper": [35, 128, 129], "sompolinski": [35, 128, 129], "acm": [35, 44, 45, 128, 129], "theori": [35, 128, 129], "287": [35, 128, 129], "294": [35, 128, 129], "1992": [35, 128, 129], "ab": 35, "mamitsuka": 35, "boost": 35, "bag": 35, "9": [35, 45, 61, 115, 116, 117, 121, 122, 123, 124, 159, 161], "morgan": [35, 40], "kaufmann": [35, 40], "1998": [35, 40, 128], "burbidg": 35, "robert": 35, "rowland": 35, "jem": 35, "king": 35, "ross": 35, "engin": 35, "autom": 35, "209": 35, "218": 35, "2007": [35, 39, 132, 133, 138], "short": 36, "high": [36, 50, 51, 52, 53, 54, 59, 152], "low": 36, "jin": [36, 130], "z": [36, 50, 51, 52, 53, 54], "least_confid": [38, 47, 132, 133, 136], "margin_sampl": [38, 47, 137], "expected_average_precis": [38, 134, 141, 168], "settl": [38, 47, 135, 136, 137], "burr": [38, 47, 135, 136, 137], "literatur": [38, 47, 135, 136, 137], "survei": [38, 47, 135, 136, 137], "univers": [38, 47, 135, 136, 137, 167], "wisconsin": [38, 47, 135, 136, 137], "madison": [38, 47], "depart": [38, 47, 135, 136, 137], "2009": [38, 44, 45, 47, 135, 136, 137, 140], "chen": [38, 47], "po": [38, 47], "lung": [38, 47], "technologi": [38, 47], "wang": [38, 43, 134], "hanmo": [38, 43, 134], "et": [38, 43, 50, 51, 52, 53, 54, 59, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 138, 140, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155], "action": [38, 43, 134], "recognit": [38, 43, 134, 140], "ijcai": [38, 39, 43, 138], "joint": [38, 41, 43, 134, 139], "consider_unlabel": [39, 138, 139, 140], "consider_label": [39, 138, 139, 140], "candidate_to_label": [39, 138, 139, 140], "under": [39, 159, 162, 167], "flag": 39, "term": 39, "kapoor": [39, 138], "ashish": [39, 138], "eric": [39, 138], "horvitz": [39, 138], "sumit": [39, 138], "basu": [39, 138], "supervis": [39, 49, 129, 138, 161], "theoret": [39, 138], "joshi": [39, 140], "porikli": [39, 140], "papanikolopoulo": [39, 140], "2012": 39, "scalabl": 39, "trpami": 39, "34": [39, 144, 145, 146, 147, 159], "2259": 39, "2273": 39, "margineantu": [39, 139], "1622": [39, 139], "1623": [39, 139], "proba": [40, 41, 43, 47], "kl": 40, "level": [40, 44, 45, 49, 100, 102], "querybycommitte": [40, 49, 128, 129, 141, 159, 160, 168], "nigam": 40, "emploi": [40, 128], "text": [40, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "359": [40, 128], "367": [40, 128], "extens": [41, 50, 51, 52, 53, 54, 59, 60, 88, 161], "wherebi": 41, "jointli": 41, "mutual": 41, "k_vec_list": 42, "001": [42, 60, 163], "expected_cost_reduct": 42, "n_x_cand": 43, "alpha": [44, 45, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 162], "mode": 44, "upper": [44, 85], "reli": [44, 45, 160], "interv": [44, 45, 100, 101, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "ielearn": 44, "lower": [44, 85, 159, 162], "bound": [44, 75, 81, 85, 97, 98, 99, 102, 103, 158, 162, 163], "ground": 44, "truth": 44, "half": [44, 45], "student": [44, 45], "ti": [44, 45, 93, 94], "donmez": [44, 45, 132, 133], "pinar": [44, 45, 132, 133], "jaim": [44, 45, 132, 133], "carbonel": [44, 45, 132, 133], "jeff": [44, 45], "schneider": [44, 45], "15th": [44, 45], "sigkdd": [44, 45], "knowledg": [44, 45, 161], "259": [44, 45], "268": [44, 45], "a_perf_": 44, "a_cand": 44, "epsilon": [45, 75], "iethresh": 45, "address": 45, "intervalestimationannotmodel": 45, "nonetheless": 45, "rank": [45, 46], "amount": [45, 167], "n_cand_sampl": 45, "y_aggreg": [46, 92], "transform": [46, 71, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159], "a_pef": 46, "majority_vot": [46, 163], "query_params_dict": [46, 163], "n_annotators_per_sampl": [46, 163], "a_perf": 46, "primarili": 46, "unspecifi": 46, "previous": 46, "chosen": 46, "interpret": [46, 82], "th": [46, 88, 95], "last": [46, 63, 65, 66, 67, 68, 69, 70, 101, 158], "lc": 47, "maximi": 47, "smallest": 47, "sm": 47, "gap": 47, "second": [47, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158], "set_base_clf": 48, "enforce_unique_sampl": 48, "use_speed_up": 48, "simplifi": [48, 162, 164, 165, 166], "retrain": [48, 158, 161], "scenario": 48, "therebi": [48, 86, 167], "pre": [48, 132, 133, 164, 165, 166], "newli": 48, "simpli": [48, 167], "append": [48, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 164, 166, 167], "repeat": [48, 162, 164, 165, 166], "speed": 48, "up": 48, "idx": [48, 161, 163], "n_sub_sampl": 48, "init": 48, "is_fit": 48, "base_clf": 48, "resp": 48, "use_base_clf": 48, "idx_fit": 48, "idx_pr": 48, "fit_param": 48, "pred_param": 48, "Will": 48, "idx_predict": 48, "n_fit_sampl": 48, "n_predict_sampl": 48, "subset": [48, 88], "later": [48, 50, 51, 52, 53, 54, 56, 61], "engelson": [49, 129], "sean": [49, 129], "ido": [49, 129], "dagan": [49, 129], "manual": [49, 129], "corpora": [49, 129], "cmp": 49, "lg": 49, "9606030": 49, "budget_manag": [50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 76, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166], "density_threshold": [50, 51, 52, 53, 54], "cognition_window_s": [50, 51, 52, 53, 54], "10": [50, 51, 52, 53, 54, 61, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 164, 165, 166, 167], "dist_func": [50, 51, 52, 53, 54, 59], "dist_func_dict": [50, 51, 52, 53, 54, 59], "force_full_budget": [50, 51, 52, 53, 54, 164, 166], "cognitivedualquerystrategyran": [50, 145, 156, 164, 166, 168], "cognitivedualquerystrategyranvarun": [50, 146, 156, 164, 166, 168], "cognitivedualquerystrategyvarun": [50, 147, 156, 164, 166, 168], "cognitivedualquerystrategyfixun": [50, 144, 156, 164, 166, 168], "\u017eliobait\u0117": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 152, 155], "streamdensitybased": [50, 51, 52, 53, 54, 152, 156, 164, 166, 168], "around": [50, 51, 52, 53, 54], "author": [50, 51, 52, 53, 54, 167], "full": [50, 51, 52, 53, 54, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163, 165, 167], "doesn": [50, 51, 52, 53, 54], "estimatedbudgetzliobait": [50, 51, 52, 53, 54, 64, 66, 67, 68, 69, 70], "zliobait": [50, 64, 69], "randombudgetmanag": [50, 52], "fixeduncertaintybudgetmanag": [50, 51, 55], "variableuncertaintybudgetmanag": [50, 54, 62], "randomvariableuncertaintybudgetmanag": [50, 53, 57], "liu": [50, 51, 52, 53, 54, 144, 145, 146, 147], "xue": [50, 51, 52, 53, 54, 144, 145, 146, 147], "yang": [50, 51, 52, 53, 54, 134, 144, 145, 146, 147], "li": [50, 51, 52, 53, 54, 144, 145, 146, 147], "cao": [50, 51, 52, 53, 54, 144, 145, 146, 147], "2021": [50, 51, 52, 53, 54, 167], "onlin": [50, 51, 52, 53, 54, 144, 145, 146, 147], "drift": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 144, 145, 146, 147, 148, 150, 151, 155], "transact": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 144, 145, 146, 147, 148, 150, 151, 155], "network": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 144, 145, 146, 147, 148, 150, 151, 155], "bifet": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 155], "pfahring": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 152, 155], "holm": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 155], "2014": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 152, 155], "With": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 167, 170], "25": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 101, 148, 150, 151, 155, 160], "27": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 155, 168], "39": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 148, 150, 151, 155], "ienco": [50, 51, 52, 53, 54, 59, 152], "zliobait\u0117": [50, 51, 52, 53, 54, 59], "focus": [50, 51, 52, 53, 54, 59, 152], "evolv": [50, 51, 52, 53, 54, 59, 152], "bigmin": [50, 51, 52, 53, 54, 59], "133": [50, 51, 52, 53, 54, 59, 152], "148": [50, 51, 52, 53, 54, 59, 152], "seen": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62], "cognitivedualquerystrategi": [51, 52, 53, 54], "fixeduncertainti": [51, 66, 148, 156, 164, 166, 168], "randomvariableuncertainti": [53, 150, 156, 168], "variableuncertainti": [54, 58, 69, 155, 156, 164, 166, 168], "uncertaintyzliobait": [55, 57, 58, 62], "fourth": 56, "behind": 56, "exhaust": [56, 61, 64, 65, 66, 67, 68, 69, 70], "soon": 56, "regardless": [56, 61], "posit": [56, 61, 88, 101], "thu": [56, 61, 88, 160], "baselin": [56, 61], "ran": 57, "var": [57, 62], "better": [57, 158, 167], "detect": 57, "delta": [57, 64, 68, 133], "splitbudgetmanag": [58, 64], "1000": [59, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 164, 165, 166], "densitybasedbudgetmanag": [59, 64], "spatial": [60, 63], "increment": [60, 63, 65], "quantil": [60, 63], "balancedincrementalquantilefilt": [60, 164], "tempor": 60, "0e": 60, "onto": 60, "2015": [60, 63, 153], "analysi": [60, 63, 153], "xiv": [60, 63, 153], "157": [60, 153], "n_candidate_sampl": 60, "pal": [60, 166], "allow_exceeding_budget": 61, "long": 61, "w_tol": 63, "50": [63, 161, 162, 164, 165, 166], "togeth": 63, "warrant": 63, "ultil": 63, "against": [63, 162], "deriv": 63, "infer": [63, 75], "higher": [63, 64, 65, 66, 67, 68, 69, 70], "stai": 63, "fromont": 63, "de": 63, "bie": 63, "leeuwen": 63, "ed": 63, "ida": 63, "lectur": 63, "9385": 63, "estimatedbudget": 63, "theta": [64, 68, 69, 70], "alreadi": [64, 65, 66, 67, 68, 69, 70, 84, 160, 163], "spent": [64, 65, 67, 68, 69, 70], "start": [64, 68, 69, 70, 159, 167, 170], "wich": [64, 68, 69, 70], "purchas": [64, 68, 69, 70], "recalcul": [64, 68, 69, 70], "decres": [64, 68, 69, 70], "standart": [64, 68], "u_t": [65, 67, 68, 69, 70], "labl": [65, 67, 68, 69, 70], "funktion": [65, 67, 68, 69, 70], "labeling_t": [65, 67, 68, 69, 70], "memori": [65, 66, 67, 68, 69, 70], "num_class": 66, "left": [66, 67, 68, 70], "fixeduncertaintybudget": 66, "recurs": [67, 68, 69, 70], "randomvariableuncertaintybudget": 68, "percent": 69, "splitbudget": 69, "variableuncertaintybudget": 70, "encod": 71, "inverse_transform": 71, "back": 71, "y_dec": 71, "y_enc": 71, "func": 72, "n_positional_paramet": 72, "free": 72, "n_free_paramet": 72, "f_callabl": 73, "only_mandatori": 73, "ignore_var_keyword": 73, "mandatori": 73, "var_keyword": 73, "inspect": 73, "sample_weight_cand": 74, "accept_spars": 74, "accept_large_spars": 74, "copi": [74, 76, 159, 160], "force_all_finit": 74, "ensure_2d": 74, "allow_nd": 74, "multi_output": 74, "allow_nan": 74, "ensure_min_sampl": 74, "ensure_min_featur": 74, "y_numer": 74, "2d": [74, 91, 96], "1d": 74, "By": [74, 88, 161], "empti": [74, 167], "finit": 74, "inf": [74, 133], "attempt": 74, "convert": [74, 166], "failur": 74, "nd": [74, 95], "csc": 74, "csr": 74, "coo": 74, "bsr": 74, "suppli": 74, "caus": 74, "bit": 74, "20": [74, 158, 160, 163, 167], "preserv": 74, "unless": [74, 158, 162], "convers": 74, "forc": 74, "fortran": 74, "trigger": 74, "pd": 74, "na": 74, "cannot": [74, 158, 161], "infinit": 74, "axi": [74, 93, 94, 99, 100, 101, 102, 103, 160, 162], "reject": 74, "dataset": [74, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167], "disabl": 74, "float64": 74, "x_convert": 74, "y_convert": 74, "bound_must_be_given": 75, "x1_min": 75, "x2_min": 75, "xndim_min": 75, "x1_max": 75, "x2_max": 75, "xndim_max": 75, "default_budget_manager_class": 76, "default_budget_manager_dict": 76, "budget_manager_": 76, "array_lik": 77, "uniformli": [78, 160], "compat": [79, 83, 161, 166, 167], "only_non_neg": 80, "contains_non_zero": 80, "diagonal_is_zero": 80, "cost_matrix_new": 80, "missing_label1": 81, "missing_label2": 81, "valueerror": [81, 84, 85, 161], "violat": [81, 85], "dim": [82, 159], "uniqu": [82, 110, 111, 120, 128, 129, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 163, 166, 167], "n_indic": 82, "n_dim": 82, "check_uniqu": 82, "target_typ": [83, 85, 86], "print": [83, 85, 158, 159, 160, 164, 165, 166], "seed_multipli": 84, "singleton": 84, "product": 84, "min_inclus": 85, "max_inclus": 85, "min_val": 85, "max_val": 85, "impli": 85, "inclus": 85, "exclus": 85, "match": [85, 160], "desir": 85, "obj": 86, "target_v": 86, "indicator_func": 86, "ones_lik": [87, 92], "confusion_matrix": 88, "definit": 88, "c_": 88, "group": [88, 167], "reorder": 88, "sort": [88, 160, 161], "pred": 88, "popul": 88, "conf_matric": 88, "predic": 88, "wikipedia": 88, "en": 88, "wiki": 88, "convent": 88, "ax": [88, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 163], "mask": [89, 90], "present": [89, 91, 96], "lbld_indic": 91, "shuffl": [92, 93, 94, 162, 164, 165, 166], "argmax_kwarg": 93, "index_arrai": [93, 94], "along": [93, 94], "argmin_kwarg": 94, "argmin": 94, "highest": 95, "fill": 95, "best_indic": 95, "batch_util": 95, "len": [95, 127, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 164, 165, 166, 167], "unlbld_indic": 96, "re": [97, 98, 99, 100, 101, 103, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161], "grid": 97, "resolut": [97, 98, 99, 100, 101, 103], "xmin": [97, 98, 99, 100, 102, 103], "ymin": [97, 98, 99, 100, 102, 103], "xmax": [97, 98, 99, 100, 102, 103], "ymax": [97, 98, 99, 100, 102, 103], "21": [97, 98, 99, 100, 103, 124], "x_mesh": 97, "y_mesh": 97, "mesh_inst": 97, "q": [98, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 167], "n_annotators_to_plot": [98, 102], "replace_nan": [98, 99, 103, 110, 111, 118, 120, 130, 132, 133], "mesh": [98, 103], "ignore_undefined_query_param": [98, 103], "feature_bound": [98, 99, 100, 102, 103, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163], "area": [98, 99, 100, 102, 103, 159, 162], "boundari": [98, 99, 100, 101, 102, 103, 111, 112, 113, 114, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163, 167], "matplotlib": [98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166], "contour_dict": [98, 99, 103], "contour": [98, 99, 100, 103, 167], "plot_annot": 98, "remain": [98, 103], "plt": [99, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166], "gca": 99, "boundary_dict": 100, "75": [100, 160], "cmap": [100, 102, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 162], "coolwarm": [100, 102, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "confidence_dict": 100, "open": 100, "stand": 100, "color": [100, 101, 102, 115, 116, 117, 121, 122, 123, 124, 159, 163], "colormap": [100, 101, 102], "coolwarm_r": [100, 102], "t_x": [101, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "plot_step": [101, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "pred_list": 101, "newest": 101, "unlabeled_color": 102, "grei": [102, 110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "linewidth": 102, "plot_cand_highlight": 102, "unlabl": 102, "blend": 102, "backend": 102, "width": [102, 159, 161], "higlight": 102, "overview": [104, 160], "capabl": 104, "download": [108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "code": [108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167], "sphinx_gallery_examples_python": 108, "zip": [108, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 164, 166, 167], "jupyt": [108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161], "notebook": [108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 163, 164, 165, 166], "sphinx_gallery_examples_jupyt": 108, "galleri": [108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 168], "exampl": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 163, 168], "go": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "pyplot": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166], "anim": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "make_blob": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 167], "labeled_indic": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 158, 161], "unlabeled_indic": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 158, 159, 161, 167], "visual": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163, 167], "plot_util": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 158], "plot_decision_boundari": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 163], "plot_contour_for_sampl": [110, 118, 133], "gaussian_process": [110, 111, 120, 162, 167], "gaussianprocessclassifi": [110, 111, 120, 162, 167], "baggingclassifi": [110, 111, 120, 128, 129], "sklearnclassifi": [110, 111, 120, 128, 129, 132, 133, 158, 159, 161, 162, 166, 167], "center": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 167], "cluster_std": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "fill_valu": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 161, 162, 163, 165, 167], "initialis": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "prepar": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "fig": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 163], "subplot": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 163], "constrained_layout": [110, 118], "artist": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "x_label": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "query_idx": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 162, 163, 167], "enumer": [110, 118, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164], "flatten": [110, 115, 116, 117, 118, 121, 122, 123, 124, 159, 160], "coll_old": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "collect": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166], "scatter": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 160, 162, 163, 164, 166], "marker": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 163], "zorder": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "300": [110, 111, 112, 113, 114, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "set_titl": [110, 118, 159, 160, 163], "artistanim": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "blit": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "loop": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 163, 164, 165, 166], "reflect": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "husz": [110, 111, 120], "\u00e1": [110, 111, 120], "\u00e9": [110, 111, 120], "script": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "minut": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "208": [110, 141, 168], "batch_bayesian_active_learning_by_disagr": [110, 141, 168], "ipynb": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "acqur": [111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "rcparam": [111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 166], "titles": [111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "transax": [111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "coll_new": [111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "506": [111, 141, 168], "bayesian_active_learning_by_disagreement_": [111, 120, 141, 168], "costembedding": [112, 141, 165, 168], "925": 112, "930": 112, "580": [112, 141, 168], "active_learning_with_cost_embedding_": [112, 141, 168], "discriminativ": [113, 141, 159, 168], "shai": 113, "437": [113, 133, 141, 168], "discriminative_active_learning_": [113, 141, 168], "epistemicuncertaintysampl": [114, 141, 165, 168], "72": 114, "86": 114, "456": [114, 141, 168], "epistemic_uncertainty_sampl": [114, 141, 168], "is_label": [115, 116, 117, 121, 122, 123, 124, 133, 160, 161], "expectedmodelchangemaxim": [115, 141, 168], "def": [115, 116, 117, 121, 122, 123, 124, 159, 160, 161, 162, 164, 165, 166], "true_funct": [115, 116, 117, 121, 122, 123, 124, 160], "concaten": [115, 116, 117, 121, 122, 123, 124, 160, 165], "rv": [115, 116, 117, 121, 122, 123, 124, 160], "reshap": [115, 116, 117, 121, 122, 123, 124, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167], "nois": [115, 116, 117, 121, 122, 123, 124, 159, 160], "lambda": [115, 116, 117, 121, 122, 123, 124, 160, 162, 163, 164, 165, 166], "rand": [115, 116, 117, 121, 122, 123, 124], "x_test": [115, 116, 117, 121, 122, 123, 124, 159, 160, 162], "linspac": [115, 116, 117, 121, 122, 123, 124, 160, 163], "num": [115, 116, 117, 121, 122, 123, 124, 160, 163], "ax_1": [115, 116, 117, 121, 122, 123, 124], "ax_2": [115, 116, 117, 121, 122, 123, 124], "sharex": [115, 116, 117, 121, 122, 123, 124], "utilities_test": [115, 116, 117, 121, 122, 123, 124, 160], "is_lbld": [115, 116, 117, 121, 122, 123, 124, 160], "utility_lin": [115, 116, 117, 121, 122, 123, 124], "green": [115, 116, 117, 121, 122, 123, 124, 160, 163], "utility_fil": [115, 116, 117, 121, 122, 123, 124], "fill_between": [115, 116, 117, 121, 122, 123, 124], "lightblu": [115, 116, 117, 121, 122, 123, 124, 160], "orang": [115, 116, 117, 121, 122, 123, 124, 160], "prediction_lin": [115, 116, 117, 121, 122, 123, 124], "698": [115, 141, 168], "expected_model_chang": [115, 141, 168], "expectedmodeloutputchang": [116, 141, 168], "gauss_hermit": [116, 124], "n_integration_sampl": [116, 124, 160], "\u00e4": 116, "ding": 116, "bj": 116, "\u00f6": 116, "rn": 116, "carl": 116, "zeiss": 116, "ag": 116, "103": 116, "990": [116, 141, 168], "expected_model_output_chang": [116, 141, 168], "expectedmodelvariancereduct": [117, 141, 168], "749": [117, 141, 168], "expected_model_variance_reduct": [117, 141, 168], "fourd": [118, 119, 141, 168], "tobia": [118, 119], "bernhard": [118, 119, 148, 150, 151, 152, 155, 167], "147": [118, 141, 168], "batch_dens": [118, 141, 168], "distance_sampling_": [118, 119, 141, 168], "batch4d": [118, 141, 168], "476": [119, 141, 168], "greedybald": [120, 141, 168], "508": [120, 141, 168], "greedysamplingtarget": [121, 122, 141, 160, 168], "474": [121, 122, 123], "712": [121, 141, 168], "greedy_sampling_on_the_target_space_": [121, 141, 168], "683": [122, 141, 168], "improved_greedy_sampling_": [122, 141, 168], "greedysamplingx": [123, 141, 160, 168], "681": [123, 141, 168], "greedy_sampling_on_the_feature_space_": [123, 141, 168], "kldivergencemaxim": [124, 141, 160, 168], "403": [124, 141, 168], "regression_based_kullback_leibler_divergence_maxim": [124, 141, 168], "montecarlo": [125, 126, 141, 168], "nichola": [125, 126], "andrew": [125, 126, 128], "593": [125, 141, 168], "carlo_eer_with_log": [125, 141, 168], "carlo_eer_with_misclassif": [126, 141, 168], "dens_est": 127, "den": 127, "european": [127, 132, 133], "volum": [127, 138, 139, 152], "class_probabilistic_active_learning_": [127, 141, 168], "nigami": 128, "sebastian": [128, 129], "manfr": [128, 129], "haim": [128, 129], "annual": [128, 129], "kachit": 128, "kamal": 128, "479": [128, 141, 168], "committee_with_kullback": [128, 141, 168], "leibler_diverg": [128, 141, 168], "501": [129, 141, 166, 168], "committee_with_vote_entropi": [129, 141, 168], "quir": [130, 141, 168], "sheng": 130, "rong": 130, "zhi": 130, "hua": 130, "444": [130, 141, 168], "querying_informative_and_representative_examples_": [130, 141, 168], "random_sampl": [131, 141, 168], "uncertaintysampl": [132, 133, 134, 135, 136, 137, 141, 158, 159, 161, 162, 165, 167, 168], "init_param": [132, 133], "kmean": [132, 133], "exp": [132, 133], "score_sampl": [132, 133], "smeulder": [132, 133], "paul": [132, 133], "bennett": [132, 133], "116": [132, 133], "127": [132, 133], "hieu": [132, 133], "arnold": [132, 133], "cluster": [132, 133, 158, 162], "2004": [132, 133], "436": [132, 141, 168], "weighted_uncertainty_sampl": [132, 141, 168], "u_max": 133, "switching_point": 133, "dwu": 133, "utils_u": 133, "err": 133, "nanmean": 133, "31": [133, 141, 162, 164, 165, 166], "dual_strategy_for_active_learn": [133, 141, 168], "xiaojun": 134, "lei": 134, "shi": 134, "yi": 134, "dong": 134, "shen": 134, "443": [134, 141, 168], "technic": [135, 136, 137], "report": [135, 136, 137], "1648": [135, 136, 137], "457": [135, 141, 168], "uncertainty_sampling_with_entropi": [135, 141, 168], "427": [136, 141, 168], "uncertainty_sampling_with_least": [136, 141, 168], "423": [137, 141, 168], "uncertainty_sampling_with_margin": [137, 141, 168], "valueofinformation": [138, 139, 140, 141, 168], "877": 138, "882": 138, "619": [138, 141, 168], "value_of_information_": [138, 141, 168], "voi": [138, 141, 168], "drago": 139, "589": [139, 141, 168], "value_of_information_on_labeled_sampl": [139, 141, 168], "ajai": 140, "fatih": 140, "nikolao": 140, "vision": 140, "pattern": 140, "2372": 140, "2379": 140, "613": [140, 141, 168], "value_of_information_on_unlabeled_sampl": [140, 141, 168], "00": [141, 142, 156, 168], "324": 141, "sphinx_gallery_exampl": [141, 142, 156], "mem": [141, 142, 156, 168], "mb": [141, 142, 156, 168], "03": [141, 168], "000": 142, "plot_stream_training_data": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "plot_stream_decision_boundari": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "init_s": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "x_init": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "y_init": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "x_stream": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "y_stream": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166], "x_train": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 164, 165, 166, 167], "y_train": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 164, 165, 166, 167], "set_xlim": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "set_ylim": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "bottom": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "predictions_list": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "x_t": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166, 167], "y_t": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166, 167], "y_cand": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167], "sampled_indic": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 167], "right": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 162, 164, 166], "data_lin": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "title_str": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "4f": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162], "500": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 166], "sanmin": [144, 145, 146, 147], "shan": [144, 145, 146, 147], "jia": [144, 145, 146, 147], "chuan": [144, 145, 146, 147], "jie": [144, 145, 146, 147], "186": [144, 145, 146, 147], "200": [144, 145, 146, 147, 160, 167], "2023": [144, 145, 146, 147], "344": [144, 156, 168], "cognitive_du": [144, 145, 146, 147, 156, 168], "query_strategy_with_fix": [144, 156, 168], "342": [145, 156, 168], "query_strategy_with_random_sampl": [145, 156, 168], "345": [146, 147, 152, 153, 156, 168], "query_strategy_with_random": [146, 156, 168], "query_strategy_with_vari": [147, 156, 168], "indr\u0117": [148, 150, 151, 152, 155], "albert": [148, 150, 151, 155], "geoffrei": [148, 150, 151, 155], "341": [148, 156, 168], "periodicsampl": [149, 156, 164, 166, 168], "335": [149, 154, 156, 168], "periodic_sampl": [149, 156, 168], "343": [150, 156, 168], "340": [151, 155, 156, 168], "dino": 152, "3rd": 152, "heterogen": 152, "program": 152, "36": 152, "york": 152, "usa": 152, "24": 152, "aug": 152, "pmlr": 152, "density_based_active_learning_for_data_stream": [152, 156, 168], "streamprobabilist": [153, 156, 164, 166, 168], "publish": 153, "probabilistic_active_learning_in_datastream": [153, 156, 168], "streamrandomsampl": [154, 156, 164, 166, 168], "stream_random_sampl": [154, 156, 168], "04": 156, "12": [156, 159], "checkbox": 157, "tabl": 157, "purpos": [158, 159, 162], "tutori": [158, 159, 161, 162, 167], "eas": 158, "frame": 158, "friendli": 158, "show": [158, 159, 160, 161, 162, 163, 164, 165, 166], "exemplari": 158, "mlp": [158, 159, 160, 161, 162, 163, 164, 166], "make_classif": 158, "figur": [158, 159, 160, 162, 163, 164, 166], "facecolor": [158, 159, 160, 162, 163, 164, 166], "white": [158, 159, 160, 162, 163, 164, 166], "filterwarn": [158, 159, 160, 161, 162], "practic": [158, 162], "howev": [158, 162], "oracl": [158, 162], "n_redund": 158, "jet": [158, 162], "xlabel": [158, 159, 162, 164, 166], "ylabel": [158, 159, 162, 164, 166], "introduc": 158, "shown": 158, "begin": 158, "easi": 158, "cope": 158, "central": 158, "uncertain": 158, "42": [158, 161], "continu": 158, "6": [158, 160, 161, 162, 163, 164, 165, 166], "unlbld_idx": 158, "lbld_idx": 158, "grai": 158, "68": 158, "95": 158, "94": 158, "brief": 159, "pytorch": 159, "torch": 159, "deepcopi": 159, "call_func": [159, 160, 161, 162, 164, 165, 166], "fetch_openml": 159, "votingclassifi": 159, "model_select": [159, 161, 162], "train_test_split": 159, "standardscal": [159, 161], "neuralnetclassifi": 159, "nn": 159, "torchvis": 159, "fontsiz": [159, 160, 163], "manual_se": 159, "cuda": 159, "devic": 159, "is_avail": 159, "cpu": 159, "simplic": [159, 164, 166], "mnist": 159, "28": 159, "28px": 159, "handwritten": [159, 161], "recogn": 159, "mnist_784": 159, "return_x_i": 159, "as_fram": 159, "figsiz": [159, 160, 163], "nrow": 159, "ncol": 159, "imshow": 159, "n_channel": 159, "height": 159, "astyp": 159, "float32": 159, "int64": 159, "66": 159, "y_test": [159, 162], "train_siz": 159, "rotat": 159, "scale": 159, "basic": [159, 160, 161], "pad": 159, "vertic": 159, "horizont": 159, "flip": 159, "translat": 159, "crop": 159, "darken": 159, "brighten": 159, "modif": 159, "grayscal": 159, "contrast": 159, "eras": 159, "look": [159, 160, 161], "tensorflow": 159, "visit": 159, "And": 159, "compos": 159, "randomaffin": 159, "degre": 159, "randomperspect": 159, "distortion_scal": 159, "gaussianblur": 159, "kernel_s": 159, "sigma": 159, "30": [159, 160, 164, 165, 166], "x_aug": 159, "from_numpi": 159, "cnn": 159, "ten": 159, "classifiermodul": 159, "__init__": [159, 161], "dropout": 159, "conv1": 159, "conv2d": 159, "conv2": 159, "64": 159, "conv2_drop": 159, "dropout2d": 159, "fc1": 159, "1600": 159, "fc2": 159, "fc1_drop": 159, "no_grad": 159, "relu": 159, "max_pool2d": 159, "softmax": 159, "net": 159, "module__n_class": 159, "max_epoch": 159, "16": 159, "lr": 159, "verbos": 159, "sgd": 159, "optimizer__momentum": 159, "optimizer__weight_decai": 159, "3e": 159, "train_split": 159, "ensemble_init": 159, "four": [159, 160], "setup": 159, "n_sub_set": 159, "qs_dict": 159, "acc_dict": 159, "qs_name": [159, 162], "item": [159, 161, 164, 165, 166], "full_lik": [159, 160], "warm": 159, "argwher": 159, "acc": 159, "ulbd_indic": 159, "choic": 159, "curv": [159, 162, 167], "aulc": 159, "arang": [159, 162, 165], "xtick": 159, "ytick": 159, "loc": [159, 162], "give": [160, 163], "baggingregressor": 160, "sklearnregressor": 160, "dimension": [160, 163], "n_iter": 160, "uniform_rv": 160, "pos_arg": 160, "key_word_arg": 160, "norm_rv": 160, "40": 160, "complex_func": 160, "high_nois": 160, "80": 160, "high_density_diff": 160, "want": [160, 161, 162, 163, 164, 165, 166], "lightgreen": 160, "red": 160, "small": 160, "behavior": 160, "cell": [160, 161, 164, 165, 166], "quiet": 160, "spike": 160, "evenli": 160, "strong": 160, "tendenc": 160, "steep": 160, "monoton": 160, "sinc": [160, 164, 165, 166], "slowli": 160, "gain": 160, "happen": 160, "learner": 160, "seem": 160, "anoth": [160, 162, 164, 166], "qs_": 160, "y_": 160, "old_is_lbld": 160, "ax_t": 160, "twinx": 160, "y_std": 160, "__class__": 160, "__name__": 160, "fontdict": 160, "semi": 161, "ipyannot": 161, "superintend": 161, "familiar": 161, "try": 161, "ll": 161, "uncom": 161, "wish": 161, "front": 161, "nbextens": 161, "math": 161, "cross_val_scor": 161, "load_digit": 161, "neural_network": 161, "mlpclassifi": 161, "ipywidget": 161, "classlabel": 161, "At": 161, "datalabel": 161, "overwrit": 161, "_annotation_iter": 161, "_undo": 161, "labelling_widget": 161, "submissionwidgetmixin": 161, "query_dict": 161, "past": 161, "shape_queri": 161, "shape_clf": 161, "entir": 161, "eval_method": 161, "y_eval": 161, "clf_eval": 161, "attributeerror": 161, "ceil": 161, "model_perform": 161, "top_bar": 161, "hbox": 161, "progressbar": 161, "layout": 161, "justify_cont": 161, "children": 161, "_begin_annot": 161, "bar_styl": 161, "undo": 161, "delet": 161, "_render_hold_messag": 161, "load": 161, "yield": 161, "undon": 161, "pop": 161, "break": 161, "brake": 161, "_render_finish": 161, "_annotation_loop": 161, "send": 161, "ve": 161, "invok": 161, "startswith": 161, "enough": 161, "ok": 161, "cv": 161, "error_scor": 161, "n_split": [161, 162], "3f": 161, "digit": 161, "8x8": 161, "exchang": 161, "pipe": 161, "scaler": 161, "image_s": 161, "data_label": 161, "abov": 161, "produc": 161, "comparison": 162, "realiz": 162, "fold": 162, "focu": 162, "cleanli": 162, "separ": [162, 164, 165, 166], "repetit": [162, 164, 165, 166], "proper": 162, "stratifiedkfold": 162, "kfold": 162, "guarante": [162, 164, 165, 166], "helper": 162, "mind": [162, 167], "master_random_st": 162, "gen_se": 162, "randint": [162, 164, 165, 166], "gen_random_st": 162, "n_centers_per_class": 162, "400": 162, "creation": 162, "factori": [162, 164, 165, 166], "classifier_factory_funct": 162, "query_strategy_factory_funct": 162, "create_classifi": 162, "create_query_strategi": 162, "n_rep": 162, "n_fold": 162, "stratifi": 162, "use_stratifi": 162, "classifier_nam": 162, "query_strategy_nam": [162, 164, 165, 166], "record": 162, "kfold_class": 162, "clf_name": [162, 165], "i_rep": 162, "kf": 162, "i_fold": 162, "train_idx": 162, "test_idx": 162, "y_train_tru": 162, "rel": 162, "bar": 162, "reshaped_result": 162, "errorbar_mean": 162, "errorbar_std": 162, "errorbar": 162, "introduct": 163, "plot_annotator_util": 163, "marker_s": 163, "suppos": 163, "omnisci": 163, "tight_layout": 163, "circl": 163, "rng": 163, "default_rng": 163, "y_annot": 163, "y_nois": 163, "binomi": 163, "is_tru": 163, "singleannotwrapp": 163, "achiev": 163, "sa_q": 163, "ma_q": 163, "5th": 163, "14th": 163, "20th": 163, "satur": 163, "13": 163, "19": 163, "ma_qs_arg_dict": 163, "showcas": [164, 166], "dequ": [164, 166], "ndimag": [164, 165, 166], "gaussian_filter1d": [164, 165, 166], "experi": [164, 165, 166], "construct": [164, 165, 166], "stream_length": [164, 165, 166], "training_s": [164, 165, 166], "init_train_length": [164, 165, 166], "5000": [164, 166], "dedic": [164, 166], "explicitli": [164, 165, 166], "get_randomse": [164, 165, 166], "block": [164, 165, 166], "locat": [164, 165, 166], "denot": [164, 165, 166, 167], "suffix": [164, 165, 166], "_init": [164, 165, 166], "_stream": [164, 165, 166], "prequenti": [164, 165, 166], "y_center": [164, 165, 166], "affect": [164, 165, 166], "managag": [164, 166], "sake": [164, 166], "clf_factori": [164, 165, 166], "dbalstream": [164, 166], "cogdqsran": [164, 166], "cogdqsfixun": [164, 166], "cogdqsvarun": [164, 166], "cogdqsranvarun": [164, 166], "goe": [164, 165, 166], "lastli": [164, 165, 166], "maxlen": [164, 166], "correct_classif": [164, 165, 166, 167], "avg": [164, 165, 166], "7642": 164, "498": [164, 166], "7764": 164, "7416": 164, "522": 164, "7828": 164, "7834": 164, "521": [164, 166], "7966": 164, "environ": 165, "incom": 165, "stream_batch_s": 165, "query_batch_s": 165, "10000": 165, "clf_dict": 165, "index_cand": 165, "y_cand_tru": 165, "x_train_arrai": 165, "acquis": [165, 166], "smooth": 165, "8281": 165, "2000": 165, "7961": 165, "8404": 165, "8385": 165, "8186": 165, "lt": 165, "0x23bd6612700": 165, "gt": 165, "slidingwindowclassifi": 166, "river2sklclassifi": 166, "forest": 166, "arfclassifi": 166, "biqf": 166, "7188": 166, "7338": 166, "7612": 166, "523": 166, "7474": 166, "7312": 166, "7674": 166, "often": 167, "wherea": 167, "gather": 167, "difficult": 167, "consum": 167, "expens": 167, "fewer": 167, "2020": 167, "kassel": 167, "claus": 167, "bsd": 167, "licenc": 167, "easiest": 167, "broad": 167, "section": 167, "offer": 167, "skorch": [167, 170], "studi": [167, 170], "river": [167, 170], "straightforward": 167, "snippet": 167, "difficulti": 167, "abil": 167, "greenish": 167, "accross": 167, "orient": 167, "incl": 167, "find": 167, "articl": 167, "skactiveml2021": 167, "ibrari": 167, "oolbox": 167, "ctive": 167, "earn": 167, "lgorithm": 167, "marek": 167, "herd": 167, "tuan": 167, "pham": 167, "minh": 167, "benz": 167, "pascal": 167, "mergard": 167, "atal": 167, "roghman": 167, "sandrock": 167, "doi": 167, "20944": 167, "preprints202103": 167, "0194": 167, "v1": 167, "year": 167, "url": 167, "424": 168, "43": 168, "throughout": 169}, "objects": {"": [[104, 0, 0, "-", "skactiveml"]], "skactiveml": [[104, 0, 0, "-", "base"], [104, 0, 0, "-", "classifier"], [104, 0, 0, "-", "exceptions"], [104, 0, 0, "-", "pool"], [104, 0, 0, "-", "stream"], [104, 0, 0, "-", "utils"], [104, 0, 0, "-", "visualization"]], "skactiveml.base": [[4, 1, 1, "", "AnnotatorModelMixin"], [5, 1, 1, "", "BudgetManager"], [6, 1, 1, "", "ClassFrequencyEstimator"], [7, 1, 1, "", "MultiAnnotatorPoolQueryStrategy"], [8, 1, 1, "", "ProbabilisticRegressor"], [9, 1, 1, "", "QueryStrategy"], [10, 1, 1, "", "SingleAnnotatorPoolQueryStrategy"], [11, 1, 1, "", "SingleAnnotatorStreamQueryStrategy"], [12, 1, 1, "", "SkactivemlClassifier"], [13, 1, 1, "", "SkactivemlRegressor"]], "skactiveml.base.AnnotatorModelMixin": [[4, 2, 1, "", "predict_annotator_perf"]], "skactiveml.base.BudgetManager": [[5, 2, 1, "", "get_metadata_routing"], [5, 2, 1, "", "get_params"], [5, 2, 1, "", "query_by_utility"], [5, 2, 1, "", "set_params"], [5, 2, 1, "", "update"]], "skactiveml.base.ClassFrequencyEstimator": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "get_metadata_routing"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_freq"], [6, 2, 1, "", "predict_proba"], [6, 2, 1, "", "score"], [6, 2, 1, "", "set_fit_request"], [6, 2, 1, "", "set_params"], [6, 2, 1, "", "set_score_request"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, 2, 1, "", "get_metadata_routing"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "query"], [7, 2, 1, "", "set_params"]], "skactiveml.base.ProbabilisticRegressor": [[8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_target_distribution"], [8, 2, 1, "", "sample_y"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_predict_request"], [8, 2, 1, "", "set_score_request"]], "skactiveml.base.QueryStrategy": [[9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "query"], [9, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "query"], [10, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "query"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "update"]], "skactiveml.base.SkactivemlClassifier": [[12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "skactiveml.base.SkactivemlRegressor": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "skactiveml.classifier": [[14, 1, 1, "", "MixtureModelClassifier"], [15, 1, 1, "", "ParzenWindowClassifier"], [16, 1, 1, "", "SklearnClassifier"], [17, 1, 1, "", "SlidingWindowClassifier"], [104, 0, 0, "-", "multiannotator"]], "skactiveml.classifier.MixtureModelClassifier": [[14, 2, 1, "", "fit"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_freq"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, 3, 1, "", "METRICS"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_freq"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SklearnClassifier": [[16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "partial_fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_partial_fit_request"], [16, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_freq"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator": [[18, 1, 1, "", "AnnotatorEnsembleClassifier"], [19, 1, 1, "", "AnnotatorLogisticRegression"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 4, 1, "", "named_estimators"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_score_request"], [18, 3, 1, "", "steps"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, 2, 1, "", "fit"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_annotator_perf"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_score_request"]], "skactiveml.exceptions": [[20, 1, 1, "", "MappingError"]], "skactiveml.exceptions.MappingError": [[20, 3, 1, "", "args"], [20, 2, 1, "", "with_traceback"]], "skactiveml.pool": [[21, 1, 1, "", "BatchBALD"], [22, 1, 1, "", "CostEmbeddingAL"], [23, 1, 1, "", "DiscriminativeAL"], [24, 1, 1, "", "EpistemicUncertaintySampling"], [25, 1, 1, "", "ExpectedModelChangeMaximization"], [26, 1, 1, "", "ExpectedModelOutputChange"], [27, 1, 1, "", "ExpectedModelVarianceReduction"], [28, 1, 1, "", "FourDs"], [29, 1, 1, "", "GreedyBALD"], [30, 1, 1, "", "GreedySamplingTarget"], [31, 1, 1, "", "GreedySamplingX"], [32, 1, 1, "", "KLDivergenceMaximization"], [33, 1, 1, "", "MonteCarloEER"], [34, 1, 1, "", "ProbabilisticAL"], [35, 1, 1, "", "QueryByCommittee"], [36, 1, 1, "", "Quire"], [37, 1, 1, "", "RandomSampling"], [38, 1, 1, "", "UncertaintySampling"], [39, 1, 1, "", "ValueOfInformationEER"], [40, 5, 1, "", "average_kl_divergence"], [41, 5, 1, "", "batch_bald"], [42, 5, 1, "", "cost_reduction"], [43, 5, 1, "", "expected_average_precision"], [104, 0, 0, "-", "multiannotator"], [47, 5, 1, "", "uncertainty_scores"], [104, 0, 0, "-", "utils"], [49, 5, 1, "", "vote_entropy"]], "skactiveml.pool.BatchBALD": [[21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "query"], [21, 2, 1, "", "set_params"]], "skactiveml.pool.CostEmbeddingAL": [[22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "query"], [22, 2, 1, "", "set_params"]], "skactiveml.pool.DiscriminativeAL": [[23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "query"], [23, 2, 1, "", "set_params"]], "skactiveml.pool.EpistemicUncertaintySampling": [[24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "query"], [24, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "query"], [25, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelOutputChange": [[26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "query"], [26, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "query"], [27, 2, 1, "", "set_params"]], "skactiveml.pool.FourDs": [[28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "query"], [28, 2, 1, "", "set_params"]], "skactiveml.pool.GreedyBALD": [[29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "query"], [29, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingTarget": [[30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "query"], [30, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingX": [[31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "query"], [31, 2, 1, "", "set_params"]], "skactiveml.pool.KLDivergenceMaximization": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "query"], [32, 2, 1, "", "set_params"]], "skactiveml.pool.MonteCarloEER": [[33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "query"], [33, 2, 1, "", "set_params"]], "skactiveml.pool.ProbabilisticAL": [[34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "query"], [34, 2, 1, "", "set_params"]], "skactiveml.pool.QueryByCommittee": [[35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "query"], [35, 2, 1, "", "set_params"]], "skactiveml.pool.Quire": [[36, 3, 1, "", "METRICS"], [36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "query"], [36, 2, 1, "", "set_params"]], "skactiveml.pool.RandomSampling": [[37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "query"], [37, 2, 1, "", "set_params"]], "skactiveml.pool.UncertaintySampling": [[38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "query"], [38, 2, 1, "", "set_params"]], "skactiveml.pool.ValueOfInformationEER": [[39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "query"], [39, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator": [[44, 1, 1, "", "IntervalEstimationAnnotModel"], [45, 1, 1, "", "IntervalEstimationThreshold"], [46, 1, 1, "", "SingleAnnotatorWrapper"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[44, 2, 1, "", "fit"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict_annotator_perf"], [44, 2, 1, "", "set_fit_request"], [44, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "query"], [45, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "query"], [46, 2, 1, "", "set_params"]], "skactiveml.pool.utils": [[48, 1, 1, "", "IndexClassifierWrapper"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[48, 2, 1, "", "fit"], [48, 2, 1, "", "is_fitted"], [48, 2, 1, "", "partial_fit"], [48, 2, 1, "", "precompute"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_freq"], [48, 2, 1, "", "predict_proba"]], "skactiveml.stream": [[50, 1, 1, "", "CognitiveDualQueryStrategy"], [51, 1, 1, "", "CognitiveDualQueryStrategyFixUn"], [52, 1, 1, "", "CognitiveDualQueryStrategyRan"], [53, 1, 1, "", "CognitiveDualQueryStrategyRanVarUn"], [54, 1, 1, "", "CognitiveDualQueryStrategyVarUn"], [55, 1, 1, "", "FixedUncertainty"], [56, 1, 1, "", "PeriodicSampling"], [57, 1, 1, "", "RandomVariableUncertainty"], [58, 1, 1, "", "Split"], [59, 1, 1, "", "StreamDensityBasedAL"], [60, 1, 1, "", "StreamProbabilisticAL"], [61, 1, 1, "", "StreamRandomSampling"], [62, 1, 1, "", "VariableUncertainty"], [104, 0, 0, "-", "budgetmanager"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "query"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "query"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "query"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "query"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "query"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "update"]], "skactiveml.stream.FixedUncertainty": [[55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "query"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "update"]], "skactiveml.stream.PeriodicSampling": [[56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "query"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "update"]], "skactiveml.stream.RandomVariableUncertainty": [[57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "query"], [57, 2, 1, "", "set_params"], [57, 2, 1, "", "update"]], "skactiveml.stream.Split": [[58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "query"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "update"]], "skactiveml.stream.StreamDensityBasedAL": [[59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 2, 1, "", "query"], [59, 2, 1, "", "set_params"], [59, 2, 1, "", "update"]], "skactiveml.stream.StreamProbabilisticAL": [[60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 2, 1, "", "query"], [60, 2, 1, "", "set_params"], [60, 2, 1, "", "update"]], "skactiveml.stream.StreamRandomSampling": [[61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 2, 1, "", "query"], [61, 2, 1, "", "set_params"], [61, 2, 1, "", "update"]], "skactiveml.stream.VariableUncertainty": [[62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "query"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager": [[63, 1, 1, "", "BalancedIncrementalQuantileFilter"], [64, 1, 1, "", "DensityBasedSplitBudgetManager"], [65, 1, 1, "", "EstimatedBudgetZliobaite"], [66, 1, 1, "", "FixedUncertaintyBudgetManager"], [67, 1, 1, "", "RandomBudgetManager"], [68, 1, 1, "", "RandomVariableUncertaintyBudgetManager"], [69, 1, 1, "", "SplitBudgetManager"], [70, 1, 1, "", "VariableUncertaintyBudgetManager"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "query_by_utility"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "query_by_utility"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "query_by_utility"], [65, 2, 1, "", "set_params"], [65, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "query_by_utility"], [66, 2, 1, "", "set_params"], [66, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "query_by_utility"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "query_by_utility"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[69, 2, 1, "", "get_metadata_routing"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "query_by_utility"], [69, 2, 1, "", "set_params"], [69, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[70, 2, 1, "", "get_metadata_routing"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "query_by_utility"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "update"]], "skactiveml.utils": [[71, 1, 1, "", "ExtLabelEncoder"], [72, 5, 1, "", "_check_callable"], [73, 5, 1, "", "call_func"], [74, 5, 1, "", "check_X_y"], [75, 5, 1, "", "check_bound"], [76, 5, 1, "", "check_budget_manager"], [77, 5, 1, "", "check_class_prior"], [78, 5, 1, "", "check_classes"], [79, 5, 1, "", "check_classifier_params"], [80, 5, 1, "", "check_cost_matrix"], [81, 5, 1, "", "check_equal_missing_label"], [82, 5, 1, "", "check_indices"], [83, 5, 1, "", "check_missing_label"], [84, 5, 1, "", "check_random_state"], [85, 5, 1, "", "check_scalar"], [86, 5, 1, "", "check_type"], [87, 5, 1, "", "compute_vote_vectors"], [88, 5, 1, "", "ext_confusion_matrix"], [89, 5, 1, "", "is_labeled"], [90, 5, 1, "", "is_unlabeled"], [91, 5, 1, "", "labeled_indices"], [92, 5, 1, "", "majority_vote"], [93, 5, 1, "", "rand_argmax"], [94, 5, 1, "", "rand_argmin"], [95, 5, 1, "", "simple_batch"], [96, 5, 1, "", "unlabeled_indices"]], "skactiveml.utils.ExtLabelEncoder": [[71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "set_params"], [71, 2, 1, "", "transform"]], "skactiveml.visualization": [[97, 5, 1, "", "mesh"], [98, 5, 1, "", "plot_annotator_utilities"], [99, 5, 1, "", "plot_contour_for_samples"], [100, 5, 1, "", "plot_decision_boundary"], [101, 5, 1, "", "plot_stream_decision_boundary"], [102, 5, 1, "", "plot_stream_training_data"], [103, 5, 1, "", "plot_utilities"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"develop": 0, "guid": 0, "overview": [0, 157, 167], "thank": 0, "you": 0, "contributor": 0, "get": [0, 158, 160, 163, 164], "help": 0, "roadmap": 0, "start": [0, 158, 160, 161, 163, 164, 165, 166], "setup": 0, "environ": 0, "exampl": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 89, 91, 95, 96, 99, 100, 101, 102, 103, 105, 108, 130, 167, 169], "With": [0, 165, 166], "miniconda": 0, "instal": [0, 161, 167], "depend": 0, "maco": 0, "homebrew": 0, "contribut": 0, "code": 0, "gener": [0, 158, 160, 162, 163, 164, 165, 166], "convent": 0, "c3": 0, "cycl": [0, 158, 164, 165, 166], "pull": 0, "request": 0, "queri": [0, 128, 129, 130, 144, 145, 146, 147, 158, 162, 164, 165, 166, 167], "strategi": [0, 2, 3, 106, 107, 108, 109, 133, 143, 144, 145, 146, 147, 157, 158, 162, 164, 165, 166, 167], "singl": 0, "annot": [0, 161, 163], "pool": [0, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 104, 106, 108, 109, 158, 159, 160, 162, 163, 165, 167], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 104, 106, 107, 108, 109, 124, 143, 152, 158, 159, 160, 162, 163, 164, 166, 167], "__init__": 0, "method": 0, "advic": 0, "test": 0, "stream": [0, 3, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104, 107, 108, 143, 152, 154, 164, 165, 166, 167], "updat": 0, "budget_manag": 0, "query_by_util": 0, "work": 0, "multi": [0, 127, 163], "classifi": [0, 14, 15, 16, 17, 18, 19, 104], "init": 0, "fit": 0, "predict_proba": 0, "predict": 0, "score": 0, "regressor": 0, "model": [0, 115, 116, 117, 162], "predict_annotator_perf": 0, "coverag": 0, "document": [0, 167], "guidelin": 0, "write": 0, "build": 0, "issu": 0, "track": 0, "check": 0, "If": 0, "A": 0, "bug": 0, "alreadi": 0, "exist": 0, "report": 0, "an": 0, "al": [2, 3, 106, 107, 108, 109, 143], "skactiveml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 169], "annotatormodelmixin": 4, "budgetmanag": [5, 63, 64, 65, 66, 67, 68, 69, 70, 104], "classfrequencyestim": 6, "us": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 89, 91, 95, 96, 99, 100, 101, 102, 103, 169], "multiannotatorpoolquerystrategi": 7, "probabilisticregressor": 8, "querystrategi": 9, "singleannotatorpoolquerystrategi": 10, "singleannotatorstreamquerystrategi": 11, "skactivemlclassifi": 12, "skactivemlregressor": 13, "paramet": [13, 162, 164, 165, 166], "mixturemodelclassifi": 14, "parzenwindowclassifi": 15, "sklearnclassifi": 16, "slidingwindowclassifi": 17, "multiannot": [18, 19, 44, 45, 46, 104], "annotatorensembleclassifi": 18, "annotatorlogisticregress": 19, "except": [20, 104], "mappingerror": 20, "batchbald": [21, 110], "costembedding": 22, "discriminativ": 23, "epistemicuncertaintysampl": 24, "expectedmodelchangemaxim": 25, "expectedmodeloutputchang": 26, "expectedmodelvariancereduct": 27, "fourd": 28, "greedybald": 29, "greedysamplingtarget": 30, "greedysamplingx": 31, "kldivergencemaxim": 32, "montecarlo": 33, "probabilist": [34, 127, 153], "querybycommitte": 35, "quir": 36, "randomsampl": 37, "uncertaintysampl": 38, "valueofinformation": 39, "average_kl_diverg": 40, "batch_bald": 41, "cost_reduct": 42, "expected_average_precis": 43, "intervalestimationannotmodel": 44, "intervalestimationthreshold": 45, "singleannotatorwrapp": 46, "uncertainty_scor": 47, "util": [48, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 104, 169], "indexclassifierwrapp": 48, "vote_entropi": 49, "cognitivedualquerystrategi": 50, "cognitivedualquerystrategyfixun": 51, "cognitivedualquerystrategyran": 52, "cognitivedualquerystrategyranvarun": 53, "cognitivedualquerystrategyvarun": 54, "fixeduncertainti": 55, "periodicsampl": 56, "randomvariableuncertainti": 57, "split": [58, 151], "streamdensitybased": 59, "streamprobabilist": 60, "streamrandomsampl": 61, "variableuncertainti": 62, "balancedincrementalquantilefilt": 63, "densitybasedsplitbudgetmanag": 64, "estimatedbudgetzliobait": 65, "fixeduncertaintybudgetmanag": 66, "randombudgetmanag": 67, "randomvariableuncertaintybudgetmanag": 68, "splitbudgetmanag": 69, "variableuncertaintybudgetmanag": 70, "extlabelencod": 71, "_check_cal": 72, "call_func": 73, "check_x_i": 74, "check_bound": 75, "check_budget_manag": 76, "check_class_prior": 77, "check_class": 78, "check_classifier_param": 79, "check_cost_matrix": 80, "check_equal_missing_label": 81, "check_indic": 82, "check_missing_label": 83, "check_random_st": 84, "check_scalar": 85, "check_typ": 86, "compute_vote_vector": 87, "ext_confusion_matrix": 88, "is_label": 89, "is_unlabel": 90, "labeled_indic": 91, "majority_vot": 92, "rand_argmax": 93, "rand_argmin": 94, "simple_batch": 95, "unlabeled_indic": 96, "visual": [97, 98, 99, 100, 101, 102, 103, 104, 159], "mesh": 97, "plot_annotator_util": 98, "plot_contour_for_sampl": 99, "plot_decision_boundari": 100, "plot_stream_decision_boundari": 101, "plot_stream_training_data": 102, "plot_util": 103, "api": 104, "refer": [104, 157], "class": [104, 127, 161], "function": 104, "batch": [110, 118, 165], "bayesian": [110, 111, 120], "activ": [110, 111, 112, 113, 120, 127, 133, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167], "learn": [110, 111, 112, 113, 120, 127, 133, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167], "disagr": [110, 111, 120], "cost": 112, "embed": 112, "discrimin": 113, "epistem": 114, "uncertainti": [114, 132, 135, 136, 137, 144, 146, 147, 148, 150, 155], "sampl": [114, 118, 119, 121, 122, 123, 131, 132, 135, 136, 137, 139, 140, 145, 149, 154, 161], "expect": [115, 116, 117, 134], "chang": [115, 116], "output": 116, "varianc": 117, "reduct": 117, "densiti": [118, 119, 132, 152], "divers": [118, 119], "distribut": [118, 119], "distanc": [118, 119], "greedi": [121, 122, 123], "target": 121, "space": [121, 123], "gsy": 121, "improv": 122, "gsi": 122, "featur": 123, "gsx": 123, "regress": [124, 160], "kullback": [124, 128], "leibler": [124, 128], "diverg": [124, 128], "maxim": 124, "mont": [125, 126], "carlo": [125, 126], "eer": [125, 126], "log": 125, "loss": [125, 126], "misclassif": 126, "committe": [128, 129], "vote": 129, "entropi": [129, 135], "inform": [130, 138, 139, 140], "repres": 130, "random": [131, 145, 146, 150, 154, 162, 164, 165, 166], "weight": 132, "dual": [133, 144, 145, 146, 147], "averag": 134, "precis": 134, "least": 136, "confid": 136, "margin": 137, "valu": [138, 139, 140], "label": 139, "unlabel": 140, "comput": [141, 142, 156, 168], "time": [141, 142, 156, 168], "cognit": [144, 145, 146, 147], "fix": [144, 148], "variabl": [146, 147, 150, 155], "period": 149, "data": [152, 158, 159, 160, 162, 163, 164, 165, 166], "datastream": 153, "set": [158, 159, 160, 162, 163, 164, 165, 166], "classif": [158, 159, 162, 163], "deep": 159, "scikit": [159, 167], "activeml": [159, 167], "skorch": 159, "load": 159, "digit": 159, "augment": 159, "convolut": 159, "neural": 159, "network": 159, "ensembl": 159, "result": [159, 162], "configur": 161, "The": 161, "widget": 161, "creat": 161, "dataset": 161, "process": 161, "simpl": 162, "evalu": 162, "studi": 162, "seed": [162, 164, 165, 166], "manag": 162, "experi": 162, "loop": 162, "plot": 162, "initi": [164, 165, 166], "And": [164, 165], "river": 166, "welcom": 167, "": 167, "user": 167, "cite": 167, "indic": 167, "tabl": 167, "missing_label": 169, "tutori": 170}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Developer Guide": [[0, "developer-guide"]], "Overview": [[0, "overview"]], "Thank you, contributors!": [[0, "thank-you-contributors"]], "Getting Help": [[0, "getting-help"]], "Roadmap": [[0, "roadmap"]], "Get Started": [[0, "get-started"]], "Setup Development Environment": [[0, "setup-development-environment"]], "Example With miniconda": [[0, "example-with-miniconda"]], "Install Dependencies": [[0, "install-dependencies"]], "Example with MacOS (Homebrew)": [[0, "example-with-macos-homebrew"]], "Contributing Code": [[0, "contributing-code"]], "General Coding Conventions": [[0, "general-coding-conventions"]], "Example for C3 (Code Contribution Cycle) and Pull Requests": [[0, "example-for-c3-code-contribution-cycle-and-pull-requests"]], "Query Strategies": [[0, "query-strategies"]], "Single-annotator Pool-based Query Strategies": [[0, "single-annotator-pool-based-query-strategies"]], "General": [[0, "general"], [0, "general-2"]], "__init__ method": [[0, "init-method"]], "query method": [[0, "query-method"], [0, "query-method-2"], [0, "query-method-3"]], "General advice": [[0, "general-advice"], [0, "general-advice-2"], [0, "general-advice-3"], [0, "general-advice-6"], [0, "general-advice-7"], [0, "general-advice-8"], [0, "general-advice-9"], [0, "general-advice-10"], [0, "general-advice-11"], [0, "general-advice-12"], [0, "general-advice-13"], [0, "general-advice-14"]], "Testing": [[0, "testing"], [0, "testing-2"], [0, "id7"], [0, "testing-3"], [0, "testing-4"], [0, "testing-5"]], "Single-annotator Stream-based Query Strategies": [[0, "single-annotator-stream-based-query-strategies"]], "update method": [[0, "update-method"], [0, "update-2"]], "General advice for the budget_manager": [[0, "general-advice-for-the-budget-manager"]], "query_by_utilities method": [[0, "query-by-utilities-method"]], "General advice for working with a budget_manager:": [[0, "general-advice-for-working-with-a-budget-manager"]], "Multi-Annotator Pool-based Query Strategies": [[0, "multi-annotator-pool-based-query-strategies"]], "Classifiers": [[0, "classifiers"]], "init method": [[0, "init-2"], [0, "init-3"]], "fit method": [[0, "fit-method"], [0, "fit-2"]], "predict_proba method": [[0, "predict-proba-method"]], "predict method": [[0, "predict-method"], [0, "predict-2"]], "score method": [[0, "score-method"], [0, "score-2"]], "Regressors": [[0, "regressors"]], "Annotators Models": [[0, "annotators-models"]], "predict_annotator_perf method": [[0, "predict-annotator-perf-method"]], "Examples": [[0, "examples"], [1, "examples"], [105, "examples"], [108, "examples"], [167, "examples"]], "Testing and code coverage": [[0, "testing-and-code-coverage"]], "Documentation": [[0, "documentation"]], "Guidelines for writing documentation": [[0, "guidelines-for-writing-documentation"]], "Building the documentation": [[0, "building-the-documentation"]], "Issue Tracking": [[0, "issue-tracking"]], "Checking If A Bug Already Exists": [[0, "checking-if-a-bug-already-exists"]], "Reporting an issue": [[0, "reporting-an-issue"]], "Pool Based AL Strategies": [[2, "pool-based-al-strategies"], [106, "pool-based-al-strategies"], [108, "pool-based-al-strategies"], [109, "pool-based-al-strategies"]], "Stream Based AL Strategies": [[3, "stream-based-al-strategies"], [107, "stream-based-al-strategies"], [108, "stream-based-al-strategies"], [143, "stream-based-al-strategies"]], "skactiveml.base.AnnotatorModelMixin": [[4, "skactiveml-base-annotatormodelmixin"]], "skactiveml.base.BudgetManager": [[5, "skactiveml-base-budgetmanager"]], "skactiveml.base.ClassFrequencyEstimator": [[6, "skactiveml-base-classfrequencyestimator"]], "Examples using skactiveml.base.ClassFrequencyEstimator": [[6, "examples-using-skactiveml-base-classfrequencyestimator"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, "skactiveml-base-multiannotatorpoolquerystrategy"]], "skactiveml.base.ProbabilisticRegressor": [[8, "skactiveml-base-probabilisticregressor"]], "Examples using skactiveml.base.ProbabilisticRegressor": [[8, "examples-using-skactiveml-base-probabilisticregressor"]], "skactiveml.base.QueryStrategy": [[9, "skactiveml-base-querystrategy"]], "Examples using skactiveml.base.QueryStrategy": [[9, "examples-using-skactiveml-base-querystrategy"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "skactiveml-base-singleannotatorpoolquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "examples-using-skactiveml-base-singleannotatorpoolquerystrategy"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "skactiveml-base-singleannotatorstreamquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "examples-using-skactiveml-base-singleannotatorstreamquerystrategy"]], "skactiveml.base.SkactivemlClassifier": [[12, "skactiveml-base-skactivemlclassifier"]], "Examples using skactiveml.base.SkactivemlClassifier": [[12, "examples-using-skactiveml-base-skactivemlclassifier"]], "skactiveml.base.SkactivemlRegressor": [[13, "skactiveml-base-skactivemlregressor"]], "Parameters": [[13, "parameters"]], "Examples using skactiveml.base.SkactivemlRegressor": [[13, "examples-using-skactiveml-base-skactivemlregressor"]], "skactiveml.classifier.MixtureModelClassifier": [[14, "skactiveml-classifier-mixturemodelclassifier"]], "Examples using skactiveml.classifier.MixtureModelClassifier": [[14, "examples-using-skactiveml-classifier-mixturemodelclassifier"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, "skactiveml-classifier-parzenwindowclassifier"]], "Examples using skactiveml.classifier.ParzenWindowClassifier": [[15, "examples-using-skactiveml-classifier-parzenwindowclassifier"]], "skactiveml.classifier.SklearnClassifier": [[16, "skactiveml-classifier-sklearnclassifier"]], "Examples using skactiveml.classifier.SklearnClassifier": [[16, "examples-using-skactiveml-classifier-sklearnclassifier"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, "skactiveml-classifier-slidingwindowclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, "skactiveml-classifier-multiannotator-annotatorensembleclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, "skactiveml-classifier-multiannotator-annotatorlogisticregression"]], "skactiveml.exceptions.MappingError": [[20, "skactiveml-exceptions-mappingerror"]], "skactiveml.pool.BatchBALD": [[21, "skactiveml-pool-batchbald"]], "Examples using skactiveml.pool.BatchBALD": [[21, "examples-using-skactiveml-pool-batchbald"]], "skactiveml.pool.CostEmbeddingAL": [[22, "skactiveml-pool-costembeddingal"]], "Examples using skactiveml.pool.CostEmbeddingAL": [[22, "examples-using-skactiveml-pool-costembeddingal"]], "skactiveml.pool.DiscriminativeAL": [[23, "skactiveml-pool-discriminativeal"]], "Examples using skactiveml.pool.DiscriminativeAL": [[23, "examples-using-skactiveml-pool-discriminativeal"]], "skactiveml.pool.EpistemicUncertaintySampling": [[24, "skactiveml-pool-epistemicuncertaintysampling"]], "Examples using skactiveml.pool.EpistemicUncertaintySampling": [[24, "examples-using-skactiveml-pool-epistemicuncertaintysampling"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[25, "skactiveml-pool-expectedmodelchangemaximization"]], "Examples using skactiveml.pool.ExpectedModelChangeMaximization": [[25, "examples-using-skactiveml-pool-expectedmodelchangemaximization"]], "skactiveml.pool.ExpectedModelOutputChange": [[26, "skactiveml-pool-expectedmodeloutputchange"]], "Examples using skactiveml.pool.ExpectedModelOutputChange": [[26, "examples-using-skactiveml-pool-expectedmodeloutputchange"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[27, "skactiveml-pool-expectedmodelvariancereduction"]], "Examples using skactiveml.pool.ExpectedModelVarianceReduction": [[27, "examples-using-skactiveml-pool-expectedmodelvariancereduction"]], "skactiveml.pool.FourDs": [[28, "skactiveml-pool-fourds"]], "Examples using skactiveml.pool.FourDs": [[28, "examples-using-skactiveml-pool-fourds"]], "skactiveml.pool.GreedyBALD": [[29, "skactiveml-pool-greedybald"]], "Examples using skactiveml.pool.GreedyBALD": [[29, "examples-using-skactiveml-pool-greedybald"]], "skactiveml.pool.GreedySamplingTarget": [[30, "skactiveml-pool-greedysamplingtarget"]], "Examples using skactiveml.pool.GreedySamplingTarget": [[30, "examples-using-skactiveml-pool-greedysamplingtarget"]], "skactiveml.pool.GreedySamplingX": [[31, "skactiveml-pool-greedysamplingx"]], "Examples using skactiveml.pool.GreedySamplingX": [[31, "examples-using-skactiveml-pool-greedysamplingx"]], "skactiveml.pool.KLDivergenceMaximization": [[32, "skactiveml-pool-kldivergencemaximization"]], "Examples using skactiveml.pool.KLDivergenceMaximization": [[32, "examples-using-skactiveml-pool-kldivergencemaximization"]], "skactiveml.pool.MonteCarloEER": [[33, "skactiveml-pool-montecarloeer"]], "Examples using skactiveml.pool.MonteCarloEER": [[33, "examples-using-skactiveml-pool-montecarloeer"]], "skactiveml.pool.ProbabilisticAL": [[34, "skactiveml-pool-probabilistical"]], "Examples using skactiveml.pool.ProbabilisticAL": [[34, "examples-using-skactiveml-pool-probabilistical"]], "skactiveml.pool.QueryByCommittee": [[35, "skactiveml-pool-querybycommittee"]], "Examples using skactiveml.pool.QueryByCommittee": [[35, "examples-using-skactiveml-pool-querybycommittee"]], "skactiveml.pool.Quire": [[36, "skactiveml-pool-quire"]], "Examples using skactiveml.pool.Quire": [[36, "examples-using-skactiveml-pool-quire"]], "skactiveml.pool.RandomSampling": [[37, "skactiveml-pool-randomsampling"]], "Examples using skactiveml.pool.RandomSampling": [[37, "examples-using-skactiveml-pool-randomsampling"]], "skactiveml.pool.UncertaintySampling": [[38, "skactiveml-pool-uncertaintysampling"]], "Examples using skactiveml.pool.UncertaintySampling": [[38, "examples-using-skactiveml-pool-uncertaintysampling"]], "skactiveml.pool.ValueOfInformationEER": [[39, "skactiveml-pool-valueofinformationeer"]], "Examples using skactiveml.pool.ValueOfInformationEER": [[39, "examples-using-skactiveml-pool-valueofinformationeer"]], "skactiveml.pool.average_kl_divergence": [[40, "skactiveml-pool-average-kl-divergence"]], "skactiveml.pool.batch_bald": [[41, "skactiveml-pool-batch-bald"]], "skactiveml.pool.cost_reduction": [[42, "skactiveml-pool-cost-reduction"]], "skactiveml.pool.expected_average_precision": [[43, "skactiveml-pool-expected-average-precision"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[44, "skactiveml-pool-multiannotator-intervalestimationannotmodel"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[45, "skactiveml-pool-multiannotator-intervalestimationthreshold"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[46, "skactiveml-pool-multiannotator-singleannotatorwrapper"]], "skactiveml.pool.uncertainty_scores": [[47, "skactiveml-pool-uncertainty-scores"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[48, "skactiveml-pool-utils-indexclassifierwrapper"]], "skactiveml.pool.vote_entropy": [[49, "skactiveml-pool-vote-entropy"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[50, "skactiveml-stream-cognitivedualquerystrategy"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategy": [[50, "examples-using-skactiveml-stream-cognitivedualquerystrategy"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[51, "skactiveml-stream-cognitivedualquerystrategyfixun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[51, "examples-using-skactiveml-stream-cognitivedualquerystrategyfixun"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[52, "skactiveml-stream-cognitivedualquerystrategyran"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRan": [[52, "examples-using-skactiveml-stream-cognitivedualquerystrategyran"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[53, "skactiveml-stream-cognitivedualquerystrategyranvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[53, "examples-using-skactiveml-stream-cognitivedualquerystrategyranvarun"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[54, "skactiveml-stream-cognitivedualquerystrategyvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[54, "examples-using-skactiveml-stream-cognitivedualquerystrategyvarun"]], "skactiveml.stream.FixedUncertainty": [[55, "skactiveml-stream-fixeduncertainty"]], "Examples using skactiveml.stream.FixedUncertainty": [[55, "examples-using-skactiveml-stream-fixeduncertainty"]], "skactiveml.stream.PeriodicSampling": [[56, "skactiveml-stream-periodicsampling"]], "Examples using skactiveml.stream.PeriodicSampling": [[56, "examples-using-skactiveml-stream-periodicsampling"]], "skactiveml.stream.RandomVariableUncertainty": [[57, "skactiveml-stream-randomvariableuncertainty"]], "Examples using skactiveml.stream.RandomVariableUncertainty": [[57, "examples-using-skactiveml-stream-randomvariableuncertainty"]], "skactiveml.stream.Split": [[58, "skactiveml-stream-split"]], "Examples using skactiveml.stream.Split": [[58, "examples-using-skactiveml-stream-split"]], "skactiveml.stream.StreamDensityBasedAL": [[59, "skactiveml-stream-streamdensitybasedal"]], "Examples using skactiveml.stream.StreamDensityBasedAL": [[59, "examples-using-skactiveml-stream-streamdensitybasedal"]], "skactiveml.stream.StreamProbabilisticAL": [[60, "skactiveml-stream-streamprobabilistical"]], "Examples using skactiveml.stream.StreamProbabilisticAL": [[60, "examples-using-skactiveml-stream-streamprobabilistical"]], "skactiveml.stream.StreamRandomSampling": [[61, "skactiveml-stream-streamrandomsampling"]], "Examples using skactiveml.stream.StreamRandomSampling": [[61, "examples-using-skactiveml-stream-streamrandomsampling"]], "skactiveml.stream.VariableUncertainty": [[62, "skactiveml-stream-variableuncertainty"]], "Examples using skactiveml.stream.VariableUncertainty": [[62, "examples-using-skactiveml-stream-variableuncertainty"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[63, "skactiveml-stream-budgetmanager-balancedincrementalquantilefilter"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[64, "skactiveml-stream-budgetmanager-densitybasedsplitbudgetmanager"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[65, "skactiveml-stream-budgetmanager-estimatedbudgetzliobaite"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[66, "skactiveml-stream-budgetmanager-fixeduncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[67, "skactiveml-stream-budgetmanager-randombudgetmanager"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[68, "skactiveml-stream-budgetmanager-randomvariableuncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[69, "skactiveml-stream-budgetmanager-splitbudgetmanager"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[70, "skactiveml-stream-budgetmanager-variableuncertaintybudgetmanager"]], "skactiveml.utils.ExtLabelEncoder": [[71, "skactiveml-utils-extlabelencoder"]], "skactiveml.utils._check_callable": [[72, "skactiveml-utils-check-callable"]], "skactiveml.utils.call_func": [[73, "skactiveml-utils-call-func"]], "skactiveml.utils.check_X_y": [[74, "skactiveml-utils-check-x-y"]], "skactiveml.utils.check_bound": [[75, "skactiveml-utils-check-bound"]], "skactiveml.utils.check_budget_manager": [[76, "skactiveml-utils-check-budget-manager"]], "skactiveml.utils.check_class_prior": [[77, "skactiveml-utils-check-class-prior"]], "skactiveml.utils.check_classes": [[78, "skactiveml-utils-check-classes"]], "skactiveml.utils.check_classifier_params": [[79, "skactiveml-utils-check-classifier-params"]], "skactiveml.utils.check_cost_matrix": [[80, "skactiveml-utils-check-cost-matrix"]], "skactiveml.utils.check_equal_missing_label": [[81, "skactiveml-utils-check-equal-missing-label"]], "skactiveml.utils.check_indices": [[82, "skactiveml-utils-check-indices"]], "skactiveml.utils.check_missing_label": [[83, "skactiveml-utils-check-missing-label"]], "skactiveml.utils.check_random_state": [[84, "skactiveml-utils-check-random-state"]], "skactiveml.utils.check_scalar": [[85, "skactiveml-utils-check-scalar"]], "skactiveml.utils.check_type": [[86, "skactiveml-utils-check-type"]], "skactiveml.utils.compute_vote_vectors": [[87, "skactiveml-utils-compute-vote-vectors"]], "skactiveml.utils.ext_confusion_matrix": [[88, "skactiveml-utils-ext-confusion-matrix"]], "skactiveml.utils.is_labeled": [[89, "skactiveml-utils-is-labeled"]], "Examples using skactiveml.utils.is_labeled": [[89, "examples-using-skactiveml-utils-is-labeled"]], "skactiveml.utils.is_unlabeled": [[90, "skactiveml-utils-is-unlabeled"]], "skactiveml.utils.labeled_indices": [[91, "skactiveml-utils-labeled-indices"]], "Examples using skactiveml.utils.labeled_indices": [[91, "examples-using-skactiveml-utils-labeled-indices"]], "skactiveml.utils.majority_vote": [[92, "skactiveml-utils-majority-vote"]], "skactiveml.utils.rand_argmax": [[93, "skactiveml-utils-rand-argmax"]], "skactiveml.utils.rand_argmin": [[94, "skactiveml-utils-rand-argmin"]], "skactiveml.utils.simple_batch": [[95, "skactiveml-utils-simple-batch"]], "Examples using skactiveml.utils.simple_batch": [[95, "examples-using-skactiveml-utils-simple-batch"]], "skactiveml.utils.unlabeled_indices": [[96, "skactiveml-utils-unlabeled-indices"]], "Examples using skactiveml.utils.unlabeled_indices": [[96, "examples-using-skactiveml-utils-unlabeled-indices"]], "skactiveml.visualization.mesh": [[97, "skactiveml-visualization-mesh"]], "skactiveml.visualization.plot_annotator_utilities": [[98, "skactiveml-visualization-plot-annotator-utilities"]], "skactiveml.visualization.plot_contour_for_samples": [[99, "skactiveml-visualization-plot-contour-for-samples"]], "Examples using skactiveml.visualization.plot_contour_for_samples": [[99, "examples-using-skactiveml-visualization-plot-contour-for-samples"]], "skactiveml.visualization.plot_decision_boundary": [[100, "skactiveml-visualization-plot-decision-boundary"]], "Examples using skactiveml.visualization.plot_decision_boundary": [[100, "examples-using-skactiveml-visualization-plot-decision-boundary"]], "skactiveml.visualization.plot_stream_decision_boundary": [[101, "skactiveml-visualization-plot-stream-decision-boundary"]], "Examples using skactiveml.visualization.plot_stream_decision_boundary": [[101, "examples-using-skactiveml-visualization-plot-stream-decision-boundary"]], "skactiveml.visualization.plot_stream_training_data": [[102, "skactiveml-visualization-plot-stream-training-data"]], "Examples using skactiveml.visualization.plot_stream_training_data": [[102, "examples-using-skactiveml-visualization-plot-stream-training-data"]], "skactiveml.visualization.plot_utilities": [[103, "skactiveml-visualization-plot-utilities"]], "Examples using skactiveml.visualization.plot_utilities": [[103, "examples-using-skactiveml-visualization-plot-utilities"]], "API Reference": [[104, "api-reference"]], "skactiveml.base:": [[104, "module-skactiveml.base"]], "Classes": [[104, "classes"], [104, "id2"], [104, "id3"], [104, "id4"], [104, "id5"], [104, "id6"], [104, "id7"], [104, "id8"], [104, "id10"], [104, "id12"]], "skactiveml.pool:": [[104, "module-skactiveml.pool"]], "Functions": [[104, "functions"], [104, "id9"], [104, "id11"]], "skactiveml.pool.multiannotator:": [[104, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils:": [[104, "module-skactiveml.pool.utils"]], "skactiveml.stream:": [[104, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager:": [[104, "module-skactiveml.stream.budgetmanager"]], "skactiveml.classifier:": [[104, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator:": [[104, "module-skactiveml.classifier.multiannotator"]], "skactiveml.visualization:": [[104, "module-skactiveml.visualization"]], "skactiveml.utils:": [[104, "module-skactiveml.utils"]], "skactiveml.exceptions:": [[104, "module-skactiveml.exceptions"]], "Batch Bayesian Active Learning by Disagreement (BatchBALD)": [[110, "batch-bayesian-active-learning-by-disagreement-batchbald"]], "Bayesian Active Learning by Disagreement": [[111, "bayesian-active-learning-by-disagreement"], [120, "bayesian-active-learning-by-disagreement"]], "Active Learning with Cost Embedding": [[112, "active-learning-with-cost-embedding"]], "Discriminative Active Learning": [[113, "discriminative-active-learning"]], "Epistemic Uncertainty Sampling": [[114, "epistemic-uncertainty-sampling"]], "Expected Model Change": [[115, "expected-model-change"]], "Expected Model Output Change": [[116, "expected-model-output-change"]], "Expected Model Variance Reduction": [[117, "expected-model-variance-reduction"]], "Batch Density-Diversity-Distribution-Distance Sampling": [[118, "batch-density-diversity-distribution-distance-sampling"]], "Density-Diversity-Distribution-Distance Sampling": [[119, "density-diversity-distribution-distance-sampling"]], "Greedy Sampling on the Target Space (GSy)": [[121, "greedy-sampling-on-the-target-space-gsy"]], "Improved Greedy Sampling (GSi)": [[122, "improved-greedy-sampling-gsi"]], "Greedy Sampling on the Feature Space (GSx)": [[123, "greedy-sampling-on-the-feature-space-gsx"]], "Regression based Kullback Leibler Divergence Maximization": [[124, "regression-based-kullback-leibler-divergence-maximization"]], "Monte-Carlo EER with Log-Loss": [[125, "monte-carlo-eer-with-log-loss"]], "Monte-Carlo EER with Misclassification-Loss": [[126, "monte-carlo-eer-with-misclassification-loss"]], "Multi-class Probabilistic Active Learning": [[127, "multi-class-probabilistic-active-learning"]], "Query-by-Committee with Kullback-Leibler Divergence": [[128, "query-by-committee-with-kullback-leibler-divergence"]], "Query-by-Committee with Vote Entropy": [[129, "query-by-committee-with-vote-entropy"]], "Querying Informative and Representative Examples": [[130, "querying-informative-and-representative-examples"]], "Random Sampling": [[131, "random-sampling"]], "Density-weighted Uncertainty Sampling": [[132, "density-weighted-uncertainty-sampling"]], "Dual strategy for Active Learning": [[133, "dual-strategy-for-active-learning"]], "Expected Average Precision": [[134, "expected-average-precision"]], "Uncertainty Sampling with Entropy": [[135, "uncertainty-sampling-with-entropy"]], "Uncertainty Sampling with Least-Confidence": [[136, "uncertainty-sampling-with-least-confidence"]], "Uncertainty Sampling with Margin": [[137, "uncertainty-sampling-with-margin"]], "Value of Information": [[138, "value-of-information"]], "Value of Information on Labeled Samples": [[139, "value-of-information-on-labeled-samples"]], "Value of Information on Unlabeled Samples": [[140, "value-of-information-on-unlabeled-samples"]], "Computation times": [[141, "computation-times"], [142, "computation-times"], [156, "computation-times"], [168, "computation-times"]], "Cognitive Dual-Query Strategy with Fixed-Uncertainty": [[144, "cognitive-dual-query-strategy-with-fixed-uncertainty"]], "Cognitive Dual-Query Strategy with Random Sampling": [[145, "cognitive-dual-query-strategy-with-random-sampling"]], "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty": [[146, "cognitive-dual-query-strategy-with-randomized-variable-uncertainty"]], "Cognitive Dual-Query Strategy with Variable-Uncertainty": [[147, "cognitive-dual-query-strategy-with-variable-uncertainty"]], "Fixed-Uncertainty": [[148, "fixed-uncertainty"]], "Periodic Sampling": [[149, "periodic-sampling"]], "Randomized-Variable-Uncertainty": [[150, "randomized-variable-uncertainty"]], "Split": [[151, "split"]], "Density Based Active Learning for Data Streams": [[152, "density-based-active-learning-for-data-streams"]], "Probabilistic Active Learning in Datastreams": [[153, "probabilistic-active-learning-in-datastreams"]], "Stream Random Sampling": [[154, "stream-random-sampling"]], "Variable-Uncertainty": [[155, "variable-uncertainty"]], "Strategy Overview": [[157, "strategy-overview"]], "References": [[157, "references"]], "Pool-based Active Learning - Getting Started": [[158, "Pool-based-Active-Learning---Getting-Started"]], "Data Set Generation": [[158, "Data-Set-Generation"], [160, "Data-Set-Generation"], [162, "Data-Set-Generation"], [163, "Data-Set-Generation"]], "Classification": [[158, "Classification"]], "Query Strategy": [[158, "Query-Strategy"]], "Active Learning Cycle": [[158, "Active-Learning-Cycle"]], "Deep Pool-based Active Learning: Scikit-activeml with Skorch": [[159, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"]], "Loading Digit Data Set": [[159, "Loading-Digit-Data-Set"]], "Data Augmentation": [[159, "Data-Augmentation"]], "Convolutional Neural Network Ensemble": [[159, "Convolutional-Neural-Network-Ensemble"]], "Active Classification": [[159, "Active-Classification"], [163, "Active-Classification"]], "Visualize Results": [[159, "Visualize-Results"]], "Pool-based Active Learning for Regression - Getting Started": [[160, "Pool-based-Active-Learning-for-Regression---Getting-Started"]], "Active Regression": [[160, "Active-Regression"]], "Sample Annotating": [[161, "Sample-Annotating"]], "Installation and Configuration": [[161, "Installation-and-Configuration"]], "The Annotation Widget Class": [[161, "The-Annotation-Widget-Class"]], "Create Dataset": [[161, "Create-Dataset"]], "Create and Start Annotation Process": [[161, "Create-and-Start-Annotation-Process"]], "Pool-based Active Learning - Simple Evaluation Study": [[162, "Pool-based-Active-Learning---Simple-Evaluation-Study"]], "Random Seed Management": [[162, "Random-Seed-Management"]], "Classification Models and Query Strategies": [[162, "Classification-Models-and-Query-Strategies"]], "Experiment Parameters": [[162, "Experiment-Parameters"]], "Experiment Loop": [[162, "Experiment-Loop"]], "Result Plotting": [[162, "Result-Plotting"]], "Multi-annotator Pool-based Active Learning - Getting Started": [[163, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"]], "Stream-based Active Learning - Getting Started": [[164, "Stream-based-Active-Learning---Getting-Started"]], "Initialize Stream Parameters": [[164, "Initialize-Stream-Parameters"], [166, "Initialize-Stream-Parameters"]], "Random Seed Generation": [[164, "Random-Seed-Generation"], [165, "Random-Seed-Generation"], [166, "Random-Seed-Generation"]], "Generate And Initialize Data Set": [[164, "Generate-And-Initialize-Data-Set"], [165, "Generate-And-Initialize-Data-Set"]], "Initialize Query Strategies": [[164, "Initialize-Query-Strategies"], [165, "Initialize-Query-Strategies"], [166, "Initialize-Query-Strategies"]], "Start Active Learning Cycle": [[164, "Start-Active-Learning-Cycle"], [165, "Start-Active-Learning-Cycle"], [166, "Start-Active-Learning-Cycle"]], "Batch Stream Active Learning With Pool Query Strategies": [[165, "Batch-Stream-Active-Learning-With-Pool-Query-Strategies"]], "Initialize Batch Stream Parameters": [[165, "Initialize-Batch-Stream-Parameters"]], "Stream-based Active Learning With River": [[166, "Stream-based-Active-Learning-With-River"]], "Generate and Initialize Data Set": [[166, "Generate-and-Initialize-Data-Set"]], "Welcome to scikit-activeml\u2019s documentation!": [[167, "welcome-to-scikit-activeml-s-documentation"]], "User Installation": [[167, "user-installation"]], "Pool-based Active Learning": [[167, "pool-based-active-learning"]], "Stream-based Active Learning": [[167, "stream-based-active-learning"]], "Query Strategy Overview": [[167, "query-strategy-overview"]], "Citing": [[167, "citing"]], "Indices and tables": [[167, "indices-and-tables"]], "skactiveml.utils.MISSING_LABEL": [[169, "skactiveml-utils-missing-label"]], "Examples using skactiveml.utils.MISSING_LABEL": [[169, "examples-using-skactiveml-utils-missing-label"]], "Tutorials": [[170, "tutorials"]]}, "indexentries": {"annotatormodelmixin (class in skactiveml.base)": [[4, "skactiveml.base.AnnotatorModelMixin"]], "predict_annotator_perf() (skactiveml.base.annotatormodelmixin method)": [[4, "skactiveml.base.AnnotatorModelMixin.predict_annotator_perf"]], "budgetmanager (class in skactiveml.base)": [[5, "skactiveml.base.BudgetManager"]], "get_metadata_routing() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_metadata_routing"]], "get_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_params"]], "query_by_utility() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.query_by_utility"]], "set_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.set_params"]], "update() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.update"]], "classfrequencyestimator (class in skactiveml.base)": [[6, "skactiveml.base.ClassFrequencyEstimator"]], "fit() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.fit"]], "get_metadata_routing() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_metadata_routing"]], "get_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_params"]], "predict() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict"]], "predict_freq() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_freq"]], "predict_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_proba"]], "score() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.score"]], "set_fit_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_fit_request"]], "set_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_params"]], "set_score_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_score_request"]], "multiannotatorpoolquerystrategy (class in skactiveml.base)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.set_params"]], "probabilisticregressor (class in skactiveml.base)": [[8, "skactiveml.base.ProbabilisticRegressor"]], "fit() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.fit"]], "get_metadata_routing() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_params"]], "predict() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict"]], "predict_target_distribution() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict_target_distribution"]], "sample_y() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.sample_y"]], "score() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.score"]], "set_fit_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_fit_request"]], "set_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_params"]], "set_predict_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_predict_request"]], "set_score_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_score_request"]], "querystrategy (class in skactiveml.base)": [[9, "skactiveml.base.QueryStrategy"]], "get_metadata_routing() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_params"]], "query() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.query"]], "set_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.set_params"]], "singleannotatorpoolquerystrategy (class in skactiveml.base)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.set_params"]], "singleannotatorstreamquerystrategy (class in skactiveml.base)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.set_params"]], "update() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.update"]], "skactivemlclassifier (class in skactiveml.base)": [[12, "skactiveml.base.SkactivemlClassifier"]], "fit() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_params"]], "predict() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict"]], "predict_proba() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict_proba"]], "score() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.score"]], "set_fit_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_fit_request"]], "set_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_params"]], "set_score_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_score_request"]], "skactivemlregressor (class in skactiveml.base)": [[13, "skactiveml.base.SkactivemlRegressor"]], "fit() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_params"]], "predict() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.predict"]], "score() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.score"]], "set_fit_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_fit_request"]], "set_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_params"]], "set_score_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_score_request"]], "mixturemodelclassifier (class in skactiveml.classifier)": [[14, "skactiveml.classifier.MixtureModelClassifier"]], "fit() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_params"]], "predict() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict"]], "predict_freq() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_proba"]], "score() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.score"]], "set_fit_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_params"]], "set_score_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_score_request"]], "metrics (skactiveml.classifier.parzenwindowclassifier attribute)": [[15, "skactiveml.classifier.ParzenWindowClassifier.METRICS"]], "parzenwindowclassifier (class in skactiveml.classifier)": [[15, "skactiveml.classifier.ParzenWindowClassifier"]], "fit() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_params"]], "predict() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_params"]], "set_score_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_score_request"]], "sklearnclassifier (class in skactiveml.classifier)": [[16, "skactiveml.classifier.SklearnClassifier"]], "fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_params"]], "partial_fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.partial_fit"]], "predict() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict"]], "predict_proba() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict_proba"]], "score() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.score"]], "set_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_score_request"]], "slidingwindowclassifier (class in skactiveml.classifier)": [[17, "skactiveml.classifier.SlidingWindowClassifier"]], "fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_params"]], "partial_fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.partial_fit"]], "predict() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_score_request"]], "annotatorensembleclassifier (class in skactiveml.classifier.multiannotator)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier"]], "fit() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_params"]], "named_estimators (skactiveml.classifier.multiannotator.annotatorensembleclassifier property)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.named_estimators"]], "predict() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_score_request"]], "steps (skactiveml.classifier.multiannotator.annotatorensembleclassifier attribute)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.steps"]], "annotatorlogisticregression (class in skactiveml.classifier.multiannotator)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression"]], "fit() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_params"]], "predict() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict"]], "predict_annotator_perf() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_annotator_perf"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_score_request"]], "mappingerror (class in skactiveml.exceptions)": [[20, "skactiveml.exceptions.MappingError"]], "args (skactiveml.exceptions.mappingerror attribute)": [[20, "skactiveml.exceptions.MappingError.args"]], "with_traceback() (skactiveml.exceptions.mappingerror method)": [[20, "skactiveml.exceptions.MappingError.with_traceback"]], "batchbald (class in skactiveml.pool)": [[21, "skactiveml.pool.BatchBALD"]], "get_metadata_routing() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.get_params"]], "query() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.query"]], "set_params() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.set_params"]], "costembeddingal (class in skactiveml.pool)": [[22, "skactiveml.pool.CostEmbeddingAL"]], "get_metadata_routing() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.get_metadata_routing"]], "get_params() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.get_params"]], "query() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.query"]], "set_params() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.set_params"]], "discriminativeal (class in skactiveml.pool)": [[23, "skactiveml.pool.DiscriminativeAL"]], "get_metadata_routing() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.get_metadata_routing"]], "get_params() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.get_params"]], "query() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.query"]], "set_params() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.set_params"]], "epistemicuncertaintysampling (class in skactiveml.pool)": [[24, "skactiveml.pool.EpistemicUncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.get_params"]], "query() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.query"]], "set_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.set_params"]], "expectedmodelchangemaximization (class in skactiveml.pool)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization"]], "get_metadata_routing() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.get_params"]], "query() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.query"]], "set_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.set_params"]], "expectedmodeloutputchange (class in skactiveml.pool)": [[26, "skactiveml.pool.ExpectedModelOutputChange"]], "get_metadata_routing() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.get_params"]], "query() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.query"]], "set_params() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.set_params"]], "expectedmodelvariancereduction (class in skactiveml.pool)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction"]], "get_metadata_routing() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.get_params"]], "query() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.query"]], "set_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.set_params"]], "fourds (class in skactiveml.pool)": [[28, "skactiveml.pool.FourDs"]], "get_metadata_routing() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.get_metadata_routing"]], "get_params() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.get_params"]], "query() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.query"]], "set_params() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.set_params"]], "greedybald (class in skactiveml.pool)": [[29, "skactiveml.pool.GreedyBALD"]], "get_metadata_routing() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.get_params"]], "query() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.query"]], "set_params() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.set_params"]], "greedysamplingtarget (class in skactiveml.pool)": [[30, "skactiveml.pool.GreedySamplingTarget"]], "get_metadata_routing() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.get_params"]], "query() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.query"]], "set_params() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.set_params"]], "greedysamplingx (class in skactiveml.pool)": [[31, "skactiveml.pool.GreedySamplingX"]], "get_metadata_routing() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.get_params"]], "query() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.query"]], "set_params() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.set_params"]], "kldivergencemaximization (class in skactiveml.pool)": [[32, "skactiveml.pool.KLDivergenceMaximization"]], "get_metadata_routing() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.get_params"]], "query() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.query"]], "set_params() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.set_params"]], "montecarloeer (class in skactiveml.pool)": [[33, "skactiveml.pool.MonteCarloEER"]], "get_metadata_routing() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.get_metadata_routing"]], "get_params() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.get_params"]], "query() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.query"]], "set_params() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.set_params"]], "probabilistical (class in skactiveml.pool)": [[34, "skactiveml.pool.ProbabilisticAL"]], "get_metadata_routing() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.get_params"]], "query() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.query"]], "set_params() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.set_params"]], "querybycommittee (class in skactiveml.pool)": [[35, "skactiveml.pool.QueryByCommittee"]], "get_metadata_routing() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.get_metadata_routing"]], "get_params() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.get_params"]], "query() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.query"]], "set_params() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.set_params"]], "metrics (skactiveml.pool.quire attribute)": [[36, "skactiveml.pool.Quire.METRICS"]], "quire (class in skactiveml.pool)": [[36, "skactiveml.pool.Quire"]], "get_metadata_routing() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.get_metadata_routing"]], "get_params() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.get_params"]], "query() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.query"]], "set_params() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.set_params"]], "randomsampling (class in skactiveml.pool)": [[37, "skactiveml.pool.RandomSampling"]], "get_metadata_routing() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.get_metadata_routing"]], "get_params() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.get_params"]], "query() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.query"]], "set_params() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.set_params"]], "uncertaintysampling (class in skactiveml.pool)": [[38, "skactiveml.pool.UncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.get_params"]], "query() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.query"]], "set_params() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.set_params"]], "valueofinformationeer (class in skactiveml.pool)": [[39, "skactiveml.pool.ValueOfInformationEER"]], "get_metadata_routing() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.get_metadata_routing"]], "get_params() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.get_params"]], "query() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.query"]], "set_params() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.set_params"]], "average_kl_divergence() (in module skactiveml.pool)": [[40, "skactiveml.pool.average_kl_divergence"]], "batch_bald() (in module skactiveml.pool)": [[41, "skactiveml.pool.batch_bald"]], "cost_reduction() (in module skactiveml.pool)": [[42, "skactiveml.pool.cost_reduction"]], "expected_average_precision() (in module skactiveml.pool)": [[43, "skactiveml.pool.expected_average_precision"]], "intervalestimationannotmodel (class in skactiveml.pool.multiannotator)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel"]], "fit() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.fit"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_params"]], "predict_annotator_perf() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.predict_annotator_perf"]], "set_fit_request() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_fit_request"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_params"]], "intervalestimationthreshold (class in skactiveml.pool.multiannotator)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_params"]], "query() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.query"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.set_params"]], "singleannotatorwrapper (class in skactiveml.pool.multiannotator)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper"]], "get_metadata_routing() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_params"]], "query() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.query"]], "set_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.set_params"]], "uncertainty_scores() (in module skactiveml.pool)": [[47, "skactiveml.pool.uncertainty_scores"]], "indexclassifierwrapper (class in skactiveml.pool.utils)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper"]], "fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.fit"]], "is_fitted() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.is_fitted"]], "partial_fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.partial_fit"]], "precompute() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.precompute"]], "predict() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict"]], "predict_freq() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict_freq"]], "predict_proba() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict_proba"]], "vote_entropy() (in module skactiveml.pool)": [[49, "skactiveml.pool.vote_entropy"]], "cognitivedualquerystrategy (class in skactiveml.stream)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.update"]], "cognitivedualquerystrategyfixun (class in skactiveml.stream)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.update"]], "cognitivedualquerystrategyran (class in skactiveml.stream)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.update"]], "cognitivedualquerystrategyranvarun (class in skactiveml.stream)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.update"]], "cognitivedualquerystrategyvarun (class in skactiveml.stream)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.update"]], "fixeduncertainty (class in skactiveml.stream)": [[55, "skactiveml.stream.FixedUncertainty"]], "get_metadata_routing() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.get_params"]], "query() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.query"]], "set_params() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.set_params"]], "update() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.update"]], "periodicsampling (class in skactiveml.stream)": [[56, "skactiveml.stream.PeriodicSampling"]], "get_metadata_routing() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.get_params"]], "query() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.query"]], "set_params() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.set_params"]], "update() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.update"]], "randomvariableuncertainty (class in skactiveml.stream)": [[57, "skactiveml.stream.RandomVariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.get_params"]], "query() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.query"]], "set_params() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.set_params"]], "update() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.update"]], "split (class in skactiveml.stream)": [[58, "skactiveml.stream.Split"]], "get_metadata_routing() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.get_metadata_routing"]], "get_params() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.get_params"]], "query() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.query"]], "set_params() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.set_params"]], "update() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.update"]], "streamdensitybasedal (class in skactiveml.stream)": [[59, "skactiveml.stream.StreamDensityBasedAL"]], "get_metadata_routing() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.get_params"]], "query() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.query"]], "set_params() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.set_params"]], "update() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.update"]], "streamprobabilistical (class in skactiveml.stream)": [[60, "skactiveml.stream.StreamProbabilisticAL"]], "get_metadata_routing() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.get_params"]], "query() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.query"]], "set_params() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.set_params"]], "update() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.update"]], "streamrandomsampling (class in skactiveml.stream)": [[61, "skactiveml.stream.StreamRandomSampling"]], "get_metadata_routing() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.get_params"]], "query() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.query"]], "set_params() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.set_params"]], "update() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.update"]], "variableuncertainty (class in skactiveml.stream)": [[62, "skactiveml.stream.VariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.get_params"]], "query() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.query"]], "set_params() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.set_params"]], "update() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.update"]], "balancedincrementalquantilefilter (class in skactiveml.stream.budgetmanager)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.set_params"]], "update() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.update"]], "densitybasedsplitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.update"]], "estimatedbudgetzliobaite (class in skactiveml.stream.budgetmanager)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.set_params"]], "update() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.update"]], "fixeduncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.update"]], "randombudgetmanager (class in skactiveml.stream.budgetmanager)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.update"]], "randomvariableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.update"]], "splitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.update"]], "variableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.update"]], "extlabelencoder (class in skactiveml.utils)": [[71, "skactiveml.utils.ExtLabelEncoder"]], "fit() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.fit"]], "fit_transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.fit_transform"]], "get_metadata_routing() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.get_metadata_routing"]], "get_params() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.get_params"]], "inverse_transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.inverse_transform"]], "set_params() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.set_params"]], "transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.transform"]], "_check_callable() (in module skactiveml.utils)": [[72, "skactiveml.utils._check_callable"]], "call_func() (in module skactiveml.utils)": [[73, "skactiveml.utils.call_func"]], "check_x_y() (in module skactiveml.utils)": [[74, "skactiveml.utils.check_X_y"]], "check_bound() (in module skactiveml.utils)": [[75, "skactiveml.utils.check_bound"]], "check_budget_manager() (in module skactiveml.utils)": [[76, "skactiveml.utils.check_budget_manager"]], "check_class_prior() (in module skactiveml.utils)": [[77, "skactiveml.utils.check_class_prior"]], "check_classes() (in module skactiveml.utils)": [[78, "skactiveml.utils.check_classes"]], "check_classifier_params() (in module skactiveml.utils)": [[79, "skactiveml.utils.check_classifier_params"]], "check_cost_matrix() (in module skactiveml.utils)": [[80, "skactiveml.utils.check_cost_matrix"]], "check_equal_missing_label() (in module skactiveml.utils)": [[81, "skactiveml.utils.check_equal_missing_label"]], "check_indices() (in module skactiveml.utils)": [[82, "skactiveml.utils.check_indices"]], "check_missing_label() (in module skactiveml.utils)": [[83, "skactiveml.utils.check_missing_label"]], "check_random_state() (in module skactiveml.utils)": [[84, "skactiveml.utils.check_random_state"]], "check_scalar() (in module skactiveml.utils)": [[85, "skactiveml.utils.check_scalar"]], "check_type() (in module skactiveml.utils)": [[86, "skactiveml.utils.check_type"]], "compute_vote_vectors() (in module skactiveml.utils)": [[87, "skactiveml.utils.compute_vote_vectors"]], "ext_confusion_matrix() (in module skactiveml.utils)": [[88, "skactiveml.utils.ext_confusion_matrix"]], "is_labeled() (in module skactiveml.utils)": [[89, "skactiveml.utils.is_labeled"]], "is_unlabeled() (in module skactiveml.utils)": [[90, "skactiveml.utils.is_unlabeled"]], "labeled_indices() (in module skactiveml.utils)": [[91, "skactiveml.utils.labeled_indices"]], "majority_vote() (in module skactiveml.utils)": [[92, "skactiveml.utils.majority_vote"]], "rand_argmax() (in module skactiveml.utils)": [[93, "skactiveml.utils.rand_argmax"]], "rand_argmin() (in module skactiveml.utils)": [[94, "skactiveml.utils.rand_argmin"]], "simple_batch() (in module skactiveml.utils)": [[95, "skactiveml.utils.simple_batch"]], "unlabeled_indices() (in module skactiveml.utils)": [[96, "skactiveml.utils.unlabeled_indices"]], "mesh() (in module skactiveml.visualization)": [[97, "skactiveml.visualization.mesh"]], "plot_annotator_utilities() (in module skactiveml.visualization)": [[98, "skactiveml.visualization.plot_annotator_utilities"]], "plot_contour_for_samples() (in module skactiveml.visualization)": [[99, "skactiveml.visualization.plot_contour_for_samples"]], "plot_decision_boundary() (in module skactiveml.visualization)": [[100, "skactiveml.visualization.plot_decision_boundary"]], "plot_stream_decision_boundary() (in module skactiveml.visualization)": [[101, "skactiveml.visualization.plot_stream_decision_boundary"]], "plot_stream_training_data() (in module skactiveml.visualization)": [[102, "skactiveml.visualization.plot_stream_training_data"]], "plot_utilities() (in module skactiveml.visualization)": [[103, "skactiveml.visualization.plot_utilities"]], "module": [[104, "module-skactiveml"], [104, "module-skactiveml.base"], [104, "module-skactiveml.classifier"], [104, "module-skactiveml.classifier.multiannotator"], [104, "module-skactiveml.exceptions"], [104, "module-skactiveml.pool"], [104, "module-skactiveml.pool.multiannotator"], [104, "module-skactiveml.pool.utils"], [104, "module-skactiveml.stream"], [104, "module-skactiveml.stream.budgetmanager"], [104, "module-skactiveml.utils"], [104, "module-skactiveml.visualization"]], "skactiveml": [[104, "module-skactiveml"]], "skactiveml.base": [[104, "module-skactiveml.base"]], "skactiveml.classifier": [[104, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator": [[104, "module-skactiveml.classifier.multiannotator"]], "skactiveml.exceptions": [[104, "module-skactiveml.exceptions"]], "skactiveml.pool": [[104, "module-skactiveml.pool"]], "skactiveml.pool.multiannotator": [[104, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils": [[104, "module-skactiveml.pool.utils"]], "skactiveml.stream": [[104, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager": [[104, "module-skactiveml.stream.budgetmanager"]], "skactiveml.utils": [[104, "module-skactiveml.utils"]], "skactiveml.visualization": [[104, "module-skactiveml.visualization"]]}})