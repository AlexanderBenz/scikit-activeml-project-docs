Search.setIndex({"docnames": ["developers_guide", "examples/README", "examples/pool/README", "examples/stream/README", "generated/api/skactiveml.base.AnnotatorModelMixin", "generated/api/skactiveml.base.BudgetManager", "generated/api/skactiveml.base.ClassFrequencyEstimator", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.ProbabilisticRegressor", "generated/api/skactiveml.base.QueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy", "generated/api/skactiveml.base.SkactivemlClassifier", "generated/api/skactiveml.base.SkactivemlRegressor", "generated/api/skactiveml.classifier.MixtureModelClassifier", "generated/api/skactiveml.classifier.ParzenWindowClassifier", "generated/api/skactiveml.classifier.SklearnClassifier", "generated/api/skactiveml.classifier.SlidingWindowClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "generated/api/skactiveml.exceptions.MappingError", "generated/api/skactiveml.pool.BatchBALD", "generated/api/skactiveml.pool.CostEmbeddingAL", "generated/api/skactiveml.pool.DiscriminativeAL", "generated/api/skactiveml.pool.EpistemicUncertaintySampling", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization", "generated/api/skactiveml.pool.ExpectedModelOutputChange", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction", "generated/api/skactiveml.pool.FourDs", "generated/api/skactiveml.pool.GreedyBALD", "generated/api/skactiveml.pool.GreedySamplingTarget", "generated/api/skactiveml.pool.GreedySamplingX", "generated/api/skactiveml.pool.KLDivergenceMaximization", "generated/api/skactiveml.pool.MonteCarloEER", "generated/api/skactiveml.pool.ProbabilisticAL", "generated/api/skactiveml.pool.QueryByCommittee", "generated/api/skactiveml.pool.Quire", "generated/api/skactiveml.pool.RandomSampling", "generated/api/skactiveml.pool.UncertaintySampling", "generated/api/skactiveml.pool.ValueOfInformationEER", "generated/api/skactiveml.pool.average_kl_divergence", "generated/api/skactiveml.pool.batch_bald", "generated/api/skactiveml.pool.cost_reduction", "generated/api/skactiveml.pool.expected_average_precision", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "generated/api/skactiveml.pool.uncertainty_scores", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper", "generated/api/skactiveml.pool.vote_entropy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn", "generated/api/skactiveml.stream.FixedUncertainty", "generated/api/skactiveml.stream.PeriodicSampling", "generated/api/skactiveml.stream.RandomVariableUncertainty", "generated/api/skactiveml.stream.Split", "generated/api/skactiveml.stream.StreamDensityBasedAL", "generated/api/skactiveml.stream.StreamProbabilisticAL", "generated/api/skactiveml.stream.StreamRandomSampling", "generated/api/skactiveml.stream.VariableUncertainty", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "generated/api/skactiveml.utils.ExtLabelEncoder", "generated/api/skactiveml.utils._check_callable", "generated/api/skactiveml.utils.call_func", "generated/api/skactiveml.utils.check_X_y", "generated/api/skactiveml.utils.check_bound", "generated/api/skactiveml.utils.check_budget_manager", "generated/api/skactiveml.utils.check_class_prior", "generated/api/skactiveml.utils.check_classes", "generated/api/skactiveml.utils.check_classifier_params", "generated/api/skactiveml.utils.check_cost_matrix", "generated/api/skactiveml.utils.check_equal_missing_label", "generated/api/skactiveml.utils.check_indices", "generated/api/skactiveml.utils.check_missing_label", "generated/api/skactiveml.utils.check_random_state", "generated/api/skactiveml.utils.check_scalar", "generated/api/skactiveml.utils.check_type", "generated/api/skactiveml.utils.compute_vote_vectors", "generated/api/skactiveml.utils.ext_confusion_matrix", "generated/api/skactiveml.utils.is_labeled", "generated/api/skactiveml.utils.is_unlabeled", "generated/api/skactiveml.utils.labeled_indices", "generated/api/skactiveml.utils.majority_vote", "generated/api/skactiveml.utils.rand_argmax", "generated/api/skactiveml.utils.rand_argmin", "generated/api/skactiveml.utils.simple_batch", "generated/api/skactiveml.utils.unlabeled_indices", "generated/api/skactiveml.visualization.mesh", "generated/api/skactiveml.visualization.plot_annotator_utilities", "generated/api/skactiveml.visualization.plot_contour_for_samples", "generated/api/skactiveml.visualization.plot_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_training_data", "generated/api/skactiveml.visualization.plot_utilities", "generated/api_reference", "generated/examples/README", "generated/examples/pool/README", "generated/examples/stream/README", "generated/sphinx_gallery_examples/index", "generated/sphinx_gallery_examples/pool/index", "generated/sphinx_gallery_examples/pool/sg_execution_times", "generated/sphinx_gallery_examples/sg_execution_times", "generated/sphinx_gallery_examples/stream/index", "generated/sphinx_gallery_examples/stream/sg_execution_times", "generated/strategy_overview", "generated/tutorials/00_pool_getting_started", "generated/tutorials/01_deep_pool_al_with_skorch", "generated/tutorials/02_pool_regression_getting_started", "generated/tutorials/03_pool_oracle_annotations", "generated/tutorials/04_pool_simple_evaluation_study", "generated/tutorials/10_multiple_annotators_getting_started", "generated/tutorials/20_stream_getting_started", "generated/tutorials/21_stream_batch_with_pool_al", "generated/tutorials/22_river_classifier", "index", "sg_execution_times", "skactiveml.utils.MISSING_LABEL", "tutorials"], "filenames": ["developers_guide.rst", "examples/README.rst", "examples/pool/README.rst", "examples/stream/README.rst", "generated/api/skactiveml.base.AnnotatorModelMixin.rst", "generated/api/skactiveml.base.BudgetManager.rst", "generated/api/skactiveml.base.ClassFrequencyEstimator.rst", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.ProbabilisticRegressor.rst", "generated/api/skactiveml.base.QueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy.rst", "generated/api/skactiveml.base.SkactivemlClassifier.rst", "generated/api/skactiveml.base.SkactivemlRegressor.rst", "generated/api/skactiveml.classifier.MixtureModelClassifier.rst", "generated/api/skactiveml.classifier.ParzenWindowClassifier.rst", "generated/api/skactiveml.classifier.SklearnClassifier.rst", "generated/api/skactiveml.classifier.SlidingWindowClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.rst", "generated/api/skactiveml.exceptions.MappingError.rst", "generated/api/skactiveml.pool.BatchBALD.rst", "generated/api/skactiveml.pool.CostEmbeddingAL.rst", "generated/api/skactiveml.pool.DiscriminativeAL.rst", "generated/api/skactiveml.pool.EpistemicUncertaintySampling.rst", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization.rst", "generated/api/skactiveml.pool.ExpectedModelOutputChange.rst", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction.rst", "generated/api/skactiveml.pool.FourDs.rst", "generated/api/skactiveml.pool.GreedyBALD.rst", "generated/api/skactiveml.pool.GreedySamplingTarget.rst", "generated/api/skactiveml.pool.GreedySamplingX.rst", "generated/api/skactiveml.pool.KLDivergenceMaximization.rst", "generated/api/skactiveml.pool.MonteCarloEER.rst", "generated/api/skactiveml.pool.ProbabilisticAL.rst", "generated/api/skactiveml.pool.QueryByCommittee.rst", "generated/api/skactiveml.pool.Quire.rst", "generated/api/skactiveml.pool.RandomSampling.rst", "generated/api/skactiveml.pool.UncertaintySampling.rst", "generated/api/skactiveml.pool.ValueOfInformationEER.rst", "generated/api/skactiveml.pool.average_kl_divergence.rst", "generated/api/skactiveml.pool.batch_bald.rst", "generated/api/skactiveml.pool.cost_reduction.rst", "generated/api/skactiveml.pool.expected_average_precision.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold.rst", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper.rst", "generated/api/skactiveml.pool.uncertainty_scores.rst", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper.rst", "generated/api/skactiveml.pool.vote_entropy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn.rst", "generated/api/skactiveml.stream.FixedUncertainty.rst", "generated/api/skactiveml.stream.PeriodicSampling.rst", "generated/api/skactiveml.stream.RandomVariableUncertainty.rst", "generated/api/skactiveml.stream.Split.rst", "generated/api/skactiveml.stream.StreamDensityBasedAL.rst", "generated/api/skactiveml.stream.StreamProbabilisticAL.rst", "generated/api/skactiveml.stream.StreamRandomSampling.rst", "generated/api/skactiveml.stream.VariableUncertainty.rst", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.rst", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.rst", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.utils.ExtLabelEncoder.rst", "generated/api/skactiveml.utils._check_callable.rst", "generated/api/skactiveml.utils.call_func.rst", "generated/api/skactiveml.utils.check_X_y.rst", "generated/api/skactiveml.utils.check_bound.rst", "generated/api/skactiveml.utils.check_budget_manager.rst", "generated/api/skactiveml.utils.check_class_prior.rst", "generated/api/skactiveml.utils.check_classes.rst", "generated/api/skactiveml.utils.check_classifier_params.rst", "generated/api/skactiveml.utils.check_cost_matrix.rst", "generated/api/skactiveml.utils.check_equal_missing_label.rst", "generated/api/skactiveml.utils.check_indices.rst", "generated/api/skactiveml.utils.check_missing_label.rst", "generated/api/skactiveml.utils.check_random_state.rst", "generated/api/skactiveml.utils.check_scalar.rst", "generated/api/skactiveml.utils.check_type.rst", "generated/api/skactiveml.utils.compute_vote_vectors.rst", "generated/api/skactiveml.utils.ext_confusion_matrix.rst", "generated/api/skactiveml.utils.is_labeled.rst", "generated/api/skactiveml.utils.is_unlabeled.rst", "generated/api/skactiveml.utils.labeled_indices.rst", "generated/api/skactiveml.utils.majority_vote.rst", "generated/api/skactiveml.utils.rand_argmax.rst", "generated/api/skactiveml.utils.rand_argmin.rst", "generated/api/skactiveml.utils.simple_batch.rst", "generated/api/skactiveml.utils.unlabeled_indices.rst", "generated/api/skactiveml.visualization.mesh.rst", "generated/api/skactiveml.visualization.plot_annotator_utilities.rst", "generated/api/skactiveml.visualization.plot_contour_for_samples.rst", "generated/api/skactiveml.visualization.plot_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_training_data.rst", "generated/api/skactiveml.visualization.plot_utilities.rst", "generated/api_reference.rst", "generated/examples/README.rst", "generated/examples/pool/README.rst", "generated/examples/stream/README.rst", "generated/sphinx_gallery_examples/index.rst", "generated/sphinx_gallery_examples/pool/index.rst", "generated/sphinx_gallery_examples/pool/sg_execution_times.rst", "generated/sphinx_gallery_examples/sg_execution_times.rst", "generated/sphinx_gallery_examples/stream/index.rst", "generated/sphinx_gallery_examples/stream/sg_execution_times.rst", "generated/strategy_overview.rst", "generated/tutorials/00_pool_getting_started.ipynb", "generated/tutorials/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials/02_pool_regression_getting_started.ipynb", "generated/tutorials/03_pool_oracle_annotations.ipynb", "generated/tutorials/04_pool_simple_evaluation_study.ipynb", "generated/tutorials/10_multiple_annotators_getting_started.ipynb", "generated/tutorials/20_stream_getting_started.ipynb", "generated/tutorials/21_stream_batch_with_pool_al.ipynb", "generated/tutorials/22_river_classifier.ipynb", "index.rst", "sg_execution_times.rst", "skactiveml.utils.MISSING_LABEL.rst", "tutorials.rst"], "titles": ["Developer Guide", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "skactiveml.base.AnnotatorModelMixin", "skactiveml.base.BudgetManager", "skactiveml.base.ClassFrequencyEstimator", "skactiveml.base.MultiAnnotatorPoolQueryStrategy", "skactiveml.base.ProbabilisticRegressor", "skactiveml.base.QueryStrategy", "skactiveml.base.SingleAnnotatorPoolQueryStrategy", "skactiveml.base.SingleAnnotatorStreamQueryStrategy", "skactiveml.base.SkactivemlClassifier", "skactiveml.base.SkactivemlRegressor", "skactiveml.classifier.MixtureModelClassifier", "skactiveml.classifier.ParzenWindowClassifier", "skactiveml.classifier.SklearnClassifier", "skactiveml.classifier.SlidingWindowClassifier", "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "skactiveml.exceptions.MappingError", "skactiveml.pool.BatchBALD", "skactiveml.pool.CostEmbeddingAL", "skactiveml.pool.DiscriminativeAL", "skactiveml.pool.EpistemicUncertaintySampling", "skactiveml.pool.ExpectedModelChangeMaximization", "skactiveml.pool.ExpectedModelOutputChange", "skactiveml.pool.ExpectedModelVarianceReduction", "skactiveml.pool.FourDs", "skactiveml.pool.GreedyBALD", "skactiveml.pool.GreedySamplingTarget", "skactiveml.pool.GreedySamplingX", "skactiveml.pool.KLDivergenceMaximization", "skactiveml.pool.MonteCarloEER", "skactiveml.pool.ProbabilisticAL", "skactiveml.pool.QueryByCommittee", "skactiveml.pool.Quire", "skactiveml.pool.RandomSampling", "skactiveml.pool.UncertaintySampling", "skactiveml.pool.ValueOfInformationEER", "skactiveml.pool.average_kl_divergence", "skactiveml.pool.batch_bald", "skactiveml.pool.cost_reduction", "skactiveml.pool.expected_average_precision", "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "skactiveml.pool.multiannotator.IntervalEstimationThreshold", "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "skactiveml.pool.uncertainty_scores", "skactiveml.pool.utils.IndexClassifierWrapper", "skactiveml.pool.vote_entropy", "skactiveml.stream.CognitiveDualQueryStrategy", "skactiveml.stream.CognitiveDualQueryStrategyFixUn", "skactiveml.stream.CognitiveDualQueryStrategyRan", "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "skactiveml.stream.CognitiveDualQueryStrategyVarUn", "skactiveml.stream.FixedUncertainty", "skactiveml.stream.PeriodicSampling", "skactiveml.stream.RandomVariableUncertainty", "skactiveml.stream.Split", "skactiveml.stream.StreamDensityBasedAL", "skactiveml.stream.StreamProbabilisticAL", "skactiveml.stream.StreamRandomSampling", "skactiveml.stream.VariableUncertainty", "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.RandomBudgetManager", "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.SplitBudgetManager", "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "skactiveml.utils.ExtLabelEncoder", "skactiveml.utils._check_callable", "skactiveml.utils.call_func", "skactiveml.utils.check_X_y", "skactiveml.utils.check_bound", "skactiveml.utils.check_budget_manager", "skactiveml.utils.check_class_prior", "skactiveml.utils.check_classes", "skactiveml.utils.check_classifier_params", "skactiveml.utils.check_cost_matrix", "skactiveml.utils.check_equal_missing_label", "skactiveml.utils.check_indices", "skactiveml.utils.check_missing_label", "skactiveml.utils.check_random_state", "skactiveml.utils.check_scalar", "skactiveml.utils.check_type", "skactiveml.utils.compute_vote_vectors", "skactiveml.utils.ext_confusion_matrix", "skactiveml.utils.is_labeled", "skactiveml.utils.is_unlabeled", "skactiveml.utils.labeled_indices", "skactiveml.utils.majority_vote", "skactiveml.utils.rand_argmax", "skactiveml.utils.rand_argmin", "skactiveml.utils.simple_batch", "skactiveml.utils.unlabeled_indices", "skactiveml.visualization.mesh", "skactiveml.visualization.plot_annotator_utilities", "skactiveml.visualization.plot_contour_for_samples", "skactiveml.visualization.plot_decision_boundary", "skactiveml.visualization.plot_stream_decision_boundary", "skactiveml.visualization.plot_stream_training_data", "skactiveml.visualization.plot_utilities", "API Reference", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "Examples", "Pool Based AL Strategies", "Computation times", "Computation times", "Stream Based AL Strategies", "Computation times", "Strategy Overview", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning With Pool Query Strategies", "Stream-based Active Learning With River", "Welcome to scikit-activeml\u2019s documentation!", "Computation times", "skactiveml.utils.MISSING_LABEL", "Tutorials"], "terms": {"scikit": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 88, 115, 119, 121, 122, 123, 127], "activeml": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 115, 119, 127], "i": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "librari": [0, 115, 123], "implement": [0, 16, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 64, 69, 100, 104, 114, 115, 116, 118, 124], "most": [0, 11, 26, 31, 47, 50, 51, 52, 53, 54, 55, 57, 62, 64, 66, 68, 70, 115, 117, 124], "import": [0, 33, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "activ": [0, 5, 7, 9, 10, 11, 15, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104, 114, 118, 127], "learn": [0, 5, 7, 9, 10, 11, 15, 16, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 104, 114, 118, 127], "It": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 31, 45, 60, 63, 86, 93, 94, 100, 115, 118], "built": [0, 115, 117], "upon": [0, 115], "well": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 115, 118, 121, 122, 123, 124], "known": [0, 88, 115], "machin": [0, 19, 35, 40, 115, 118, 124], "framework": [0, 32, 116, 118], "our": [0, 115, 116, 118, 119, 120, 121, 122, 123, 124], "philosophi": 0, "extend": [0, 6, 39, 121, 122, 123], "sklearn": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 25, 26, 30, 31, 34, 36, 44, 50, 51, 52, 53, 54, 59, 60, 88, 100, 101, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "eco": 0, "system": [0, 21, 36, 41, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 124], "relev": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 33, 35, 39, 44, 115], "tool": [0, 104, 118], "partial": [0, 16, 17, 48], "unlabel": [0, 7, 10, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 71, 74, 98, 99, 101, 102, 103, 115, 117, 118, 124], "data": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 74, 83, 85, 92, 93, 94, 98, 99, 101, 102, 103, 118, 124], "repositori": 0, "": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 85, 93, 94, 115, 117, 118, 120, 121, 122, 123], "structur": [0, 93, 94], "given": [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 81, 83, 84, 85, 86, 88, 95, 97, 98, 99, 100, 101, 102, 103, 116, 120, 124], "imag": [0, 39, 116, 118], "below": [0, 114, 115, 117, 120, 121, 122, 123, 124], "each": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 81, 87, 92, 100, 101, 102, 115, 116, 117, 119, 120, 121, 122, 123], "node": 0, "repres": [0, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 50, 51, 52, 53, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 121, 122, 123], "class": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 96, 100, 102, 115, 116, 119, 120, 121, 122, 123, 124], "interfac": [0, 118], "The": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 85, 86, 95, 97, 98, 99, 100, 101, 102, 103, 104, 115, 116, 117, 119, 120, 121, 122, 123, 124], "arrow": 0, "illustr": [0, 124], "inherit": [0, 50, 118], "hierarchi": 0, "among": 0, "them": [0, 18, 48, 121, 123], "function": [0, 11, 15, 17, 25, 30, 31, 33, 34, 36, 39, 46, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 72, 73, 86, 88, 92, 93, 94, 97, 98, 100, 103, 116, 117, 118, 119, 120, 121, 122, 123], "dash": [0, 100], "yet": 0, "avail": [0, 7, 15, 20, 45, 46, 47, 48, 56, 63, 64, 67, 117, 118, 121, 122, 123], "In": [0, 11, 16, 17, 18, 22, 26, 35, 39, 40, 47, 50, 51, 52, 53, 54, 59, 60, 63, 93, 94, 115, 116, 118, 119, 121, 122, 123], "packag": [0, 73, 104, 115, 116, 118, 121, 123, 124, 126], "skactiveml": [0, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "three": [0, 47, 118, 120], "major": [0, 18, 44, 45, 46, 120], "compon": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 119], "e": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 63, 64, 65, 67, 68, 69, 70, 71, 73, 82, 98, 99, 101, 102, 103, 116, 118, 119], "skactivemlclassifi": [0, 6, 16, 17, 18, 19, 21, 23, 29, 33, 35, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 118], "skactivemlregressor": [0, 8, 21, 25, 29, 30, 35], "querystrategi": [0, 11, 98, 118], "modul": [0, 22, 88, 104, 116, 124], "ar": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 84, 88, 92, 95, 98, 103, 104, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "necessari": [0, 48, 118, 121, 122, 123], "deal": [0, 16, 45, 120], "specif": [0, 18, 86, 124], "estim": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 88, 116, 123], "thi": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 80, 88, 98, 99, 103, 104, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "wai": [0, 39, 116, 124], "can": [0, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 39, 46, 48, 50, 51, 52, 53, 54, 56, 61, 74, 85, 86, 99, 114, 115, 116, 118, 119, 121, 122, 123, 124], "easili": [0, 124], "zero": [0, 80, 116, 120], "initi": [0, 14, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 116, 124], "label": [0, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 68, 69, 70, 71, 74, 78, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126], "regard": [0, 4, 6, 12, 14, 15, 16, 17, 18, 19, 116], "we": [0, 15, 48, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "current": [0, 33, 39, 48, 99, 102], "differ": [0, 11, 32, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 116, 117, 118, 119, 120, 124], "between": [0, 19, 20, 28, 32, 41, 47, 71, 75, 117, 118, 123], "larg": [0, 116, 124], "sampl": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 87, 88, 92, 95, 98, 99, 101, 102, 103, 115, 116, 117, 120, 121, 122, 123, 124, 127], "arriv": [0, 56], "sequenti": 0, "paradigm": 0, "On": 0, "top": [0, 29, 124], "both": [0, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 115], "also": [0, 7, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 86, 115, 118, 119, 120], "distinguish": 0, "set": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 95, 98, 99, 101, 102, 103, 104, 118, 124], "latter": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "multipl": [0, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 41, 44, 45, 46, 48, 88, 92, 93, 94, 104, 120, 121, 122, 123], "error": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 33, 39, 44, 45, 74, 83, 85, 119], "prone": [0, 45], "provid": [0, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 117, 118, 120, 121, 122, 123, 124], "As": [0, 19, 39, 56, 61, 115, 117, 118, 119, 124], "result": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 48, 56, 74, 92, 93, 94, 117, 120, 121, 122, 123, 124], "onli": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 30, 35, 38, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 79, 80, 98, 102, 103, 117, 118, 119, 121, 122, 123], "decid": [0, 44, 45, 121, 123], "which": [0, 5, 7, 10, 11, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 98, 99, 100, 101, 102, 103, 104, 115, 116, 117, 118, 119, 124], "should": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 101, 119, 121, 122, 123], "big": 0, "all": [0, 4, 5, 7, 8, 9, 10, 11, 13, 15, 21, 22, 24, 28, 29, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 46, 48, 49, 73, 74, 88, 98, 102, 103, 108, 114, 115, 117, 118, 119, 121, 122, 123, 125], "who": [0, 120], "project": [0, 124], "new": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 48, 59, 74, 84, 101, 115, 119, 121, 122, 123], "enhanc": 0, "fix": [0, 23, 55, 64, 119], "have": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 85, 86, 91, 96, 102, 118, 119, 120, 121, 123], "ani": [0, 15, 17, 18, 30, 31, 34, 36, 56, 60, 61, 74, 88], "question": [0, 63], "pleas": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 124], "reach": [0, 50, 51, 52, 53, 54, 115], "out": [0, 116, 121, 122, 123], "other": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 79, 81, 88, 98, 103, 115, 116, 118, 121, 122, 123, 124], "via": [0, 11, 38, 43, 63, 120], "follow": [0, 33, 39, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 114, 116, 117, 118, 124], "channel": [0, 116], "github": [0, 124], "summar": 0, "upcom": 0, "featur": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 30, 31, 56, 61, 74, 75, 115, 117, 119, 121, 122, 123], "befor": [0, 121, 122, 123], "might": [0, 26, 33, 39, 48, 74, 119], "execut": [0, 110, 111, 113, 115, 116, 118, 124, 125], "step": [0, 18, 19, 33, 39, 65, 66, 67, 68, 69, 70, 101, 116, 118], "There": [0, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 115], "sever": 0, "creat": [0, 76, 89, 90, 95, 116, 117, 119, 121, 122, 123, 124], "local": [0, 50, 51, 52, 53, 54, 59, 118], "python": [0, 108, 116, 124], "virtualenv": 0, "pipenv": 0, "etc": [0, 26, 27, 32, 74], "One": 0, "possibl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 86, 98, 103, 116], "workflow": 0, "us": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 84, 88, 95, 98, 99, 100, 102, 103, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126], "name": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 83, 85, 86, 119], "conda": 0, "n": [0, 15, 33, 35, 39, 57, 95, 110, 111, 113, 117, 125], "To": [0, 11, 45, 50, 57, 63, 115, 118, 119, 120, 121, 122, 123, 124], "sure": [0, 74], "correct": [0, 19, 39, 44, 72, 86, 120], "Then": [0, 21, 29, 34, 35, 38, 46, 115, 120], "pip": [0, 118, 124], "now": [0, 117, 118], "some": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 74, 117, 118, 121, 122, 123], "requir": [0, 30, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 116, 118], "defin": [0, 8, 12, 13, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 45, 47, 50, 60, 98, 103, 116, 118, 119, 121, 122, 123, 126], "txt": 0, "requirements_extra": 0, "file": [0, 110, 111, 113, 125], "make": [0, 74, 115, 116, 117, 118, 119, 121, 122, 123], "your": [0, 28, 118, 124], "cd": 0, "root": 0, "r": [0, 7, 8, 13, 36, 45, 46, 89, 90, 91, 96], "after": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 115, 118, 120, 121, 122, 123], "wa": [0, 66, 67, 68, 70, 99, 100, 101, 118, 124], "success": 0, "pandoc": 0, "ghostscript": 0, "brew": 0, "conform": 0, "pep": 0, "8": [0, 116, 117, 118], "style": [0, 74], "For": [0, 8, 13, 15, 21, 22, 26, 27, 28, 29, 32, 47, 56, 73, 74, 115, 116, 118, 119, 121, 122, 123, 124], "lint": 0, "flake8": 0, "recommend": [0, 18], "black": [0, 117, 120, 124], "simpl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 118, 124, 127], "solut": 0, "format": [0, 74], "concret": 0, "command": 0, "line": [0, 100, 102, 117, 120, 124], "length": [0, 34, 38, 56, 74, 121, 122, 123], "79": 0, "example_fil": 0, "py": [0, 118], "1": [0, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 88, 95, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "fork": 0, "button": [0, 118], "clone": [0, 118], "git": 0, "http": [0, 22, 88, 124], "com": [0, 124], "usernam": 0, "branch": 0, "chang": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 44, 57, 74, 116], "from": [0, 5, 7, 8, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 98, 102, 103, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "checkout": 0, "b": [0, 19, 28, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "finish": 0, "pass": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 30, 31, 34, 36, 44, 46, 48, 60, 73, 74, 86, 92, 93, 94, 98, 103, 118, 120], "run": [0, 121, 122, 123], "pytest": 0, "cover": 0, "cov": 0, "commit": 0, "push": 0, "add": [0, 19, 121, 122, 123], "modifi": 0, "m": [0, 35, 60, 63], "messag": [0, 74, 83, 85], "abstract": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 65], "superclass": 0, "default": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 118, 121, 123, 124], "random_st": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 92, 93, 94, 95, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 118, 120], "enforc": [0, 74], "select": [0, 7, 10, 11, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 64, 67, 68, 69, 88, 93, 94, 95, 115, 116, 117, 118, 121, 122, 123], "logic": [0, 64], "store": [0, 74, 115, 119, 121, 122, 123, 124], "singleannotatorpoolquerystrategi": [0, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 46, 103], "must": [0, 6, 12, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 31, 34, 35, 36, 45, 60, 75, 80, 86, 98, 99, 100, 102, 103], "descript": [0, 15], "whose": [0, 6, 17, 28, 45, 47, 88, 93, 94, 100, 101], "typic": 0, "standard": [0, 8, 38, 74, 116, 119], "number": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 55, 57, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 116, 118, 119, 120, 121, 122, 123], "np": [0, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 48, 49, 64, 67, 68, 69, 71, 74, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "random": [0, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 92, 93, 94, 95, 116, 120], "randomst": [0, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 84, 92, 93, 94, 95, 119, 121, 122, 123], "like": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 118, 124], "prior": [0, 6, 14, 15, 19, 34, 42, 60, 77, 117, 118, 120], "option": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 80, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 118, 119], "probabl": [0, 6, 12, 14, 15, 16, 17, 18, 19, 21, 26, 27, 29, 32, 34, 35, 40, 41, 44, 47, 48, 55, 57, 60, 61, 62, 64, 66, 68, 70], "distribut": [0, 8, 19, 26, 27, 34, 44, 45, 46, 64, 68, 124], "probabilist": [0, 8, 15, 38, 43, 47, 60, 63, 119, 120, 122], "string": [0, 7, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 71, 74, 78, 87, 88, 92], "cost_matrix": [0, 6, 12, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 47, 79, 80], "cost": [0, 6, 12, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 42, 47, 49, 79, 80], "matrix": [0, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 33, 38, 39, 42, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 79, 80, 88], "interchang": 0, "x": [0, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 75, 85, 95, 97, 98, 99, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "train": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 49, 98, 99, 101, 102, 103, 116, 118, 119, 121, 122, 123, 124], "usual": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 98, 99, 101, 102, 103, 116, 118], "complet": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 61, 98, 99, 101, 102, 103, 118], "includ": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 74, 98, 99, 101, 102, 103, 104, 116, 118], "y": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 87, 89, 90, 91, 92, 96, 97, 98, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "possibli": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 48, 98, 102, 103, 118], "ones": [0, 7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 48, 98, 102, 103, 118], "indic": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 82, 86, 88, 89, 90, 91, 93, 94, 96, 98, 102, 103, 117, 118, 120], "missing_label": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 71, 74, 79, 83, 87, 88, 89, 90, 91, 92, 96, 98, 102, 103, 115, 116, 118, 119, 120, 121, 122, 123, 124], "candid": [0, 5, 7, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 98, 99, 102, 103, 117, 118, 120, 121, 122, 123, 124], "none": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 116, 118], "consid": [0, 7, 10, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 82, 98, 103], "shape": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 115, 118, 119, 120, 122, 124], "n_candid": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 98, 103], "type": [0, 7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 83, 85, 86, 98, 103, 116, 118], "int": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 80, 82, 84, 85, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 116, 118, 120], "n_featur": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 103, 115, 118, 119], "directli": [0, 7, 10, 15, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 60, 98, 103], "necessarili": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 45, 46, 98, 103], "contain": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 80, 88, 98, 99, 100, 101, 103, 116], "support": [0, 5, 7, 10, 11, 15, 19, 21, 22, 24, 28, 29, 33, 34, 35, 36, 37, 38, 39, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 102, 103, 118], "batch_siz": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 95, 115, 116, 118, 119, 120, 122], "one": [0, 7, 10, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 48, 86, 95, 115, 116, 117, 118, 119, 120, 121, 123, 124], "al": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 50, 51, 52, 53, 54, 59, 95, 118], "return_util": [0, 7, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 95, 117, 121, 123], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 80, 82, 85, 86, 88, 95, 98, 102, 103, 115, 116, 117, 119, 121, 122, 123], "addition": [0, 121, 123], "return": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 121, 122, 123], "util": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 102, 103, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "query_indic": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46], "g": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 65, 82], "0": [0, 5, 6, 7, 8, 10, 11, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 82, 88, 98, 99, 100, 102, 103, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "first": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 82, 115, 116, 117, 118, 120, 123, 124], "index": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 82, 88, 91, 93, 94, 95, 96, 115, 120, 124], "refer": [0, 7, 10, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 73, 88, 124], "batch": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 95, 116, 118, 120, 124, 127], "nan": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 71, 74, 79, 81, 83, 87, 88, 89, 90, 91, 92, 95, 96, 99, 115, 117, 118, 119], "self": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 98, 102, 103, 116, 118], "_validate_data": 0, "input": [0, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 118], "onc": [0, 48, 88], "mai": [0, 5, 6, 8, 11, 12, 13, 18, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 88, 99], "fit_if_not_fit": 0, "calcul": [0, 4, 15, 19, 26, 27, 30, 31, 32, 34, 35, 38, 40, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 121, 122, 123], "extra": 0, "public": 0, "simple_batch": 0, "determin": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 56, 59, 63, 64, 65, 66, 67, 68, 69, 70, 80, 92, 93, 94, 98, 99, 100, 102, 103, 115, 117], "naiv": 0, "testquerystrategi": 0, "need": [0, 20, 50, 51, 52, 53, 54, 115, 118, 119, 120, 121, 122, 123, 124], "templat": 0, "template_query_strategi": 0, "templatesingleannotatorpoolquerystrategi": 0, "mani": [0, 15, 35, 46, 65, 67, 68, 69, 70, 115], "automat": 0, "specifi": [0, 5, 7, 11, 19, 22, 30, 45, 46, 48, 56, 61, 63, 64, 65, 66, 67, 68, 69, 70, 75, 97, 115, 118, 120, 121, 122, 123], "qs_class": 0, "init_default_param": 0, "accordingli": 0, "whether": [0, 5, 8, 14, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 45, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 83, 120, 121, 122, 123], "handl": [0, 12, 16, 48, 119, 124], "regress": [0, 2, 19, 24, 25, 26, 30, 31, 32, 35, 74, 106, 108, 109, 114, 115, 124, 127], "classif": [0, 2, 3, 12, 19, 21, 23, 29, 35, 38, 39, 40, 41, 47, 88, 106, 107, 108, 109, 112, 114], "query_default_params_reg": 0, "query_default_params_clf": 0, "adjust": 0, "until": [0, 115], "resolv": 0, "particular": 0, "test_queri": 0, "more": [0, 19, 28, 47, 116, 124], "detail": [0, 26, 27, 32, 115], "inform": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 116], "skactivml": 0, "everi": [0, 19, 56, 82], "singleannotatorstreamquerystrategi": [0, 50, 56, 59, 60, 61], "ha": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 44, 45, 46, 48, 63, 64, 65, 66, 67, 68, 69, 70, 74, 80, 91, 93, 94, 96, 100, 101, 117, 124], "either": [0, 46, 56, 86], "intern": [0, 11, 15, 22, 23, 24, 25, 35, 38, 40, 43, 44, 45, 48], "budget": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 104, 121, 123, 124], "outsourc": 0, "integ": 0, "act": [0, 115, 119], "seed": [0, 84, 116, 120], "share": [0, 117], "thestrategi": 0, "allow": [0, 5, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 86, 88], "constraint": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104], "identifi": [0, 35, 116], "instanc": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 84, 92, 93, 94, 95, 97, 98, 101, 102, 103, 121, 122, 123, 124], "without": 0, "adapt": [0, 11, 45, 57, 82, 118], "state": [0, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 64, 67, 68, 69, 84, 95, 119, 121, 122, 123], "monitor": [0, 50, 51, 52, 53, 54], "accord": [0, 6, 12, 14, 15, 17, 18, 19, 41, 45, 46, 48, 58, 69, 116], "singleannotatorstreambasedquerystrategi": 0, "clf": [0, 24, 28, 33, 34, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 100, 101, 115, 116, 118, 119, 120, 121, 122, 123, 124], "unknown": 0, "sample_weight": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74], "weight": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74, 87, 92], "equal": [0, 25, 45, 46, 81, 82, 86, 88], "fit_clf": [0, 24, 28, 33, 34, 38, 39, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 116, 121, 122, 123], "queried_indic": [0, 5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 121, 123, 124], "best": [0, 8, 13, 100], "x_cand": [0, 32, 74, 121, 122, 123, 124], "assess": [0, 55, 57, 59, 60, 62, 63, 66, 67, 68, 70], "same": [0, 6, 12, 14, 15, 16, 17, 18, 19, 45, 48, 50, 51, 52, 53, 54, 64, 93, 94, 117], "attribut": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 35, 36, 44, 48, 71], "valu": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 81, 85, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 102, 103, 117, 118, 124], "budget_manager_param_dict": [0, 11, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 121, 123], "addit": [0, 18, 19, 48, 50, 52, 53, 54, 59, 98, 99, 100, 103, 118], "case": [0, 11, 16, 17, 21, 29, 33, 34, 35, 38, 39, 44, 45, 46, 47, 58, 69, 93, 94, 116, 118, 124], "forward": [0, 116], "call": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 73, 92, 93, 94, 118], "unittest": 0, "test_stream": 0, "examplequerystrategi": 0, "_exampl": 0, "test_exampl": 0, "filenam": 0, "moreov": [0, 48], "testexamplequerystrategi": 0, "testcas": 0, "written": 0, "variabl": [0, 6, 8, 12, 13, 18, 19, 83, 86, 121, 122, 123], "arg": [0, 5, 7, 9, 10, 11, 20, 65], "evalu": [0, 26, 27, 33, 39, 56, 60, 88, 116, 117, 118, 121, 122, 123, 124, 127], "testclass": 0, "test_init_param_arg": 0, "test_query_param_arg": 0, "unchang": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "manag": [0, 5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 104, 118], "budgetmanag": [0, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 76], "throw": 0, "test_budget_manag": 0, "examplebudgetmanag": 0, "testexamplebudgetmanag": 0, "test_query_by_util": 0, "_param_arg": 0, "multiannotatorpoolquerystrategi": [0, 45, 46], "pair": [0, 7, 33, 39, 45, 46, 48, 120], "mean": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 60, 74, 116, 118, 119, 121, 122, 123], "j": [0, 6, 7, 12, 14, 15, 16, 17, 18, 19, 22, 33, 35, 36, 38, 39, 45, 46, 47, 50, 51, 52, 53, 54, 87, 88, 116, 118], "n_avl_annot": [0, 7, 45, 46], "boolean": [0, 7, 24, 45, 46, 48, 73, 74, 86, 89, 90], "arrai": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 116, 118, 120, 121, 122, 123, 124], "entri": [0, 6, 7, 14, 15, 45, 46, 80, 88, 100, 101], "form": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "combin": [0, 116, 119], "perform": [0, 4, 19, 44, 45, 46, 74, 115, 116, 118, 121, 122, 123, 124], "aggreg": [0, 46], "singleannotatorwrapp": [0, 120], "greedi": [0, 29, 30, 31], "multiannot": [0, 120], "test_init_param_a": 0, "appli": [0, 15, 29, 74], "test_query_param_a": 0, "main": [0, 56, 115, 119, 124], "part": [0, 115, 116, 121, 122, 123], "subpackag": 0, "its": [0, 21, 29, 33, 35, 39, 64, 65, 67, 68, 69, 70, 74, 124], "membership": [0, 47], "super": [0, 116, 118], "hold": [0, 6, 12, 14, 15, 16, 17, 18, 19, 43, 44, 71, 87, 92, 102, 121, 122, 123], "dure": [0, 6, 12, 14, 15, 16, 17, 18, 19, 46], "miss": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 74, 79, 81, 83, 87, 88, 89, 90, 91, 92, 96, 115, 116, 126], "ensur": [0, 74], "reproduc": [0, 6, 8, 12, 13, 14, 16, 17, 18, 19, 92, 93, 94, 119], "cf": 0, "through": [0, 33, 118, 120, 121, 122, 123], "column": [0, 74, 88], "except": [0, 8, 13, 34, 38, 60, 64, 82, 98, 103, 118], "expect": [0, 8, 13, 19, 21, 25, 26, 27, 29, 32, 33, 38, 39, 42, 43, 47, 48, 118], "object": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 85, 86, 121, 122, 123], "assign": [0, 19, 46, 92, 115, 117, 118, 120], "output": [0, 14, 25, 26, 27, 118], "uniform": [0, 117], "when": [0, 8, 11, 13, 15, 30, 33, 34, 38, 45, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 74, 118], "p": [0, 6, 12, 14, 15, 16, 17, 18, 19, 39, 48, 49, 116, 120], "per": [0, 6, 14, 15, 16, 17, 18, 44, 87, 116, 120], "_check_n_featur": 0, "been": [0, 5, 11, 18, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 124], "classfrequencyestim": [0, 14, 15, 34], "y_pred": [0, 8, 13, 88, 117], "overwritten": 0, "imbalanc": 0, "comput": [0, 14, 21, 29, 30, 35, 38, 40, 41, 44, 47, 48, 63, 88], "accuraci": [0, 6, 12, 14, 15, 16, 17, 18, 19, 44, 45, 88, 115, 116, 119, 120, 121, 122, 123, 124], "test_classifi": 0, "exampleclassifi": 0, "_example_classifi": 0, "test_example_classifi": 0, "testexampleclassifi": 0, "test_methodname_parameternam": 0, "invalid": 0, "correctli": 0, "test_methodnam": 0, "intend": 0, "target": [0, 8, 26, 30, 32, 71, 74, 83, 88, 117], "probabilisticregressor": [0, 26, 27, 32], "r2": 0, "exampleregressor": 0, "_example_regressor": 0, "testexampleregressor": 0, "test_example_regressor": 0, "mark": 0, "annotatormodelmixin": [0, 19, 44], "These": [0, 19, 121, 122, 123], "proxi": [0, 14], "qualiti": 0, "p_annot": [0, 4, 19, 44], "were": [0, 15, 65, 67, 68, 69, 70, 98, 102, 103], "previou": [0, 118, 121, 122, 123], "maximum": [0, 19, 34, 42, 85, 93, 118], "two": [0, 19, 24, 33, 39, 81, 115, 119, 120, 124], "goal": [0, 115, 124], "understand": [0, 115], "improv": [0, 115, 124], "usabl": 0, "therefor": [0, 16, 33, 39, 44], "do": [0, 115, 117, 118, 119], "so": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 115, 117, 118], "doc": 0, "query_strategi": [0, 46, 118, 121, 122, 123], "json": 0, "sub": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "offici": 0, "categori": 0, "methodolog": 0, "reduct": [0, 27, 33, 42], "committe": [0, 21, 29, 35, 116], "uncertainti": [0, 21, 22, 24, 29, 38, 43, 45, 47, 50, 51, 52, 53, 54, 55, 57, 59, 62, 115, 116, 120, 124], "template_pool": 0, "template_pool_regress": 0, "template_stream": 0, "template_pool_batch": 0, "tag": 0, "search": [0, 124], "titl": [0, 115, 117, 119, 121, 123, 124], "text_0": 0, "placehold": 0, "explan": 0, "ref": 0, "bibtex": 0, "kei": [0, 18, 116, 119], "paper": [0, 26, 50, 51, 52, 53, 54, 124], "sequenc": [0, 48], "order": [0, 6, 12, 14, 15, 16, 17, 18, 19, 48, 50, 51, 52, 53, 54, 74, 88], "content": 0, "displai": [0, 117, 118, 120, 121, 122, 123], "plot": [0, 2, 3, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 115, 116, 117, 120, 121, 122, 123], "import_misc": 0, "randomsampl": [0, 61, 116, 119, 121, 122, 123], "n_sampl": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 103, 116, 118, 119, 120, 121, 122, 123, 124], "init_q": 0, "query_param": 0, "preproc": 0, "preprocess": [0, 25, 116, 118], "min": [0, 28, 115, 118, 119, 120], "max": [0, 115, 119, 120], "n_cycl": [0, 115, 116, 118, 119, 120, 124], "init_clf": 0, "parzenwindowclassifi": [0, 24, 119, 120, 121, 122, 124], "init_reg": 0, "nickernelregressor": [0, 117], "close": 0, "100": [0, 19, 58, 59, 63, 65, 66, 67, 68, 69, 70, 115, 116, 117, 118, 119, 120], "view": [0, 19, 116], "here": [0, 48, 115, 117, 121, 122, 123], "adopt": 0, "sphinx": [0, 108], "html": [0, 22, 88, 118], "_build": 0, "tracker": 0, "think": 0, "found": [0, 118, 124], "see": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 27, 32, 44, 47, 60, 63, 64, 65, 66, 67, 68, 69, 70, 73, 99, 115], "problem": [0, 19, 24, 120, 124], "next": [0, 22, 34, 116, 117, 118, 121, 122, 123], "releas": 0, "save": [0, 17, 123], "time": [0, 19, 48, 56, 57, 62, 64, 65, 67, 68, 69, 70, 121, 122, 123, 124], "what": 0, "done": [0, 39, 116], "how": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 117, 118, 119, 121, 122, 123], "replic": 0, "databas": 0, "box": 0, "page": [0, 25, 26, 27, 30, 31, 32, 34, 35, 40, 124], "usecas": 0, "someth": [0, 48], "isn": 0, "t": [0, 7, 8, 13, 28, 44, 45, 46, 50, 51, 52, 53, 54, 63, 64, 65, 67, 68, 69, 70, 89, 90, 91, 96, 121, 122, 124], "legend": [2, 3, 106, 107, 108, 109, 112, 116, 119, 121, 122, 123], "sourc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108], "abc": [4, 5, 9, 12, 13], "annot": [4, 7, 10, 18, 19, 22, 44, 45, 46, 49, 88, 98, 102, 103, 104, 114, 124, 127], "model": [4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 33, 34, 38, 39, 41, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 104, 116, 117, 118, 121, 122, 123], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 115, 117, 118, 119, 121, 123, 124], "predict_annotator_perf": [4, 19, 44], "an": [4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 35, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "test": [4, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 116, 118, 119, 121, 122, 123], "numpi": [4, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 71, 77, 80, 88, 89, 90, 91, 93, 94, 96, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "ndarrai": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 77, 80, 82, 88, 89, 90, 91, 93, 94, 95, 96, 97], "n_annot": [4, 7, 19, 44, 45, 46, 87, 88, 92, 98, 103, 120], "l": [4, 15, 19, 44, 124], "baseestim": [5, 9, 12, 13, 44, 71], "stream": [5, 11, 113, 127], "float": [5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 28, 29, 34, 35, 36, 40, 41, 42, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 85, 102, 121, 122, 123], "ratio": [5, 63, 64, 65, 66, 67, 68, 69, 70, 100], "If": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 81, 82, 84, 85, 88, 91, 95, 96, 98, 99, 100, 101, 102, 103, 118, 121, 122, 123, 124], "replac": [5, 48, 99], "get_metadata_rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "get": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 124, 127], "metadata": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "check": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 96, 118, 121, 122, 123], "user": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 115, 118], "guid": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "mechan": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "work": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 115], "metadatarequest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "A": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 82, 110, 111, 113, 118, 120, 124, 125], "encapsul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "get_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "deep": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 124, 127], "bool": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 80, 82, 85, 95, 98, 102, 103], "subobject": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "dict": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 93, 94, 98, 99, 100, 103, 118], "map": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "query_by_util": [5, 63, 64, 65, 66, 67, 68, 69, 70], "kwarg": [5, 7, 9, 10, 11, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 65, 73, 98, 103, 118], "ask": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 115, 119], "suffici": [5, 50, 51, 52, 53, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 124], "queri": [5, 7, 9, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 102, 103, 104, 116, 117, 118, 120, 127], "correspond": [5, 19, 48, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 68, 69, 70, 82, 124], "strategi": [5, 7, 9, 10, 11, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 98, 99, 102, 103, 104, 116, 117, 118, 120, 127], "worth": [5, 63, 64, 65, 66, 67, 68, 69, 70], "n_queried_inst": [5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "set_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "nest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "pipelin": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 118], "__": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "updat": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 116, 121, 123, 124], "spars": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "matric": [5, 11, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "accept": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 83, 85, 86, 118], "thei": [5, 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73], "itself": [5, 11, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "class_prior": [6, 14, 15, 77, 120], "classifi": [6, 12, 23, 24, 28, 33, 34, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 100, 101, 115, 116, 118, 119, 120, 121, 122, 123, 124], "abl": [6, 16, 116, 120], "frequenc": [6, 14, 15, 17, 34, 48, 60], "predict_freq": [6, 14, 15, 17, 34, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62], "n_class": [6, 12, 14, 15, 16, 17, 18, 19, 22, 33, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 71, 77, 78, 79, 80, 87, 88, 92, 102, 116, 119, 122], "fit": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 71, 82, 100, 101, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "scalar": [6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 71, 74, 85, 87, 88, 92, 100, 102], "str": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 31, 34, 36, 44, 60, 72, 74, 79, 81, 83, 85, 86, 89, 90, 91, 96, 100, 101, 102, 118], "predict": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 30, 32, 33, 38, 39, 47, 48, 49, 55, 57, 62, 88, 101, 117, 121, 122, 123, 124], "observ": [6, 14, 15, 42, 57, 62, 63, 64, 68, 70, 88, 117, 120], "non": [6, 14, 15, 74, 80], "neg": [6, 8, 13, 14, 15, 80, 88], "belong": [6, 14, 15, 19, 120], "classes_": [6, 12, 14, 15, 16, 17, 18, 19, 44, 48, 71], "across": [6, 8, 12, 13, 14, 16, 17, 18, 19, 92, 93, 94, 117, 119], "class_prior_": [6, 14, 15], "cost_matrix_": [6, 12, 14, 15, 16, 18, 19], "n_output": [6, 8, 12, 13, 16, 17, 19, 71, 89, 90, 91, 96], "where": [6, 8, 12, 13, 18, 19, 26, 32, 33, 39, 44, 46, 50, 51, 52, 53, 54, 82, 117, 120], "f": [6, 14, 15, 17, 32, 39, 48, 74, 115, 116, 118, 119, 120, 122], "predict_proba": [6, 12, 14, 15, 16, 17, 18, 19, 23, 33, 38, 39, 45, 48, 60, 100], "m_sampl": [6, 14, 15], "metric": [6, 14, 15, 26, 30, 31, 34, 36, 50, 51, 52, 53, 54, 59, 60, 88, 119, 120, 123], "precomput": [6, 8, 13, 14, 15, 24, 36, 48], "score": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 40, 41, 43, 47, 115, 116, 118, 119], "set_fit_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "union": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 118], "note": [6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 50, 51, 52, 53, 54, 56, 61, 63, 118, 124], "enable_metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "set_config": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "ignor": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 33, 39, 44, 98, 99, 103, 115, 116, 117, 118, 119], "fals": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 70, 73, 74, 75, 80, 88, 95, 98, 103, 116, 120, 121, 122, 123], "meta": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "rais": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 34, 44, 60, 74, 81, 82, 84, 85, 98, 103, 118], "alia": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "instead": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 33, 34, 39, 44, 48, 60, 99], "origin": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 71, 74, 116], "metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "retain": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "exist": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 46, 73, 116, 117], "you": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 114, 118, 124], "version": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 74, 116], "3": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 35, 38, 39, 44, 46, 50, 51, 52, 53, 54, 60, 102, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "insid": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44], "otherwis": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 33, 44, 45, 84, 85, 91, 96, 98, 99, 102, 103], "effect": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 74], "set_score_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19], "poolquerystrategi": [7, 10], "pool": [7, 10, 60, 110, 118, 127], "control": [7, 9, 11, 36, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 118], "dtype": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 45, 46, 74, 98, 103, 116, 120, 121, 122, 123], "cycl": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 95, 116, 118, 119, 120, 124], "batchsiz": [7, 46], "2": [7, 8, 13, 15, 19, 21, 25, 34, 35, 38, 39, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 59, 60, 66, 74, 75, 88, 91, 96, 98, 102, 115, 116, 117, 118, 119, 120, 121, 122, 123], "respect": [7, 25, 45, 46], "w": [7, 8, 13, 45, 46, 63, 65, 66, 67, 68, 69, 70, 87, 89, 90, 91, 92, 96], "regressor": [8, 13, 22, 25, 26, 27, 30, 32, 117], "numer": [8, 13, 19, 22, 34, 74, 77, 98, 99, 103], "n_target": [8, 13], "return_std": [8, 117], "return_entropi": 8, "std": [8, 117, 119], "differenti": 8, "entropi": [8, 21, 29, 32, 38, 47, 49, 115, 124], "condit": [8, 27, 32, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 88], "deviat": [8, 64, 68, 119], "mu": 8, "predict_target_distribut": 8, "dist": 8, "scipi": [8, 19, 117, 121, 122, 123], "stat": [8, 117], "_distn_infrastructur": 8, "rv_frozen": 8, "sample_i": 8, "n_samples_x": 8, "drawn": 8, "gener": [8, 13, 14, 22, 28, 57, 88, 92, 93, 94, 95, 108, 110, 111, 113, 116, 118, 124], "randomli": [8, 46, 58, 61, 67, 69, 93, 94], "draw": [8, 84], "y_sampl": 8, "coeffici": [8, 13], "frac": [8, 13], "u": [8, 13, 28, 45, 64, 65, 67, 68, 69, 70, 124], "v": [8, 13, 15, 19, 45, 58, 69, 87], "residu": [8, 13], "sum": [8, 13, 18, 39, 118], "squar": [8, 13], "y_true": [8, 13, 88, 115, 116, 117, 119, 120, 124], "total": [8, 13, 25, 110, 111, 113, 120, 125], "becaus": [8, 13, 100, 117], "arbitrarili": [8, 13], "wors": [8, 13], "constant": [8, 13, 19, 126], "alwai": [8, 13], "disregard": [8, 13, 56, 61], "would": [8, 13, 56], "kernel": [8, 13, 15, 34, 36, 48, 60, 123], "list": [8, 13, 18, 21, 29, 35, 49, 74, 88, 100, 101, 116, 118, 121, 122, 123, 124], "n_samples_fit": [8, 13], "multioutput": [8, 13], "uniform_averag": [8, 13], "23": [8, 13, 36, 74], "keep": [8, 13, 119], "consist": [8, 13, 18, 48, 74, 116, 121, 122, 123], "r2_score": [8, 13], "influenc": [8, 13, 28, 74], "multioutputregressor": [8, 13], "set_predict_request": 8, "argument": [9, 18, 25, 26, 27, 30, 31, 32, 93, 94, 98, 103, 118, 120], "singl": [10, 46, 102, 103, 114, 119, 120, 121, 122, 123], "acquir": [11, 34, 42, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 115], "startegi": 11, "within": [11, 18, 23, 28, 50, 51, 52, 53, 54, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 119, 121, 122, 123], "doe": [11, 74, 85], "alter": 11, "n_sampled_inst": 11, "decis": [11, 19, 28, 39, 50, 51, 52, 53, 54, 56, 61, 100, 101, 115, 120, 124], "taken": [11, 65, 66, 67, 68, 69, 70], "conjunct": 11, "end": [11, 118], "simul": [11, 33, 39, 48, 56, 61], "final": [11, 50, 51, 52, 53, 54, 56, 61, 115, 124], "especi": [11, 56, 61], "help": [11, 33, 39, 56, 61, 124], "develop": [11, 56, 61, 124], "wrapper": [11, 16, 17, 46, 48, 56, 61, 116, 120], "could": [11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73], "streambasedquerystrategi": 11, "classifiermixin": [12, 16], "sensit": [12, 22, 38, 39, 47], "regressormixin": 13, "mixture_model": 14, "weight_mod": 14, "respons": 14, "base": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 92, 98, 99, 102, 103, 118, 122, 127], "mixtur": 14, "bayesian": [14, 19, 21, 29, 41], "gaussian": [14, 124], "gmm": [14, 28], "gaussianmixtur": 14, "bayesiangaussianmixtur": 14, "unsupervis": 14, "algorithm": [14, 19, 22, 74, 115, 118, 124], "refit": [14, 23, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 121, 123], "bayesianmixturemodel": 14, "n_compon": 14, "similar": 14, "exponenti": 14, "mahalanobi": 14, "distanc": [14, 30, 31, 50, 51, 52, 53, 54, 59, 75], "f_components_": 14, "c": [14, 15, 19, 42, 47, 50, 51, 52, 53, 54, 74, 88, 115, 116, 117, 119, 120, 121, 122, 123, 124], "mixture_model_": 14, "n_neighbor": 15, "rbf": [15, 34, 36, 60, 119, 120, 123], "metric_dict": [15, 31, 34, 36, 60, 117, 119, 120], "parzen": [15, 24, 48, 124], "window": [15, 17, 24, 48, 50, 51, 52, 53, 54, 59, 63, 65, 66, 67, 68, 69, 70, 121, 122, 123, 124], "pwc": [15, 124], "parametr": 15, "densiti": [15, 34, 38, 50, 51, 52, 53, 54, 59, 60, 117, 123], "obtain": [15, 63, 116, 120, 124], "callabl": [15, 19, 25, 26, 34, 36, 46, 50, 51, 52, 53, 54, 59, 60, 72, 73, 118], "valid": [15, 18, 30, 31, 34, 36, 60, 72, 74, 75, 76, 77, 82, 84, 85, 118, 119], "pairwis": [15, 34, 36, 50, 51, 52, 53, 54, 59, 60], "pairwise_kernel": [15, 34, 36, 60], "nearest": [15, 59], "neighbour": 15, "further": [15, 16, 17, 22, 30, 31, 34, 36, 60, 73, 86, 120], "gamma": [15, 19, 34, 60, 117, 119, 120], "while": [15, 118, 121, 122, 123], "varianc": [15, 27, 35, 117], "over": [15, 19, 46, 50, 51, 52, 53, 54, 59, 88, 97, 116, 117, 118, 119, 120, 121, 122, 123], "o": 15, "chapel": 15, "proceed": [15, 22, 35, 40], "tenth": 15, "workshop": [15, 35], "artifici": [15, 34, 38, 43, 47, 116, 123], "intellig": [15, 34, 35, 38, 43, 47, 60, 63, 124], "statist": [15, 27], "2005": [15, 39], "chaudhuri": 15, "kakd": 15, "d": [15, 23, 35, 39, 50, 51, 52, 53, 54, 59, 63, 95], "sadek": 15, "gonzalez": 15, "kong": 15, "median": 15, "criteria": 15, "bandwidth": 15, "vector": [15, 19, 46, 74, 115, 124], "ieee": [15, 22, 25, 38, 39, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "confer": [15, 22, 24, 25, 35, 38, 40, 43, 44, 45, 47], "mine": [15, 22, 25, 44, 45], "icdmw": 15, "2017": 15, "x_": [15, 117], "v_": 15, "count": [15, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 87, 88, 121, 122, 123], "additive_chi2": [15, 36], "chi2": [15, 36], "cosin": [15, 36], "linear": [15, 25, 36, 116], "poli": [15, 36], "polynomi": [15, 36], "laplacian": [15, 36], "sigmoid": [15, 36], "metaestimatormixin": [16, 17], "filter": [16, 60, 63, 114], "estimator_": 16, "fit_kwarg": [16, 17], "duplic": [16, 17], "partial_fit": [16, 17, 33, 39, 48, 123], "predict_kwarg": [16, 17], "predict_proba_kwarg": [16, 17], "lexicograph": [16, 17, 48], "set_partial_fit_request": [16, 17], "window_s": [17, 59], "only_label": 17, "ignore_estimator_partial_fit": 17, "limit": [17, 121, 122], "latest": 17, "furthermor": [17, 119], "enabl": [17, 118], "wrap": [17, 24, 115, 120, 124], "slide": [17, 59, 121, 122, 123], "size": [17, 25, 50, 51, 52, 53, 54, 59, 65, 66, 67, 68, 69, 70, 116, 118, 120, 121, 122, 123], "unrestrict": 17, "discard": 17, "warn": [17, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 74, 115, 116, 117, 118, 119], "thrown": [17, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62], "base_estim": 17, "vote": [18, 44, 45, 46, 49, 87, 92, 116, 120], "hard": 18, "_baseheterogeneousensembl": 18, "tupl": [18, 21, 29, 35, 82, 83, 85, 117, 118], "ensembl": [18, 21, 29, 35, 117, 118], "element": [18, 21, 29, 35, 93, 94], "soft": [18, 116], "rule": 18, "els": [18, 95, 116, 117, 118, 119, 121, 123, 124], "argmax": [18, 93], "calibr": 18, "estimators_": [18, 21, 29, 35], "drop": 18, "appear": [18, 48, 88], "n_estim": [18, 21, 29, 35, 40, 41, 49, 117], "constructor": [18, 118], "variou": [18, 38, 104], "properti": 18, "named_estim": 18, "dictionari": [18, 19, 26, 27, 32, 46, 118, 119], "access": [18, 48, 115], "bunch": 18, "keyword": [18, 93, 94, 98, 103], "parameter_nam": 18, "new_valu": 18, "individu": 18, "remov": [18, 93, 94], "tol": 19, "01": [19, 64, 68, 69, 70, 116], "max_it": 19, "fit_intercept": 19, "annot_prior_ful": 19, "annot_prior_diag": 19, "weights_prior": 19, "solver": [19, 118], "newton": 19, "cg": 19, "solver_dict": 19, "logist": [19, 24, 115], "raykar": 19, "besid": [19, 46], "build": 19, "task": [19, 23, 26, 116], "assum": [19, 22, 25, 32, 45], "depend": [19, 46, 57, 61, 62, 64, 68, 70, 119], "confus": [19, 88], "row": [19, 49, 74, 88, 95], "normal": [19, 39, 71, 88], "bia": 19, "bias": 19, "refin": 19, "regular": 19, "threshold": [19, 21, 29, 35, 40, 41, 45, 55, 57, 62, 63, 64, 66, 68, 69, 70], "stop": [19, 33, 39], "em": [19, 40], "smaller": [19, 64, 65, 67, 68, 69, 70], "than": [19, 28, 30, 36, 45, 63, 64, 65, 66, 67, 68, 69, 70], "iter": [19, 86, 115, 116, 118, 120, 124], "k": [19, 29, 40, 46, 101, 119], "intercept": 19, "ad": [19, 39, 48, 116], "dirichlet": [19, 34], "diagon": [19, 80], "being": [19, 88], "ey": 19, "invers": 19, "covari": 19, "ident": [19, 25], "nelder": 19, "mead": 19, "powel": 19, "bfg": 19, "tnc": 19, "cobyla": 19, "slsqp": 19, "trust": 19, "constr": 19, "dogleg": 19, "ncg": 19, "exact": 19, "krylov": 19, "custom": [19, 86], "optim": [19, 33, 38, 48, 66, 116], "minim": [19, 21, 27, 29, 47, 49, 75], "maxit": 19, "5": [19, 25, 28, 39, 100, 115, 116, 117, 118, 119, 120, 121, 122, 123], "yu": 19, "zhao": 19, "h": [19, 35, 36], "valadez": 19, "florin": 19, "bogoni": 19, "moi": 19, "2010": [19, 36], "crowd": 19, "journal": [19, 124], "research": [19, 124], "11": [19, 39], "4": [19, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "_": [19, 88, 117], "n_annotators_": [19, 44], "w_": 19, "alpha_": 19, "describ": [19, 39, 48], "herebi": 19, "hi": 19, "her": 19, "with_traceback": 20, "tb": 20, "__traceback__": 20, "n_mc_sampl": [21, 29, 41], "ep": [21, 29, 35, 40, 41], "1e": [21, 29, 35, 40, 41], "07": [21, 29, 35, 40, 41], "_generalbald": [21, 29], "disagr": [21, 29, 35, 40, 41, 49], "reduc": [21, 29], "hypothes": [21, 29], "maxim": [21, 25, 29, 30, 32, 38, 42, 43, 47], "fast": [21, 29], "about": [21, 29, 56, 61], "shannon": [21, 29], "seek": [21, 29], "point": [21, 29, 41, 102, 115, 116, 119, 124], "maximis": [21, 29], "decreas": [21, 29, 63], "posterior": [21, 29, 47], "advanc": [21, 36, 41, 60, 63, 118], "mont": [21, 29, 33, 41], "carlo": [21, 29, 33, 41], "7": [21, 29, 35, 39, 40, 41, 116, 117, 119, 121, 123], "minimum": [21, 29, 35, 40, 41, 47, 74, 85, 94], "log": [21, 29, 33, 35, 39, 40, 41], "houlsbi": [21, 29, 41], "neil": [21, 29, 41], "ferenc": [21, 29, 41], "husz\u00e1r": [21, 29, 41], "zoubin": [21, 27, 29, 41], "ghahramani": [21, 27, 29, 41], "m\u00e1t\u00e9": [21, 29, 41], "lengyel": [21, 29, 41], "prefer": [21, 29, 41, 46], "arxiv": [21, 23, 29, 41, 49], "preprint": [21, 29, 41, 49, 124], "1112": [21, 29, 41], "5745": [21, 29, 41], "2011": [21, 29, 41], "kirsch": [21, 41], "andrea": [21, 41], "joost": [21, 41], "van": [21, 41, 63], "amersfoort": [21, 41], "yarin": [21, 41], "gal": [21, 41], "effici": [21, 41, 44, 45], "divers": [21, 28, 30, 31, 41, 117], "acquisit": [21, 41, 63, 121, 122], "neural": [21, 36, 41, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "process": [21, 36, 41, 46, 120, 122, 124], "32": [21, 41, 74, 116], "2019": [21, 23, 24, 30, 31, 32, 41], "fit_ensembl": [21, 29, 35, 116], "member": [21, 29, 35], "base_regressor": 22, "embed_dim": 22, "mds_param": 22, "nn_param": 22, "embed": [22, 124], "alc": 22, "multi": [22, 34, 60, 74, 98, 104, 114, 124, 127], "least": [22, 47, 80, 88, 118, 121, 122, 123], "libact": 22, "actual": [22, 33, 38, 39, 47, 119], "confid": [22, 44, 45, 47, 100, 102], "variant": [22, 38, 47, 117], "symbol": [22, 79, 81, 83, 89, 90, 91, 96], "org": [22, 88], "stabl": [22, 88], "manifold": 22, "md": 22, "neighbor": [22, 59], "nearestneighbor": 22, "kuan": 22, "hao": 22, "hsuan": [22, 38, 47], "tien": [22, 38, 47], "lin": [22, 30, 31, 38, 47], "novel": [22, 32], "multiclass": [22, 38, 39, 47], "icdm": 22, "2016": [22, 34], "greedy_select": 23, "discrimin": 23, "dal": 23, "Its": 23, "idea": [23, 48, 50, 51, 52, 53, 54, 56], "solv": [23, 124], "binari": [23, 88], "choos": [23, 46], "indistinguish": 23, "kept": 23, "gissin": 23, "shalev": 23, "shwartz": 23, "1907": 23, "06347": 23, "redefin": 23, "epistem": 24, "signific": [24, 115], "nguyen": 24, "vu": 24, "linh": 24, "s\u00e9bastien": 24, "desterck": 24, "eyk": 24, "h\u00fcllermeier": 24, "discoveri": [24, 44, 45], "scienc": [24, 28, 30, 31, 38, 47, 63], "springer": [24, 60, 63], "cham": [24, 63], "linear_model": [24, 115], "logisticregress": [24, 115], "bootstrap_s": 25, "n_train": 25, "ord": 25, "feature_map": 25, "bootstrap": 25, "compar": [25, 63, 64, 65, 67, 68, 69, 70, 115, 119, 121, 122, 123], "lie": 25, "rang": [25, 115, 116, 117, 118, 119, 120, 122, 124], "greater": [25, 36, 45, 46], "norm": [25, 117], "measur": [25, 28, 38, 40, 49, 59, 115], "gradient": 25, "linalg": 25, "take": [25, 26, 85, 116], "dimens": [25, 74, 75, 82, 93, 94], "exampl": [25, 36, 110, 111, 113, 115, 116, 120, 125], "polynomialfeatur": 25, "fit_transform": [25, 71, 116], "cai": 25, "wenbin": 25, "ya": 25, "zhang": 25, "jun": 25, "zhou": [25, 36, 50, 51, 52, 53, 54], "2013": [25, 28, 38, 47], "13th": 25, "51": 25, "60": [25, 117], "reg": [25, 26, 27, 30, 32, 117, 118], "fit_reg": [25, 26, 27, 30, 32, 117], "integration_dict": [26, 27], "loss": [26, 33, 39], "approach": [26, 33], "integr": [26, 27, 32], "integration_method": 26, "_conditional_expect": [26, 27, 32], "assume_linear": [26, 117], "mean_squared_error": 26, "altern": 26, "mean_absolute_error": 26, "christoph": [26, 124], "kaed": 26, "erik": 26, "rodner": 26, "alexand": [26, 124], "freytag": 26, "oliv": 26, "moth": 26, "bjoern": 26, "barz": 26, "joachim": 26, "denzler": 26, "bmvc": 26, "15": [26, 50, 51, 52, 53, 54, 116, 117], "2018": [26, 38, 43], "x_eval": [26, 27, 33, 118], "n_eval_sampl": [26, 27, 33, 118], "space": [26, 27, 30, 31, 56, 61, 117, 118, 121, 122, 123], "referenc": 26, "propos": [26, 50, 51, 52, 53, 54, 59, 63], "is_unlabel": [26, 89], "tri": [27, 31, 50, 51, 52, 53, 54], "cohn": 27, "david": 27, "jordan": 27, "michael": 27, "129": 27, "145": [27, 60], "1996": [27, 49], "lmbda": [28, 36], "4d": 28, "mixturemodelclassifi": 28, "05": [28, 44, 45, 116], "round": [28, 116], "avoid": 28, "redund": 28, "regul": 28, "factor": [28, 50, 51, 52, 53, 54], "reitmaier": 28, "sick": [28, 124], "let": [28, 115], "know": [28, 115, 119], "230": 28, "106": 28, "131": 28, "bald": [29, 41, 116], "x_metric": 30, "y_metric": 30, "x_metric_dict": 30, "y_metric_dict": 30, "n_gsx_sampl": 30, "gsi": 30, "gsy": 30, "pairwise_dist": [30, 31, 50, 51, 52, 53, 54, 59], "till": 30, "switch": 30, "gsx": 30, "exce": [30, 55, 57, 61, 62, 64, 66, 68, 70], "wu": [30, 31, 50, 51, 52, 53, 54], "dongrui": [30, 31], "chin": [30, 31], "teng": [30, 31], "jian": [30, 31], "huang": [30, 31, 36], "90": [30, 31], "105": [30, 31], "those": [31, 32, 88, 120, 124], "increas": [31, 63, 64, 68, 69, 70], "euclidean": 31, "integration_dict_target_v": [32, 117], "integration_dict_cross_entropi": [32, 117], "kullback": [32, 40], "leibler": [32, 40], "diverg": [32, 40], "independ": [32, 39], "cross": [32, 118, 119, 120], "old": 32, "conditional_expect": 32, "elreedi": 32, "dina": 32, "atiya": 32, "amir": 32, "shaheen": 32, "samir": 32, "balanc": [32, 60, 63], "explor": [32, 45], "exploit": [32, 45], "trade": [32, 45], "off": [32, 45], "651": 32, "subsequ": 32, "potenti": [32, 48], "misclassification_loss": 33, "subtract_curr": [33, 39], "expectederrorreduct": [33, 39], "ever": [33, 39], "outcom": [33, 39], "kind": [33, 39, 73], "risk": [33, 39], "log_loss": 33, "misclassif": [33, 39], "subtract": [33, 39], "criterion": [33, 39], "roi": 33, "mccallum": [33, 40], "2001": 33, "toward": 33, "icml": [33, 35, 40], "pp": [33, 39, 44, 45, 50, 51, 52, 53, 54, 59, 60], "441": 33, "448": 33, "ignore_partial_fit": [33, 39, 48], "sample_weight_candid": 33, "sample_weight_ev": 33, "ndim": [33, 34, 38, 74, 75, 95, 98, 102, 103], "Not": [33, 118], "applic": [33, 34, 38, 47, 124], "eer": 33, "m_max": [34, 42, 60], "mcpal": [34, 60], "hypothet": [34, 42], "multipli": [34, 38, 57, 60, 84], "typeerror": [34, 85], "daniel": [34, 124], "kottk": [34, 60, 63, 124], "georg": 34, "krempl": [34, 63], "dominik": 34, "lang": 34, "johann": 34, "teschner": 34, "myra": 34, "spiliopoul": [34, 63], "vol": [34, 39, 63], "285": 34, "frontier": 34, "586": 34, "594": 34, "io": 34, "press": [34, 118], "utility_weight": [34, 38, 60], "kl_diverg": 35, "disagre": 35, "vote_entropi": 35, "empir": 35, "seung": 35, "opper": 35, "sompolinski": 35, "acm": [35, 44, 45], "theori": 35, "287": 35, "294": 35, "1992": 35, "ab": 35, "mamitsuka": 35, "boost": 35, "bag": 35, "9": [35, 45, 61, 116, 118], "morgan": [35, 40], "kaufmann": [35, 40], "1998": [35, 40], "burbidg": 35, "robert": 35, "rowland": 35, "jem": 35, "king": 35, "ross": 35, "engin": 35, "autom": 35, "209": 35, "218": 35, "2007": [35, 39], "short": 36, "high": [36, 50, 51, 52, 53, 54, 59], "low": 36, "jin": 36, "z": [36, 50, 51, 52, 53, 54], "least_confid": [38, 47], "averag": [38, 39, 40, 43, 61, 119, 121, 122, 123], "precis": [38, 43], "margin_sampl": [38, 47], "expected_average_precis": 38, "settl": [38, 47], "burr": [38, 47], "literatur": [38, 47], "survei": [38, 47], "univers": [38, 47, 124], "wisconsin": [38, 47], "madison": [38, 47], "depart": [38, 47], "2009": [38, 44, 45, 47], "chen": [38, 47], "po": [38, 47], "lung": [38, 47], "technologi": [38, 47], "wang": [38, 43], "hanmo": [38, 43], "et": [38, 43, 50, 51, 52, 53, 54, 59], "action": [38, 43], "recognit": [38, 43], "ijcai": [38, 39, 43], "joint": [38, 41, 43], "consider_unlabel": 39, "consider_label": 39, "candidate_to_label": 39, "under": [39, 116, 119, 124], "flag": 39, "term": 39, "kapoor": 39, "ashish": 39, "eric": 39, "horvitz": 39, "sumit": 39, "basu": 39, "supervis": [39, 49, 118], "theoret": 39, "joshi": 39, "porikli": 39, "papanikolopoulo": 39, "2012": 39, "scalabl": 39, "trpami": 39, "34": [39, 116], "2259": 39, "2273": 39, "margineantu": 39, "1622": 39, "1623": 39, "proba": [40, 41, 43, 47], "kl": 40, "level": [40, 44, 45, 49, 100, 102], "querybycommitte": [40, 49, 116, 117], "nigam": 40, "emploi": 40, "text": 40, "359": 40, "367": 40, "batchbald": [41, 116], "extens": [41, 50, 51, 52, 53, 54, 59, 60, 88, 118], "wherebi": 41, "jointli": 41, "mutual": 41, "k_vec_list": 42, "001": [42, 60, 120], "expected_cost_reduct": 42, "n_x_cand": 43, "alpha": [44, 45, 102, 119], "mode": 44, "upper": [44, 85], "reli": [44, 45, 117], "interv": [44, 45, 100, 101], "ielearn": 44, "lower": [44, 85, 116, 119], "bound": [44, 75, 81, 85, 97, 98, 99, 102, 103, 115, 119, 120], "ground": 44, "truth": 44, "half": [44, 45], "student": [44, 45], "ti": [44, 45, 93, 94], "donmez": [44, 45], "pinar": [44, 45], "jaim": [44, 45], "carbonel": [44, 45], "jeff": [44, 45], "schneider": [44, 45], "15th": [44, 45], "sigkdd": [44, 45], "knowledg": [44, 45, 118], "259": [44, 45], "268": [44, 45], "a_perf_": 44, "a_cand": 44, "epsilon": [45, 75], "iethresh": 45, "address": 45, "intervalestimationannotmodel": 45, "nonetheless": 45, "rank": [45, 46], "amount": [45, 124], "n_cand_sampl": 45, "y_aggreg": [46, 92], "transform": [46, 71, 116], "a_pef": 46, "majority_vot": [46, 120], "query_params_dict": [46, 120], "n_annotators_per_sampl": [46, 120], "a_perf": 46, "primarili": 46, "unspecifi": 46, "previous": 46, "chosen": 46, "interpret": [46, 82], "th": [46, 88, 95], "last": [46, 63, 65, 66, 67, 68, 69, 70, 101, 115], "margin": 47, "lc": 47, "maximi": 47, "smallest": 47, "sm": 47, "gap": 47, "second": [47, 100, 115], "set_base_clf": 48, "enforce_unique_sampl": 48, "use_speed_up": 48, "simplifi": [48, 119, 121, 122, 123], "retrain": [48, 115, 118], "scenario": 48, "therebi": [48, 86, 124], "pre": [48, 121, 122, 123], "newli": 48, "simpli": [48, 124], "append": [48, 116, 118, 121, 123, 124], "repeat": [48, 119, 121, 122, 123], "speed": 48, "up": 48, "idx": [48, 118, 120], "n_sub_sampl": 48, "init": 48, "is_fit": 48, "base_clf": 48, "resp": 48, "use_base_clf": 48, "idx_fit": 48, "idx_pr": 48, "fit_param": 48, "pred_param": 48, "Will": 48, "idx_predict": 48, "n_fit_sampl": 48, "n_predict_sampl": 48, "subset": [48, 88], "later": [48, 50, 51, 52, 53, 54, 56, 61], "engelson": 49, "sean": 49, "ido": 49, "dagan": 49, "manual": 49, "corpora": 49, "cmp": 49, "lg": 49, "9606030": 49, "budget_manag": [50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 76, 121, 123], "density_threshold": [50, 51, 52, 53, 54], "cognition_window_s": [50, 51, 52, 53, 54], "10": [50, 51, 52, 53, 54, 61, 115, 116, 117, 118, 119, 121, 122, 123, 124], "dist_func": [50, 51, 52, 53, 54, 59], "dist_func_dict": [50, 51, 52, 53, 54, 59], "force_full_budget": [50, 51, 52, 53, 54, 121, 123], "cognitivedualquerystrategyran": [50, 121, 123], "cognitivedualquerystrategyranvarun": [50, 121, 123], "cognitivedualquerystrategyvarun": [50, 121, 123], "cognitivedualquerystrategyfixun": [50, 121, 123], "\u017eliobait\u0117": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "streamdensitybased": [50, 51, 52, 53, 54, 121, 123], "around": [50, 51, 52, 53, 54], "author": [50, 51, 52, 53, 54, 124], "cognit": [50, 51, 52, 53, 54], "full": [50, 51, 52, 53, 54, 115, 118, 119, 120, 122, 124], "doesn": [50, 51, 52, 53, 54], "estimatedbudgetzliobait": [50, 51, 52, 53, 54, 64, 66, 67, 68, 69, 70], "zliobait": [50, 64, 69], "randombudgetmanag": [50, 52], "fixeduncertaintybudgetmanag": [50, 51, 55], "variableuncertaintybudgetmanag": [50, 54, 62], "randomvariableuncertaintybudgetmanag": [50, 53, 57], "liu": [50, 51, 52, 53, 54], "xue": [50, 51, 52, 53, 54], "yang": [50, 51, 52, 53, 54], "li": [50, 51, 52, 53, 54], "cao": [50, 51, 52, 53, 54], "2021": [50, 51, 52, 53, 54, 124], "onlin": [50, 51, 52, 53, 54], "drift": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "transact": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "network": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "bifet": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "pfahring": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "holm": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "2014": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "With": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 124, 127], "25": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 101, 117], "27": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "39": [50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65], "ienco": [50, 51, 52, 53, 54, 59], "zliobait\u0117": [50, 51, 52, 53, 54, 59], "focus": [50, 51, 52, 53, 54, 59], "evolv": [50, 51, 52, 53, 54, 59], "bigmin": [50, 51, 52, 53, 54, 59], "133": [50, 51, 52, 53, 54, 59], "148": [50, 51, 52, 53, 54, 59], "seen": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62], "cognitivedualquerystrategi": [51, 52, 53, 54], "fixeduncertainti": [51, 66, 121, 123], "randomvariableuncertainti": 53, "variableuncertainti": [54, 58, 69, 121, 123], "uncertaintyzliobait": [55, 57, 58, 62], "period": 56, "fourth": 56, "behind": 56, "exhaust": [56, 61, 64, 65, 66, 67, 68, 69, 70], "soon": 56, "regardless": [56, 61], "posit": [56, 61, 88, 101], "thu": [56, 61, 88, 117], "baselin": [56, 61], "ran": 57, "var": [57, 62], "better": [57, 115, 124], "detect": 57, "delta": [57, 64, 68], "splitbudgetmanag": [58, 64], "1000": [59, 116, 121, 122, 123], "densitybasedbudgetmanag": [59, 64], "datastream": [60, 61, 63], "spatial": [60, 63], "increment": [60, 63, 65], "quantil": [60, 63], "balancedincrementalquantilefilt": [60, 121], "tempor": 60, "0e": 60, "onto": 60, "2015": [60, 63], "analysi": [60, 63], "xiv": [60, 63], "157": 60, "n_candidate_sampl": 60, "pal": [60, 123], "allow_exceeding_budget": 61, "long": 61, "w_tol": 63, "50": [63, 118, 119, 121, 122, 123], "togeth": 63, "warrant": 63, "ultil": 63, "against": [63, 119], "deriv": 63, "infer": [63, 75], "higher": [63, 64, 65, 66, 67, 68, 69, 70], "stai": 63, "fromont": 63, "de": 63, "bie": 63, "leeuwen": 63, "ed": 63, "ida": 63, "lectur": 63, "9385": 63, "estimatedbudget": 63, "theta": [64, 68, 69, 70], "alreadi": [64, 65, 66, 67, 68, 69, 70, 84, 117, 120], "spent": [64, 65, 67, 68, 69, 70], "start": [64, 68, 69, 70, 116, 124, 127], "wich": [64, 68, 69, 70], "purchas": [64, 68, 69, 70], "recalcul": [64, 68, 69, 70], "decres": [64, 68, 69, 70], "standart": [64, 68], "u_t": [65, 67, 68, 69, 70], "labl": [65, 67, 68, 69, 70], "funktion": [65, 67, 68, 69, 70], "labeling_t": [65, 67, 68, 69, 70], "memori": [65, 66, 67, 68, 69, 70], "num_class": 66, "left": [66, 67, 68, 70], "fixeduncertaintybudget": 66, "recurs": [67, 68, 69, 70], "randomvariableuncertaintybudget": 68, "percent": 69, "splitbudget": 69, "variableuncertaintybudget": 70, "encod": 71, "inverse_transform": 71, "back": 71, "y_dec": 71, "y_enc": 71, "func": 72, "n_positional_paramet": 72, "free": 72, "n_free_paramet": 72, "f_callabl": 73, "only_mandatori": 73, "ignore_var_keyword": 73, "mandatori": 73, "var_keyword": 73, "inspect": 73, "sample_weight_cand": 74, "accept_spars": 74, "accept_large_spars": 74, "copi": [74, 76, 116, 117], "force_all_finit": 74, "ensure_2d": 74, "allow_nd": 74, "multi_output": 74, "allow_nan": 74, "ensure_min_sampl": 74, "ensure_min_featur": 74, "y_numer": 74, "2d": [74, 91, 96], "1d": 74, "By": [74, 88, 118], "empti": [74, 124], "finit": 74, "inf": 74, "attempt": 74, "convert": [74, 123], "failur": 74, "nd": [74, 95], "csc": 74, "csr": 74, "coo": 74, "bsr": 74, "suppli": 74, "caus": 74, "bit": 74, "20": [74, 115, 117, 120, 124], "preserv": 74, "unless": [74, 115, 119], "convers": 74, "forc": 74, "fortran": 74, "trigger": 74, "pd": 74, "na": 74, "cannot": [74, 115, 118], "infinit": 74, "axi": [74, 93, 94, 99, 100, 101, 102, 103, 117, 119], "reject": 74, "dataset": [74, 115, 116, 117, 119, 120, 121, 122, 123, 124], "disabl": 74, "float64": 74, "x_convert": 74, "y_convert": 74, "bound_must_be_given": 75, "x1_min": 75, "x2_min": 75, "xndim_min": 75, "x1_max": 75, "x2_max": 75, "xndim_max": 75, "default_budget_manager_class": 76, "default_budget_manager_dict": 76, "budget_manager_": 76, "array_lik": 77, "uniformli": [78, 117], "compat": [79, 83, 118, 123, 124], "only_non_neg": 80, "contains_non_zero": 80, "diagonal_is_zero": 80, "cost_matrix_new": 80, "missing_label1": 81, "missing_label2": 81, "valueerror": [81, 84, 85, 118], "violat": [81, 85], "dim": [82, 116], "uniqu": [82, 115, 116, 120, 123, 124], "n_indic": 82, "n_dim": 82, "check_uniqu": 82, "target_typ": [83, 85, 86], "print": [83, 85, 115, 116, 117, 121, 122, 123], "seed_multipli": 84, "singleton": 84, "product": 84, "min_inclus": 85, "max_inclus": 85, "min_val": 85, "max_val": 85, "impli": 85, "inclus": 85, "exclus": 85, "match": [85, 117], "desir": 85, "obj": 86, "target_v": 86, "indicator_func": 86, "ones_lik": [87, 92], "confusion_matrix": 88, "definit": 88, "c_": 88, "group": [88, 124], "reorder": 88, "sort": [88, 117, 118], "pred": 88, "popul": 88, "conf_matric": 88, "predic": 88, "wikipedia": 88, "en": 88, "wiki": 88, "convent": 88, "ax": [88, 98, 99, 100, 101, 102, 103, 116, 117, 120], "mask": [89, 90], "present": [89, 91, 96], "lbld_indic": 91, "shuffl": [92, 93, 94, 119, 121, 122, 123], "argmax_kwarg": 93, "index_arrai": [93, 94], "along": [93, 94], "argmin_kwarg": 94, "argmin": 94, "highest": 95, "fill": 95, "best_indic": 95, "batch_util": 95, "len": [95, 115, 116, 117, 118, 121, 122, 123, 124], "unlbld_indic": 96, "re": [97, 98, 99, 100, 101, 103, 118], "grid": 97, "resolut": [97, 98, 99, 100, 101, 103], "xmin": [97, 98, 99, 100, 102, 103], "ymin": [97, 98, 99, 100, 102, 103], "xmax": [97, 98, 99, 100, 102, 103], "ymax": [97, 98, 99, 100, 102, 103], "21": [97, 98, 99, 100, 103], "x_mesh": 97, "y_mesh": 97, "mesh_inst": 97, "q": [98, 103, 115, 116, 117, 118, 119, 124], "n_annotators_to_plot": [98, 102], "replace_nan": [98, 99, 103], "mesh": [98, 103], "ignore_undefined_query_param": [98, 103], "feature_bound": [98, 99, 100, 102, 103, 115, 120], "area": [98, 99, 100, 102, 103, 116, 119], "boundari": [98, 99, 100, 101, 102, 103, 115, 120, 124], "matplotlib": [98, 99, 100, 101, 102, 103, 115, 116, 117, 119, 120, 121, 122, 123], "contour_dict": [98, 99, 103], "contour": [98, 99, 100, 103, 124], "plot_annot": 98, "remain": [98, 103], "plt": [99, 115, 116, 117, 119, 120, 121, 122, 123], "gca": 99, "boundary_dict": 100, "75": [100, 117], "cmap": [100, 102, 115, 119], "coolwarm": [100, 102], "confidence_dict": 100, "open": 100, "stand": 100, "color": [100, 101, 102, 116, 120], "colormap": [100, 101, 102], "coolwarm_r": [100, 102], "t_x": 101, "plot_step": 101, "pred_list": 101, "newest": 101, "unlabeled_color": 102, "grei": 102, "linewidth": 102, "plot_cand_highlight": 102, "unlabl": 102, "blend": 102, "backend": 102, "width": [102, 116, 118], "higlight": 102, "overview": [104, 117], "capabl": 104, "download": 108, "code": [108, 124], "sphinx_gallery_examples_python": 108, "zip": [108, 117, 121, 123, 124], "galleri": [108, 125], "00": [110, 111, 113, 125], "000": [110, 111, 113, 125], "sphinx_gallery_exampl": [110, 111, 113], "mem": [110, 111, 113, 125], "mb": [110, 111, 113, 125], "checkbox": 114, "tabl": 114, "purpos": [115, 116, 119], "tutori": [115, 116, 118, 119, 124], "eas": 115, "frame": 115, "friendli": 115, "show": [115, 116, 117, 118, 119, 120, 121, 122, 123], "exemplari": 115, "mlp": [115, 116, 117, 118, 119, 120, 121, 123], "pyplot": [115, 116, 117, 119, 120, 121, 122, 123], "make_classif": 115, "sklearnclassifi": [115, 116, 118, 119, 123, 124], "uncertaintysampl": [115, 116, 118, 119, 122, 124], "unlabeled_indic": [115, 116, 118, 124], "labeled_indic": [115, 118], "visual": [115, 120, 124], "plot_decision_boundari": [115, 120], "plot_util": 115, "rcparam": [115, 116, 117, 119, 120, 121, 123], "figur": [115, 116, 117, 119, 120, 121, 123], "facecolor": [115, 116, 117, 119, 120, 121, 123], "white": [115, 116, 117, 119, 120, 121, 123], "filterwarn": [115, 116, 117, 118, 119], "cluster": [115, 119], "practic": [115, 119], "howev": [115, 119], "oracl": [115, 119], "n_redund": 115, "scatter": [115, 117, 119, 120, 121, 123], "jet": [115, 119], "xlabel": [115, 116, 119, 121, 123], "ylabel": [115, 116, 119, 121, 123], "introduc": 115, "shown": 115, "begin": 115, "fill_valu": [115, 116, 118, 119, 120, 122, 124], "easi": 115, "cope": 115, "central": 115, "uncertain": 115, "42": [115, 118], "query_idx": [115, 116, 119, 120, 124], "continu": 115, "6": [115, 117, 118, 119, 120, 121, 122, 123], "unlbld_idx": 115, "lbld_idx": 115, "grai": 115, "68": 115, "95": 115, "94": 115, "brief": 116, "pytorch": 116, "torch": 116, "deepcopi": 116, "discriminativ": 116, "call_func": [116, 117, 118, 119, 121, 122, 123], "fetch_openml": 116, "votingclassifi": 116, "model_select": [116, 118, 119], "train_test_split": 116, "standardscal": [116, 118], "neuralnetclassifi": 116, "nn": 116, "torchvis": 116, "fontsiz": [116, 117, 120], "12": 116, "manual_se": 116, "cuda": 116, "devic": 116, "is_avail": 116, "cpu": 116, "simplic": [116, 121, 123], "mnist": 116, "28": 116, "28px": 116, "handwritten": [116, 118], "recogn": 116, "mnist_784": 116, "return_x_i": 116, "as_fram": 116, "fig": [116, 117, 120], "subplot": [116, 117, 120], "figsiz": [116, 117, 120], "nrow": 116, "ncol": 116, "set_titl": [116, 117, 120], "imshow": 116, "reshap": [116, 117, 118, 119, 121, 122, 123, 124], "n_channel": 116, "height": 116, "astyp": 116, "float32": 116, "int64": 116, "66": 116, "split": [116, 119, 121, 123, 124], "x_train": [116, 119, 121, 122, 123, 124], "x_test": [116, 117, 119], "y_train": [116, 119, 121, 122, 123, 124], "y_test": [116, 119], "train_siz": 116, "rotat": 116, "scale": 116, "basic": [116, 117, 118], "pad": 116, "vertic": 116, "horizont": 116, "flip": 116, "translat": 116, "crop": 116, "darken": 116, "brighten": 116, "modif": 116, "grayscal": 116, "contrast": 116, "nois": [116, 117], "eras": 116, "look": [116, 117, 118], "tensorflow": 116, "visit": 116, "And": 116, "compos": 116, "randomaffin": 116, "degre": 116, "randomperspect": 116, "distortion_scal": 116, "gaussianblur": 116, "kernel_s": 116, "sigma": 116, "30": [116, 117, 121, 122, 123], "x_aug": 116, "from_numpi": 116, "cnn": 116, "ten": 116, "classifiermodul": 116, "def": [116, 117, 118, 119, 121, 122, 123], "__init__": [116, 118], "dropout": 116, "conv1": 116, "conv2d": 116, "conv2": 116, "64": 116, "conv2_drop": 116, "dropout2d": 116, "fc1": 116, "1600": 116, "fc2": 116, "fc1_drop": 116, "no_grad": 116, "relu": 116, "max_pool2d": 116, "flatten": [116, 117], "softmax": 116, "net": 116, "module__n_class": 116, "max_epoch": 116, "16": 116, "lr": 116, "verbos": 116, "sgd": 116, "optimizer__momentum": 116, "optimizer__weight_decai": 116, "3e": 116, "train_split": 116, "ensemble_init": 116, "four": [116, 117], "setup": 116, "n_sub_set": 116, "qs_dict": 116, "acc_dict": 116, "qs_name": [116, 119], "item": [116, 118, 121, 122, 123], "full_lik": [116, 117], "warm": 116, "argwher": 116, "acc": 116, "ulbd_indic": 116, "choic": 116, "curv": [116, 119, 124], "aulc": 116, "arang": [116, 119, 122], "xtick": 116, "ytick": 116, "loc": [116, 119], "right": [116, 117, 119, 121, 123], "notebook": [117, 118, 120, 121, 122, 123], "give": [117, 120], "greedysamplingx": 117, "greedysamplingtarget": 117, "kldivergencemaxim": 117, "baggingregressor": 117, "sklearnregressor": 117, "is_label": [117, 118], "dimension": [117, 120], "n_iter": 117, "uniform_rv": 117, "pos_arg": 117, "key_word_arg": 117, "rv": 117, "norm_rv": 117, "lambda": [117, 119, 120, 121, 122, 123], "concaten": [117, 122], "40": 117, "complex_func": 117, "high_nois": 117, "80": 117, "high_density_diff": 117, "true_funct": 117, "linspac": [117, 120], "num": [117, 120], "200": [117, 124], "want": [117, 118, 119, 120, 121, 122, 123], "lightgreen": 117, "lightblu": 117, "orang": 117, "red": 117, "small": 117, "behavior": 117, "cell": [117, 118, 121, 122, 123], "quiet": 117, "spike": 117, "evenli": 117, "strong": 117, "tendenc": 117, "steep": 117, "monoton": 117, "sinc": [117, 121, 122, 123], "slowli": 117, "gain": 117, "happen": 117, "learner": 117, "seem": 117, "anoth": [117, 119, 121, 123], "qs_": 117, "n_integration_sampl": 117, "y_": 117, "utilities_test": 117, "old_is_lbld": 117, "is_lbld": 117, "ax_t": 117, "twinx": 117, "green": [117, 120], "y_std": 117, "__class__": 117, "__name__": 117, "fontdict": 117, "semi": 118, "ipyannot": 118, "superintend": 118, "familiar": 118, "try": 118, "ll": 118, "uncom": 118, "wish": 118, "front": 118, "jupyt": 118, "nbextens": 118, "math": 118, "cross_val_scor": 118, "load_digit": 118, "neural_network": 118, "mlpclassifi": 118, "ipywidget": 118, "classlabel": 118, "At": 118, "datalabel": 118, "overwrit": 118, "_annotation_iter": 118, "_undo": 118, "labelling_widget": 118, "submissionwidgetmixin": 118, "query_dict": 118, "past": 118, "shape_queri": 118, "shape_clf": 118, "entir": 118, "eval_method": 118, "y_eval": 118, "clf_eval": 118, "attributeerror": 118, "ceil": 118, "model_perform": 118, "top_bar": 118, "hbox": 118, "progressbar": 118, "layout": 118, "justify_cont": 118, "children": 118, "loop": [118, 120, 121, 122, 123], "_begin_annot": 118, "bar_styl": 118, "undo": 118, "delet": 118, "_render_hold_messag": 118, "load": 118, "yield": 118, "undon": 118, "pop": 118, "break": 118, "brake": 118, "_render_finish": 118, "_annotation_loop": 118, "send": 118, "ve": 118, "invok": 118, "startswith": 118, "enough": 118, "ok": 118, "cv": 118, "error_scor": 118, "n_split": [118, 119], "3f": 118, "digit": 118, "8x8": 118, "exchang": 118, "pipe": 118, "scaler": 118, "image_s": 118, "data_label": 118, "abov": 118, "produc": 118, "comparison": 119, "realiz": 119, "fold": 119, "focu": 119, "cleanli": 119, "separ": [119, 121, 122, 123], "repetit": [119, 121, 122, 123], "proper": 119, "gaussian_process": [119, 124], "gaussianprocessclassifi": [119, 124], "make_blob": [119, 120, 121, 122, 123, 124], "stratifiedkfold": 119, "kfold": 119, "guarante": [119, 121, 122, 123], "helper": 119, "mind": [119, 124], "master_random_st": 119, "gen_se": 119, "randint": [119, 121, 122, 123], "31": [119, 121, 122, 123], "gen_random_st": 119, "n_centers_per_class": 119, "center": [119, 120, 121, 122, 123, 124], "400": 119, "creation": 119, "factori": [119, 121, 122, 123], "classifier_factory_funct": 119, "query_strategy_factory_funct": 119, "create_classifi": 119, "create_query_strategi": 119, "n_rep": 119, "n_fold": 119, "stratifi": 119, "use_stratifi": 119, "classifier_nam": 119, "query_strategy_nam": [119, 121, 122, 123], "record": 119, "kfold_class": 119, "clf_name": [119, 122], "i_rep": 119, "kf": 119, "i_fold": 119, "train_idx": 119, "test_idx": 119, "enumer": [119, 120, 121], "y_train_tru": 119, "rel": 119, "bar": 119, "reshaped_result": 119, "errorbar_mean": 119, "errorbar_std": 119, "errorbar": 119, "4f": 119, "introduct": 120, "plot_annotator_util": 120, "marker_s": 120, "suppos": 120, "omnisci": 120, "tight_layout": 120, "circl": 120, "rng": 120, "default_rng": 120, "y_annot": 120, "y_nois": 120, "binomi": 120, "is_tru": 120, "marker": 120, "singleannotwrapp": 120, "achiev": 120, "sa_q": 120, "ma_q": 120, "5th": 120, "14th": 120, "20th": 120, "satur": 120, "13": 120, "19": 120, "ma_qs_arg_dict": 120, "showcas": [121, 123], "collect": [121, 123], "dequ": [121, 123], "ndimag": [121, 122, 123], "gaussian_filter1d": [121, 122, 123], "streamrandomsampl": [121, 123], "periodicsampl": [121, 123], "streamprobabilist": [121, 123], "experi": [121, 122, 123], "construct": [121, 122, 123], "stream_length": [121, 122, 123], "training_s": [121, 122, 123], "init_train_length": [121, 122, 123], "5000": [121, 123], "dedic": [121, 123], "explicitli": [121, 122, 123], "get_randomse": [121, 122, 123], "block": [121, 122, 123], "locat": [121, 122, 123], "denot": [121, 122, 123, 124], "suffix": [121, 122, 123], "_init": [121, 122, 123], "_stream": [121, 122, 123], "prequenti": [121, 122, 123], "y_center": [121, 122, 123], "x_init": [121, 122, 123], "y_init": [121, 122, 123], "x_stream": [121, 122, 123], "y_stream": [121, 122, 123], "affect": [121, 122, 123], "managag": [121, 123], "sake": [121, 123], "clf_factori": [121, 122, 123], "dbalstream": [121, 123], "cogdqsran": [121, 123], "cogdqsfixun": [121, 123], "cogdqsvarun": [121, 123], "cogdqsranvarun": [121, 123], "goe": [121, 122, 123], "lastli": [121, 122, 123], "maxlen": [121, 123], "correct_classif": [121, 122, 123, 124], "x_t": [121, 123, 124], "y_t": [121, 123, 124], "y_cand": [121, 122, 123, 124], "sampled_indic": [121, 122, 123, 124], "avg": [121, 122, 123], "7642": 121, "498": [121, 123], "7764": 121, "500": [121, 123], "7416": 121, "522": 121, "7828": 121, "7834": 121, "521": [121, 123], "7966": 121, "environ": 122, "incom": 122, "costembedding": 122, "epistemicuncertaintysampl": 122, "stream_batch_s": 122, "query_batch_s": 122, "10000": 122, "clf_dict": 122, "index_cand": 122, "y_cand_tru": 122, "x_train_arrai": 122, "acquis": [122, 123], "smooth": 122, "8281": 122, "2000": 122, "7961": 122, "8404": 122, "8385": 122, "8186": 122, "lt": 122, "0x23bd6612700": 122, "gt": 122, "slidingwindowclassifi": 123, "river2sklclassifi": 123, "forest": 123, "arfclassifi": 123, "biqf": 123, "7188": 123, "7338": 123, "7612": 123, "523": 123, "7474": 123, "7312": 123, "7674": 123, "501": 123, "often": 124, "wherea": 124, "gather": 124, "difficult": 124, "consum": 124, "expens": 124, "fewer": 124, "2020": 124, "kassel": 124, "claus": 124, "bsd": 124, "licenc": 124, "easiest": 124, "broad": 124, "section": 124, "offer": 124, "skorch": [124, 127], "studi": [124, 127], "river": [124, 127], "straightforward": 124, "snippet": 124, "difficulti": 124, "abil": 124, "greenish": 124, "accross": 124, "orient": 124, "incl": 124, "find": 124, "articl": 124, "skactiveml2021": 124, "ibrari": 124, "oolbox": 124, "ctive": 124, "earn": 124, "lgorithm": 124, "marek": 124, "herd": 124, "tuan": 124, "pham": 124, "minh": 124, "benz": 124, "pascal": 124, "mergard": 124, "atal": 124, "roghman": 124, "sandrock": 124, "bernhard": 124, "doi": 124, "20944": 124, "preprints202103": 124, "0194": 124, "v1": 124, "year": 124, "url": 124, "throughout": 126}, "objects": {"": [[104, 0, 0, "-", "skactiveml"]], "skactiveml": [[104, 0, 0, "-", "base"], [104, 0, 0, "-", "classifier"], [104, 0, 0, "-", "exceptions"], [104, 0, 0, "-", "pool"], [104, 0, 0, "-", "stream"], [104, 0, 0, "-", "utils"], [104, 0, 0, "-", "visualization"]], "skactiveml.base": [[4, 1, 1, "", "AnnotatorModelMixin"], [5, 1, 1, "", "BudgetManager"], [6, 1, 1, "", "ClassFrequencyEstimator"], [7, 1, 1, "", "MultiAnnotatorPoolQueryStrategy"], [8, 1, 1, "", "ProbabilisticRegressor"], [9, 1, 1, "", "QueryStrategy"], [10, 1, 1, "", "SingleAnnotatorPoolQueryStrategy"], [11, 1, 1, "", "SingleAnnotatorStreamQueryStrategy"], [12, 1, 1, "", "SkactivemlClassifier"], [13, 1, 1, "", "SkactivemlRegressor"]], "skactiveml.base.AnnotatorModelMixin": [[4, 2, 1, "", "predict_annotator_perf"]], "skactiveml.base.BudgetManager": [[5, 2, 1, "", "get_metadata_routing"], [5, 2, 1, "", "get_params"], [5, 2, 1, "", "query_by_utility"], [5, 2, 1, "", "set_params"], [5, 2, 1, "", "update"]], "skactiveml.base.ClassFrequencyEstimator": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "get_metadata_routing"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_freq"], [6, 2, 1, "", "predict_proba"], [6, 2, 1, "", "score"], [6, 2, 1, "", "set_fit_request"], [6, 2, 1, "", "set_params"], [6, 2, 1, "", "set_score_request"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, 2, 1, "", "get_metadata_routing"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "query"], [7, 2, 1, "", "set_params"]], "skactiveml.base.ProbabilisticRegressor": [[8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_target_distribution"], [8, 2, 1, "", "sample_y"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_predict_request"], [8, 2, 1, "", "set_score_request"]], "skactiveml.base.QueryStrategy": [[9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "query"], [9, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "query"], [10, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "query"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "update"]], "skactiveml.base.SkactivemlClassifier": [[12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "skactiveml.base.SkactivemlRegressor": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "skactiveml.classifier": [[14, 1, 1, "", "MixtureModelClassifier"], [15, 1, 1, "", "ParzenWindowClassifier"], [16, 1, 1, "", "SklearnClassifier"], [17, 1, 1, "", "SlidingWindowClassifier"], [104, 0, 0, "-", "multiannotator"]], "skactiveml.classifier.MixtureModelClassifier": [[14, 2, 1, "", "fit"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_freq"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, 3, 1, "", "METRICS"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_freq"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SklearnClassifier": [[16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "partial_fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_partial_fit_request"], [16, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_freq"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator": [[18, 1, 1, "", "AnnotatorEnsembleClassifier"], [19, 1, 1, "", "AnnotatorLogisticRegression"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 4, 1, "", "named_estimators"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_score_request"], [18, 3, 1, "", "steps"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, 2, 1, "", "fit"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_annotator_perf"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_score_request"]], "skactiveml.exceptions": [[20, 1, 1, "", "MappingError"]], "skactiveml.exceptions.MappingError": [[20, 3, 1, "", "args"], [20, 2, 1, "", "with_traceback"]], "skactiveml.pool": [[21, 1, 1, "", "BatchBALD"], [22, 1, 1, "", "CostEmbeddingAL"], [23, 1, 1, "", "DiscriminativeAL"], [24, 1, 1, "", "EpistemicUncertaintySampling"], [25, 1, 1, "", "ExpectedModelChangeMaximization"], [26, 1, 1, "", "ExpectedModelOutputChange"], [27, 1, 1, "", "ExpectedModelVarianceReduction"], [28, 1, 1, "", "FourDs"], [29, 1, 1, "", "GreedyBALD"], [30, 1, 1, "", "GreedySamplingTarget"], [31, 1, 1, "", "GreedySamplingX"], [32, 1, 1, "", "KLDivergenceMaximization"], [33, 1, 1, "", "MonteCarloEER"], [34, 1, 1, "", "ProbabilisticAL"], [35, 1, 1, "", "QueryByCommittee"], [36, 1, 1, "", "Quire"], [37, 1, 1, "", "RandomSampling"], [38, 1, 1, "", "UncertaintySampling"], [39, 1, 1, "", "ValueOfInformationEER"], [40, 5, 1, "", "average_kl_divergence"], [41, 5, 1, "", "batch_bald"], [42, 5, 1, "", "cost_reduction"], [43, 5, 1, "", "expected_average_precision"], [104, 0, 0, "-", "multiannotator"], [47, 5, 1, "", "uncertainty_scores"], [104, 0, 0, "-", "utils"], [49, 5, 1, "", "vote_entropy"]], "skactiveml.pool.BatchBALD": [[21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "query"], [21, 2, 1, "", "set_params"]], "skactiveml.pool.CostEmbeddingAL": [[22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "query"], [22, 2, 1, "", "set_params"]], "skactiveml.pool.DiscriminativeAL": [[23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "query"], [23, 2, 1, "", "set_params"]], "skactiveml.pool.EpistemicUncertaintySampling": [[24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "query"], [24, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "query"], [25, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelOutputChange": [[26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "query"], [26, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "query"], [27, 2, 1, "", "set_params"]], "skactiveml.pool.FourDs": [[28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "query"], [28, 2, 1, "", "set_params"]], "skactiveml.pool.GreedyBALD": [[29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "query"], [29, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingTarget": [[30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "query"], [30, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingX": [[31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "query"], [31, 2, 1, "", "set_params"]], "skactiveml.pool.KLDivergenceMaximization": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "query"], [32, 2, 1, "", "set_params"]], "skactiveml.pool.MonteCarloEER": [[33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "query"], [33, 2, 1, "", "set_params"]], "skactiveml.pool.ProbabilisticAL": [[34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "query"], [34, 2, 1, "", "set_params"]], "skactiveml.pool.QueryByCommittee": [[35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "query"], [35, 2, 1, "", "set_params"]], "skactiveml.pool.Quire": [[36, 3, 1, "", "METRICS"], [36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "query"], [36, 2, 1, "", "set_params"]], "skactiveml.pool.RandomSampling": [[37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "query"], [37, 2, 1, "", "set_params"]], "skactiveml.pool.UncertaintySampling": [[38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "query"], [38, 2, 1, "", "set_params"]], "skactiveml.pool.ValueOfInformationEER": [[39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "query"], [39, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator": [[44, 1, 1, "", "IntervalEstimationAnnotModel"], [45, 1, 1, "", "IntervalEstimationThreshold"], [46, 1, 1, "", "SingleAnnotatorWrapper"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[44, 2, 1, "", "fit"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "predict_annotator_perf"], [44, 2, 1, "", "set_fit_request"], [44, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "query"], [45, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "query"], [46, 2, 1, "", "set_params"]], "skactiveml.pool.utils": [[48, 1, 1, "", "IndexClassifierWrapper"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[48, 2, 1, "", "fit"], [48, 2, 1, "", "is_fitted"], [48, 2, 1, "", "partial_fit"], [48, 2, 1, "", "precompute"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_freq"], [48, 2, 1, "", "predict_proba"]], "skactiveml.stream": [[50, 1, 1, "", "CognitiveDualQueryStrategy"], [51, 1, 1, "", "CognitiveDualQueryStrategyFixUn"], [52, 1, 1, "", "CognitiveDualQueryStrategyRan"], [53, 1, 1, "", "CognitiveDualQueryStrategyRanVarUn"], [54, 1, 1, "", "CognitiveDualQueryStrategyVarUn"], [55, 1, 1, "", "FixedUncertainty"], [56, 1, 1, "", "PeriodicSampling"], [57, 1, 1, "", "RandomVariableUncertainty"], [58, 1, 1, "", "Split"], [59, 1, 1, "", "StreamDensityBasedAL"], [60, 1, 1, "", "StreamProbabilisticAL"], [61, 1, 1, "", "StreamRandomSampling"], [62, 1, 1, "", "VariableUncertainty"], [104, 0, 0, "-", "budgetmanager"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "query"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "query"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "query"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "query"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "query"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "update"]], "skactiveml.stream.FixedUncertainty": [[55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "query"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "update"]], "skactiveml.stream.PeriodicSampling": [[56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "query"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "update"]], "skactiveml.stream.RandomVariableUncertainty": [[57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "query"], [57, 2, 1, "", "set_params"], [57, 2, 1, "", "update"]], "skactiveml.stream.Split": [[58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "query"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "update"]], "skactiveml.stream.StreamDensityBasedAL": [[59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 2, 1, "", "query"], [59, 2, 1, "", "set_params"], [59, 2, 1, "", "update"]], "skactiveml.stream.StreamProbabilisticAL": [[60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 2, 1, "", "query"], [60, 2, 1, "", "set_params"], [60, 2, 1, "", "update"]], "skactiveml.stream.StreamRandomSampling": [[61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 2, 1, "", "query"], [61, 2, 1, "", "set_params"], [61, 2, 1, "", "update"]], "skactiveml.stream.VariableUncertainty": [[62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "query"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager": [[63, 1, 1, "", "BalancedIncrementalQuantileFilter"], [64, 1, 1, "", "DensityBasedSplitBudgetManager"], [65, 1, 1, "", "EstimatedBudgetZliobaite"], [66, 1, 1, "", "FixedUncertaintyBudgetManager"], [67, 1, 1, "", "RandomBudgetManager"], [68, 1, 1, "", "RandomVariableUncertaintyBudgetManager"], [69, 1, 1, "", "SplitBudgetManager"], [70, 1, 1, "", "VariableUncertaintyBudgetManager"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "query_by_utility"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "query_by_utility"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "query_by_utility"], [65, 2, 1, "", "set_params"], [65, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "query_by_utility"], [66, 2, 1, "", "set_params"], [66, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "query_by_utility"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "query_by_utility"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[69, 2, 1, "", "get_metadata_routing"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "query_by_utility"], [69, 2, 1, "", "set_params"], [69, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[70, 2, 1, "", "get_metadata_routing"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "query_by_utility"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "update"]], "skactiveml.utils": [[71, 1, 1, "", "ExtLabelEncoder"], [72, 5, 1, "", "_check_callable"], [73, 5, 1, "", "call_func"], [74, 5, 1, "", "check_X_y"], [75, 5, 1, "", "check_bound"], [76, 5, 1, "", "check_budget_manager"], [77, 5, 1, "", "check_class_prior"], [78, 5, 1, "", "check_classes"], [79, 5, 1, "", "check_classifier_params"], [80, 5, 1, "", "check_cost_matrix"], [81, 5, 1, "", "check_equal_missing_label"], [82, 5, 1, "", "check_indices"], [83, 5, 1, "", "check_missing_label"], [84, 5, 1, "", "check_random_state"], [85, 5, 1, "", "check_scalar"], [86, 5, 1, "", "check_type"], [87, 5, 1, "", "compute_vote_vectors"], [88, 5, 1, "", "ext_confusion_matrix"], [89, 5, 1, "", "is_labeled"], [90, 5, 1, "", "is_unlabeled"], [91, 5, 1, "", "labeled_indices"], [92, 5, 1, "", "majority_vote"], [93, 5, 1, "", "rand_argmax"], [94, 5, 1, "", "rand_argmin"], [95, 5, 1, "", "simple_batch"], [96, 5, 1, "", "unlabeled_indices"]], "skactiveml.utils.ExtLabelEncoder": [[71, 2, 1, "", "fit"], [71, 2, 1, "", "fit_transform"], [71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "inverse_transform"], [71, 2, 1, "", "set_params"], [71, 2, 1, "", "transform"]], "skactiveml.visualization": [[97, 5, 1, "", "mesh"], [98, 5, 1, "", "plot_annotator_utilities"], [99, 5, 1, "", "plot_contour_for_samples"], [100, 5, 1, "", "plot_decision_boundary"], [101, 5, 1, "", "plot_stream_decision_boundary"], [102, 5, 1, "", "plot_stream_training_data"], [103, 5, 1, "", "plot_utilities"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"develop": 0, "guid": 0, "overview": [0, 114, 124], "thank": 0, "you": 0, "contributor": 0, "get": [0, 115, 117, 120, 121], "help": 0, "roadmap": 0, "start": [0, 115, 117, 118, 120, 121, 122, 123], "setup": 0, "environ": 0, "exampl": [0, 1, 105, 108, 124], "With": [0, 122, 123], "miniconda": 0, "instal": [0, 118, 124], "depend": 0, "maco": 0, "homebrew": 0, "contribut": 0, "code": 0, "gener": [0, 115, 117, 119, 120, 121, 122, 123], "convent": 0, "c3": 0, "cycl": [0, 115, 121, 122, 123], "pull": 0, "request": 0, "queri": [0, 115, 119, 121, 122, 123, 124], "strategi": [0, 2, 3, 106, 107, 108, 109, 112, 114, 115, 119, 121, 122, 123, 124], "singl": 0, "annot": [0, 118, 120], "pool": [0, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 104, 106, 108, 109, 115, 116, 117, 119, 120, 122, 124], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 104, 106, 107, 108, 109, 112, 115, 116, 117, 119, 120, 121, 123, 124], "__init__": 0, "method": 0, "advic": 0, "test": 0, "stream": [0, 3, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104, 107, 108, 112, 121, 122, 123, 124], "updat": 0, "budget_manag": 0, "query_by_util": 0, "work": 0, "multi": [0, 120], "classifi": [0, 14, 15, 16, 17, 18, 19, 104], "init": 0, "fit": 0, "predict_proba": 0, "predict": 0, "score": 0, "regressor": 0, "model": [0, 119], "predict_annotator_perf": 0, "coverag": 0, "document": [0, 124], "guidelin": 0, "write": 0, "build": 0, "issu": 0, "track": 0, "check": 0, "If": 0, "A": 0, "bug": 0, "alreadi": 0, "exist": 0, "report": 0, "an": 0, "al": [2, 3, 106, 107, 108, 109, 112], "skactiveml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 126], "annotatormodelmixin": 4, "budgetmanag": [5, 63, 64, 65, 66, 67, 68, 69, 70, 104], "classfrequencyestim": 6, "multiannotatorpoolquerystrategi": 7, "probabilisticregressor": 8, "querystrategi": 9, "singleannotatorpoolquerystrategi": 10, "singleannotatorstreamquerystrategi": 11, "skactivemlclassifi": 12, "skactivemlregressor": 13, "paramet": [13, 119, 121, 122, 123], "mixturemodelclassifi": 14, "parzenwindowclassifi": 15, "sklearnclassifi": 16, "slidingwindowclassifi": 17, "multiannot": [18, 19, 44, 45, 46, 104], "annotatorensembleclassifi": 18, "annotatorlogisticregress": 19, "except": [20, 104], "mappingerror": 20, "batchbald": 21, "costembedding": 22, "discriminativ": 23, "epistemicuncertaintysampl": 24, "expectedmodelchangemaxim": 25, "expectedmodeloutputchang": 26, "expectedmodelvariancereduct": 27, "fourd": 28, "greedybald": 29, "greedysamplingtarget": 30, "greedysamplingx": 31, "kldivergencemaxim": 32, "montecarlo": 33, "probabilist": 34, "querybycommitte": 35, "quir": 36, "randomsampl": 37, "uncertaintysampl": 38, "valueofinformation": 39, "average_kl_diverg": 40, "batch_bald": 41, "cost_reduct": 42, "expected_average_precis": 43, "intervalestimationannotmodel": 44, "intervalestimationthreshold": 45, "singleannotatorwrapp": 46, "uncertainty_scor": 47, "util": [48, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 104, 126], "indexclassifierwrapp": 48, "vote_entropi": 49, "cognitivedualquerystrategi": 50, "cognitivedualquerystrategyfixun": 51, "cognitivedualquerystrategyran": 52, "cognitivedualquerystrategyranvarun": 53, "cognitivedualquerystrategyvarun": 54, "fixeduncertainti": 55, "periodicsampl": 56, "randomvariableuncertainti": 57, "split": 58, "streamdensitybased": 59, "streamprobabilist": 60, "streamrandomsampl": 61, "variableuncertainti": 62, "balancedincrementalquantilefilt": 63, "densitybasedsplitbudgetmanag": 64, "estimatedbudgetzliobait": 65, "fixeduncertaintybudgetmanag": 66, "randombudgetmanag": 67, "randomvariableuncertaintybudgetmanag": 68, "splitbudgetmanag": 69, "variableuncertaintybudgetmanag": 70, "extlabelencod": 71, "_check_cal": 72, "call_func": 73, "check_x_i": 74, "check_bound": 75, "check_budget_manag": 76, "check_class_prior": 77, "check_class": 78, "check_classifier_param": 79, "check_cost_matrix": 80, "check_equal_missing_label": 81, "check_indic": 82, "check_missing_label": 83, "check_random_st": 84, "check_scalar": 85, "check_typ": 86, "compute_vote_vector": 87, "ext_confusion_matrix": 88, "is_label": 89, "is_unlabel": 90, "labeled_indic": 91, "majority_vot": 92, "rand_argmax": 93, "rand_argmin": 94, "simple_batch": 95, "unlabeled_indic": 96, "visual": [97, 98, 99, 100, 101, 102, 103, 104, 116], "mesh": 97, "plot_annotator_util": 98, "plot_contour_for_sampl": 99, "plot_decision_boundari": 100, "plot_stream_decision_boundari": 101, "plot_stream_training_data": 102, "plot_util": 103, "api": 104, "refer": [104, 114], "class": [104, 118], "function": 104, "comput": [110, 111, 113, 125], "time": [110, 111, 113, 125], "activ": [115, 116, 117, 119, 120, 121, 122, 123, 124], "learn": [115, 116, 117, 119, 120, 121, 122, 123, 124], "data": [115, 116, 117, 119, 120, 121, 122, 123], "set": [115, 116, 117, 119, 120, 121, 122, 123], "classif": [115, 116, 119, 120], "deep": 116, "scikit": [116, 124], "activeml": [116, 124], "skorch": 116, "load": 116, "digit": 116, "augment": 116, "convolut": 116, "neural": 116, "network": 116, "ensembl": 116, "result": [116, 119], "regress": 117, "sampl": 118, "configur": 118, "The": 118, "widget": 118, "creat": 118, "dataset": 118, "process": 118, "simpl": 119, "evalu": 119, "studi": 119, "random": [119, 121, 122, 123], "seed": [119, 121, 122, 123], "manag": 119, "experi": 119, "loop": 119, "plot": 119, "initi": [121, 122, 123], "And": [121, 122], "batch": 122, "river": 123, "welcom": 124, "": 124, "user": 124, "cite": 124, "indic": 124, "tabl": 124, "missing_label": 126, "tutori": 127}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Developer Guide": [[0, "developer-guide"]], "Overview": [[0, "overview"]], "Thank you, contributors!": [[0, "thank-you-contributors"]], "Getting Help": [[0, "getting-help"]], "Roadmap": [[0, "roadmap"]], "Get Started": [[0, "get-started"]], "Setup Development Environment": [[0, "setup-development-environment"]], "Example With miniconda": [[0, "example-with-miniconda"]], "Install Dependencies": [[0, "install-dependencies"]], "Example with MacOS (Homebrew)": [[0, "example-with-macos-homebrew"]], "Contributing Code": [[0, "contributing-code"]], "General Coding Conventions": [[0, "general-coding-conventions"]], "Example for C3 (Code Contribution Cycle) and Pull Requests": [[0, "example-for-c3-code-contribution-cycle-and-pull-requests"]], "Query Strategies": [[0, "query-strategies"]], "Single-annotator Pool-based Query Strategies": [[0, "single-annotator-pool-based-query-strategies"]], "General": [[0, "general"], [0, "general-2"]], "__init__ method": [[0, "init-method"]], "query method": [[0, "query-method"], [0, "query-method-2"], [0, "query-method-3"]], "General advice": [[0, "general-advice"], [0, "general-advice-2"], [0, "general-advice-3"], [0, "general-advice-6"], [0, "general-advice-7"], [0, "general-advice-8"], [0, "general-advice-9"], [0, "general-advice-10"], [0, "general-advice-11"], [0, "general-advice-12"], [0, "general-advice-13"], [0, "general-advice-14"]], "Testing": [[0, "testing"], [0, "testing-2"], [0, "id7"], [0, "testing-3"], [0, "testing-4"], [0, "testing-5"]], "Single-annotator Stream-based Query Strategies": [[0, "single-annotator-stream-based-query-strategies"]], "update method": [[0, "update-method"], [0, "update-2"]], "General advice for the budget_manager": [[0, "general-advice-for-the-budget-manager"]], "query_by_utilities method": [[0, "query-by-utilities-method"]], "General advice for working with a budget_manager:": [[0, "general-advice-for-working-with-a-budget-manager"]], "Multi-Annotator Pool-based Query Strategies": [[0, "multi-annotator-pool-based-query-strategies"]], "Classifiers": [[0, "classifiers"]], "init method": [[0, "init-2"], [0, "init-3"]], "fit method": [[0, "fit-method"], [0, "fit-2"]], "predict_proba method": [[0, "predict-proba-method"]], "predict method": [[0, "predict-method"], [0, "predict-2"]], "score method": [[0, "score-method"], [0, "score-2"]], "Regressors": [[0, "regressors"]], "Annotators Models": [[0, "annotators-models"]], "predict_annotator_perf method": [[0, "predict-annotator-perf-method"]], "Examples": [[0, "examples"], [1, "examples"], [105, "examples"], [108, "examples"], [124, "examples"]], "Testing and code coverage": [[0, "testing-and-code-coverage"]], "Documentation": [[0, "documentation"]], "Guidelines for writing documentation": [[0, "guidelines-for-writing-documentation"]], "Building the documentation": [[0, "building-the-documentation"]], "Issue Tracking": [[0, "issue-tracking"]], "Checking If A Bug Already Exists": [[0, "checking-if-a-bug-already-exists"]], "Reporting an issue": [[0, "reporting-an-issue"]], "Pool Based AL Strategies": [[2, "pool-based-al-strategies"], [106, "pool-based-al-strategies"], [108, "pool-based-al-strategies"], [109, "pool-based-al-strategies"]], "Stream Based AL Strategies": [[3, "stream-based-al-strategies"], [107, "stream-based-al-strategies"], [108, "stream-based-al-strategies"], [112, "stream-based-al-strategies"]], "skactiveml.base.AnnotatorModelMixin": [[4, "skactiveml-base-annotatormodelmixin"]], "skactiveml.base.BudgetManager": [[5, "skactiveml-base-budgetmanager"]], "skactiveml.base.ClassFrequencyEstimator": [[6, "skactiveml-base-classfrequencyestimator"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, "skactiveml-base-multiannotatorpoolquerystrategy"]], "skactiveml.base.ProbabilisticRegressor": [[8, "skactiveml-base-probabilisticregressor"]], "skactiveml.base.QueryStrategy": [[9, "skactiveml-base-querystrategy"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "skactiveml-base-singleannotatorpoolquerystrategy"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "skactiveml-base-singleannotatorstreamquerystrategy"]], "skactiveml.base.SkactivemlClassifier": [[12, "skactiveml-base-skactivemlclassifier"]], "skactiveml.base.SkactivemlRegressor": [[13, "skactiveml-base-skactivemlregressor"]], "Parameters": [[13, "parameters"]], "skactiveml.classifier.MixtureModelClassifier": [[14, "skactiveml-classifier-mixturemodelclassifier"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, "skactiveml-classifier-parzenwindowclassifier"]], "skactiveml.classifier.SklearnClassifier": [[16, "skactiveml-classifier-sklearnclassifier"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, "skactiveml-classifier-slidingwindowclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, "skactiveml-classifier-multiannotator-annotatorensembleclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, "skactiveml-classifier-multiannotator-annotatorlogisticregression"]], "skactiveml.exceptions.MappingError": [[20, "skactiveml-exceptions-mappingerror"]], "skactiveml.pool.BatchBALD": [[21, "skactiveml-pool-batchbald"]], "skactiveml.pool.CostEmbeddingAL": [[22, "skactiveml-pool-costembeddingal"]], "skactiveml.pool.DiscriminativeAL": [[23, "skactiveml-pool-discriminativeal"]], "skactiveml.pool.EpistemicUncertaintySampling": [[24, "skactiveml-pool-epistemicuncertaintysampling"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[25, "skactiveml-pool-expectedmodelchangemaximization"]], "skactiveml.pool.ExpectedModelOutputChange": [[26, "skactiveml-pool-expectedmodeloutputchange"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[27, "skactiveml-pool-expectedmodelvariancereduction"]], "skactiveml.pool.FourDs": [[28, "skactiveml-pool-fourds"]], "skactiveml.pool.GreedyBALD": [[29, "skactiveml-pool-greedybald"]], "skactiveml.pool.GreedySamplingTarget": [[30, "skactiveml-pool-greedysamplingtarget"]], "skactiveml.pool.GreedySamplingX": [[31, "skactiveml-pool-greedysamplingx"]], "skactiveml.pool.KLDivergenceMaximization": [[32, "skactiveml-pool-kldivergencemaximization"]], "skactiveml.pool.MonteCarloEER": [[33, "skactiveml-pool-montecarloeer"]], "skactiveml.pool.ProbabilisticAL": [[34, "skactiveml-pool-probabilistical"]], "skactiveml.pool.QueryByCommittee": [[35, "skactiveml-pool-querybycommittee"]], "skactiveml.pool.Quire": [[36, "skactiveml-pool-quire"]], "skactiveml.pool.RandomSampling": [[37, "skactiveml-pool-randomsampling"]], "skactiveml.pool.UncertaintySampling": [[38, "skactiveml-pool-uncertaintysampling"]], "skactiveml.pool.ValueOfInformationEER": [[39, "skactiveml-pool-valueofinformationeer"]], "skactiveml.pool.average_kl_divergence": [[40, "skactiveml-pool-average-kl-divergence"]], "skactiveml.pool.batch_bald": [[41, "skactiveml-pool-batch-bald"]], "skactiveml.pool.cost_reduction": [[42, "skactiveml-pool-cost-reduction"]], "skactiveml.pool.expected_average_precision": [[43, "skactiveml-pool-expected-average-precision"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[44, "skactiveml-pool-multiannotator-intervalestimationannotmodel"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[45, "skactiveml-pool-multiannotator-intervalestimationthreshold"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[46, "skactiveml-pool-multiannotator-singleannotatorwrapper"]], "skactiveml.pool.uncertainty_scores": [[47, "skactiveml-pool-uncertainty-scores"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[48, "skactiveml-pool-utils-indexclassifierwrapper"]], "skactiveml.pool.vote_entropy": [[49, "skactiveml-pool-vote-entropy"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[50, "skactiveml-stream-cognitivedualquerystrategy"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[51, "skactiveml-stream-cognitivedualquerystrategyfixun"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[52, "skactiveml-stream-cognitivedualquerystrategyran"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[53, "skactiveml-stream-cognitivedualquerystrategyranvarun"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[54, "skactiveml-stream-cognitivedualquerystrategyvarun"]], "skactiveml.stream.FixedUncertainty": [[55, "skactiveml-stream-fixeduncertainty"]], "skactiveml.stream.PeriodicSampling": [[56, "skactiveml-stream-periodicsampling"]], "skactiveml.stream.RandomVariableUncertainty": [[57, "skactiveml-stream-randomvariableuncertainty"]], "skactiveml.stream.Split": [[58, "skactiveml-stream-split"]], "skactiveml.stream.StreamDensityBasedAL": [[59, "skactiveml-stream-streamdensitybasedal"]], "skactiveml.stream.StreamProbabilisticAL": [[60, "skactiveml-stream-streamprobabilistical"]], "skactiveml.stream.StreamRandomSampling": [[61, "skactiveml-stream-streamrandomsampling"]], "skactiveml.stream.VariableUncertainty": [[62, "skactiveml-stream-variableuncertainty"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[63, "skactiveml-stream-budgetmanager-balancedincrementalquantilefilter"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[64, "skactiveml-stream-budgetmanager-densitybasedsplitbudgetmanager"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[65, "skactiveml-stream-budgetmanager-estimatedbudgetzliobaite"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[66, "skactiveml-stream-budgetmanager-fixeduncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[67, "skactiveml-stream-budgetmanager-randombudgetmanager"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[68, "skactiveml-stream-budgetmanager-randomvariableuncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[69, "skactiveml-stream-budgetmanager-splitbudgetmanager"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[70, "skactiveml-stream-budgetmanager-variableuncertaintybudgetmanager"]], "skactiveml.utils.ExtLabelEncoder": [[71, "skactiveml-utils-extlabelencoder"]], "skactiveml.utils._check_callable": [[72, "skactiveml-utils-check-callable"]], "skactiveml.utils.call_func": [[73, "skactiveml-utils-call-func"]], "skactiveml.utils.check_X_y": [[74, "skactiveml-utils-check-x-y"]], "skactiveml.utils.check_bound": [[75, "skactiveml-utils-check-bound"]], "skactiveml.utils.check_budget_manager": [[76, "skactiveml-utils-check-budget-manager"]], "skactiveml.utils.check_class_prior": [[77, "skactiveml-utils-check-class-prior"]], "skactiveml.utils.check_classes": [[78, "skactiveml-utils-check-classes"]], "skactiveml.utils.check_classifier_params": [[79, "skactiveml-utils-check-classifier-params"]], "skactiveml.utils.check_cost_matrix": [[80, "skactiveml-utils-check-cost-matrix"]], "skactiveml.utils.check_equal_missing_label": [[81, "skactiveml-utils-check-equal-missing-label"]], "skactiveml.utils.check_indices": [[82, "skactiveml-utils-check-indices"]], "skactiveml.utils.check_missing_label": [[83, "skactiveml-utils-check-missing-label"]], "skactiveml.utils.check_random_state": [[84, "skactiveml-utils-check-random-state"]], "skactiveml.utils.check_scalar": [[85, "skactiveml-utils-check-scalar"]], "skactiveml.utils.check_type": [[86, "skactiveml-utils-check-type"]], "skactiveml.utils.compute_vote_vectors": [[87, "skactiveml-utils-compute-vote-vectors"]], "skactiveml.utils.ext_confusion_matrix": [[88, "skactiveml-utils-ext-confusion-matrix"]], "skactiveml.utils.is_labeled": [[89, "skactiveml-utils-is-labeled"]], "skactiveml.utils.is_unlabeled": [[90, "skactiveml-utils-is-unlabeled"]], "skactiveml.utils.labeled_indices": [[91, "skactiveml-utils-labeled-indices"]], "skactiveml.utils.majority_vote": [[92, "skactiveml-utils-majority-vote"]], "skactiveml.utils.rand_argmax": [[93, "skactiveml-utils-rand-argmax"]], "skactiveml.utils.rand_argmin": [[94, "skactiveml-utils-rand-argmin"]], "skactiveml.utils.simple_batch": [[95, "skactiveml-utils-simple-batch"]], "skactiveml.utils.unlabeled_indices": [[96, "skactiveml-utils-unlabeled-indices"]], "skactiveml.visualization.mesh": [[97, "skactiveml-visualization-mesh"]], "skactiveml.visualization.plot_annotator_utilities": [[98, "skactiveml-visualization-plot-annotator-utilities"]], "skactiveml.visualization.plot_contour_for_samples": [[99, "skactiveml-visualization-plot-contour-for-samples"]], "skactiveml.visualization.plot_decision_boundary": [[100, "skactiveml-visualization-plot-decision-boundary"]], "skactiveml.visualization.plot_stream_decision_boundary": [[101, "skactiveml-visualization-plot-stream-decision-boundary"]], "skactiveml.visualization.plot_stream_training_data": [[102, "skactiveml-visualization-plot-stream-training-data"]], "skactiveml.visualization.plot_utilities": [[103, "skactiveml-visualization-plot-utilities"]], "API Reference": [[104, "api-reference"]], "skactiveml.base:": [[104, "module-skactiveml.base"]], "Classes": [[104, "classes"], [104, "id2"], [104, "id3"], [104, "id4"], [104, "id5"], [104, "id6"], [104, "id7"], [104, "id8"], [104, "id10"], [104, "id12"]], "skactiveml.pool:": [[104, "module-skactiveml.pool"]], "Functions": [[104, "functions"], [104, "id9"], [104, "id11"]], "skactiveml.pool.multiannotator:": [[104, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils:": [[104, "module-skactiveml.pool.utils"]], "skactiveml.stream:": [[104, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager:": [[104, "module-skactiveml.stream.budgetmanager"]], "skactiveml.classifier:": [[104, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator:": [[104, "module-skactiveml.classifier.multiannotator"]], "skactiveml.visualization:": [[104, "module-skactiveml.visualization"]], "skactiveml.utils:": [[104, "module-skactiveml.utils"]], "skactiveml.exceptions:": [[104, "module-skactiveml.exceptions"]], "Computation times": [[110, "computation-times"], [111, "computation-times"], [113, "computation-times"], [125, "computation-times"]], "Strategy Overview": [[114, "strategy-overview"]], "References": [[114, "references"]], "Pool-based Active Learning - Getting Started": [[115, "Pool-based-Active-Learning---Getting-Started"]], "Data Set Generation": [[115, "Data-Set-Generation"], [117, "Data-Set-Generation"], [119, "Data-Set-Generation"], [120, "Data-Set-Generation"]], "Classification": [[115, "Classification"]], "Query Strategy": [[115, "Query-Strategy"]], "Active Learning Cycle": [[115, "Active-Learning-Cycle"]], "Deep Pool-based Active Learning: Scikit-activeml with Skorch": [[116, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"]], "Loading Digit Data Set": [[116, "Loading-Digit-Data-Set"]], "Data Augmentation": [[116, "Data-Augmentation"]], "Convolutional Neural Network Ensemble": [[116, "Convolutional-Neural-Network-Ensemble"]], "Active Classification": [[116, "Active-Classification"], [120, "Active-Classification"]], "Visualize Results": [[116, "Visualize-Results"]], "Pool-based Active Learning for Regression - Getting Started": [[117, "Pool-based-Active-Learning-for-Regression---Getting-Started"]], "Active Regression": [[117, "Active-Regression"]], "Sample Annotating": [[118, "Sample-Annotating"]], "Installation and Configuration": [[118, "Installation-and-Configuration"]], "The Annotation Widget Class": [[118, "The-Annotation-Widget-Class"]], "Create Dataset": [[118, "Create-Dataset"]], "Create and Start Annotation Process": [[118, "Create-and-Start-Annotation-Process"]], "Pool-based Active Learning - Simple Evaluation Study": [[119, "Pool-based-Active-Learning---Simple-Evaluation-Study"]], "Random Seed Management": [[119, "Random-Seed-Management"]], "Classification Models and Query Strategies": [[119, "Classification-Models-and-Query-Strategies"]], "Experiment Parameters": [[119, "Experiment-Parameters"]], "Experiment Loop": [[119, "Experiment-Loop"]], "Result Plotting": [[119, "Result-Plotting"]], "Multi-annotator Pool-based Active Learning - Getting Started": [[120, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"]], "Stream-based Active Learning - Getting Started": [[121, "Stream-based-Active-Learning---Getting-Started"]], "Initialize Stream Parameters": [[121, "Initialize-Stream-Parameters"], [123, "Initialize-Stream-Parameters"]], "Random Seed Generation": [[121, "Random-Seed-Generation"], [122, "Random-Seed-Generation"], [123, "Random-Seed-Generation"]], "Generate And Initialize Data Set": [[121, "Generate-And-Initialize-Data-Set"], [122, "Generate-And-Initialize-Data-Set"]], "Initialize Query Strategies": [[121, "Initialize-Query-Strategies"], [122, "Initialize-Query-Strategies"], [123, "Initialize-Query-Strategies"]], "Start Active Learning Cycle": [[121, "Start-Active-Learning-Cycle"], [122, "Start-Active-Learning-Cycle"], [123, "Start-Active-Learning-Cycle"]], "Batch Stream Active Learning With Pool Query Strategies": [[122, "Batch-Stream-Active-Learning-With-Pool-Query-Strategies"]], "Initialize Batch Stream Parameters": [[122, "Initialize-Batch-Stream-Parameters"]], "Stream-based Active Learning With River": [[123, "Stream-based-Active-Learning-With-River"]], "Generate and Initialize Data Set": [[123, "Generate-and-Initialize-Data-Set"]], "Welcome to scikit-activeml\u2019s documentation!": [[124, "welcome-to-scikit-activeml-s-documentation"]], "User Installation": [[124, "user-installation"]], "Pool-based Active Learning": [[124, "pool-based-active-learning"]], "Stream-based Active Learning": [[124, "stream-based-active-learning"]], "Query Strategy Overview": [[124, "query-strategy-overview"]], "Citing": [[124, "citing"]], "Indices and tables": [[124, "indices-and-tables"]], "skactiveml.utils.MISSING_LABEL": [[126, "skactiveml-utils-missing-label"]], "Tutorials": [[127, "tutorials"]]}, "indexentries": {"annotatormodelmixin (class in skactiveml.base)": [[4, "skactiveml.base.AnnotatorModelMixin"]], "predict_annotator_perf() (skactiveml.base.annotatormodelmixin method)": [[4, "skactiveml.base.AnnotatorModelMixin.predict_annotator_perf"]], "budgetmanager (class in skactiveml.base)": [[5, "skactiveml.base.BudgetManager"]], "get_metadata_routing() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_metadata_routing"]], "get_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_params"]], "query_by_utility() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.query_by_utility"]], "set_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.set_params"]], "update() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.update"]], "classfrequencyestimator (class in skactiveml.base)": [[6, "skactiveml.base.ClassFrequencyEstimator"]], "fit() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.fit"]], "get_metadata_routing() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_metadata_routing"]], "get_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_params"]], "predict() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict"]], "predict_freq() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_freq"]], "predict_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_proba"]], "score() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.score"]], "set_fit_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_fit_request"]], "set_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_params"]], "set_score_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_score_request"]], "multiannotatorpoolquerystrategy (class in skactiveml.base)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.set_params"]], "probabilisticregressor (class in skactiveml.base)": [[8, "skactiveml.base.ProbabilisticRegressor"]], "fit() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.fit"]], "get_metadata_routing() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_params"]], "predict() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict"]], "predict_target_distribution() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict_target_distribution"]], "sample_y() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.sample_y"]], "score() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.score"]], "set_fit_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_fit_request"]], "set_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_params"]], "set_predict_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_predict_request"]], "set_score_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_score_request"]], "querystrategy (class in skactiveml.base)": [[9, "skactiveml.base.QueryStrategy"]], "get_metadata_routing() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_params"]], "query() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.query"]], "set_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.set_params"]], "singleannotatorpoolquerystrategy (class in skactiveml.base)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.set_params"]], "singleannotatorstreamquerystrategy (class in skactiveml.base)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.set_params"]], "update() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.update"]], "skactivemlclassifier (class in skactiveml.base)": [[12, "skactiveml.base.SkactivemlClassifier"]], "fit() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_params"]], "predict() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict"]], "predict_proba() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict_proba"]], "score() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.score"]], "set_fit_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_fit_request"]], "set_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_params"]], "set_score_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_score_request"]], "skactivemlregressor (class in skactiveml.base)": [[13, "skactiveml.base.SkactivemlRegressor"]], "fit() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_params"]], "predict() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.predict"]], "score() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.score"]], "set_fit_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_fit_request"]], "set_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_params"]], "set_score_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_score_request"]], "mixturemodelclassifier (class in skactiveml.classifier)": [[14, "skactiveml.classifier.MixtureModelClassifier"]], "fit() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_params"]], "predict() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict"]], "predict_freq() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_proba"]], "score() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.score"]], "set_fit_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_params"]], "set_score_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_score_request"]], "metrics (skactiveml.classifier.parzenwindowclassifier attribute)": [[15, "skactiveml.classifier.ParzenWindowClassifier.METRICS"]], "parzenwindowclassifier (class in skactiveml.classifier)": [[15, "skactiveml.classifier.ParzenWindowClassifier"]], "fit() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_params"]], "predict() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_params"]], "set_score_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_score_request"]], "sklearnclassifier (class in skactiveml.classifier)": [[16, "skactiveml.classifier.SklearnClassifier"]], "fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_params"]], "partial_fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.partial_fit"]], "predict() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict"]], "predict_proba() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict_proba"]], "score() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.score"]], "set_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_score_request"]], "slidingwindowclassifier (class in skactiveml.classifier)": [[17, "skactiveml.classifier.SlidingWindowClassifier"]], "fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_params"]], "partial_fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.partial_fit"]], "predict() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_score_request"]], "annotatorensembleclassifier (class in skactiveml.classifier.multiannotator)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier"]], "fit() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_params"]], "named_estimators (skactiveml.classifier.multiannotator.annotatorensembleclassifier property)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.named_estimators"]], "predict() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_score_request"]], "steps (skactiveml.classifier.multiannotator.annotatorensembleclassifier attribute)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.steps"]], "annotatorlogisticregression (class in skactiveml.classifier.multiannotator)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression"]], "fit() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_params"]], "predict() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict"]], "predict_annotator_perf() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_annotator_perf"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_score_request"]], "mappingerror (class in skactiveml.exceptions)": [[20, "skactiveml.exceptions.MappingError"]], "args (skactiveml.exceptions.mappingerror attribute)": [[20, "skactiveml.exceptions.MappingError.args"]], "with_traceback() (skactiveml.exceptions.mappingerror method)": [[20, "skactiveml.exceptions.MappingError.with_traceback"]], "batchbald (class in skactiveml.pool)": [[21, "skactiveml.pool.BatchBALD"]], "get_metadata_routing() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.get_params"]], "query() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.query"]], "set_params() (skactiveml.pool.batchbald method)": [[21, "skactiveml.pool.BatchBALD.set_params"]], "costembeddingal (class in skactiveml.pool)": [[22, "skactiveml.pool.CostEmbeddingAL"]], "get_metadata_routing() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.get_metadata_routing"]], "get_params() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.get_params"]], "query() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.query"]], "set_params() (skactiveml.pool.costembeddingal method)": [[22, "skactiveml.pool.CostEmbeddingAL.set_params"]], "discriminativeal (class in skactiveml.pool)": [[23, "skactiveml.pool.DiscriminativeAL"]], "get_metadata_routing() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.get_metadata_routing"]], "get_params() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.get_params"]], "query() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.query"]], "set_params() (skactiveml.pool.discriminativeal method)": [[23, "skactiveml.pool.DiscriminativeAL.set_params"]], "epistemicuncertaintysampling (class in skactiveml.pool)": [[24, "skactiveml.pool.EpistemicUncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.get_params"]], "query() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.query"]], "set_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[24, "skactiveml.pool.EpistemicUncertaintySampling.set_params"]], "expectedmodelchangemaximization (class in skactiveml.pool)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization"]], "get_metadata_routing() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.get_params"]], "query() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.query"]], "set_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[25, "skactiveml.pool.ExpectedModelChangeMaximization.set_params"]], "expectedmodeloutputchange (class in skactiveml.pool)": [[26, "skactiveml.pool.ExpectedModelOutputChange"]], "get_metadata_routing() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.get_params"]], "query() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.query"]], "set_params() (skactiveml.pool.expectedmodeloutputchange method)": [[26, "skactiveml.pool.ExpectedModelOutputChange.set_params"]], "expectedmodelvariancereduction (class in skactiveml.pool)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction"]], "get_metadata_routing() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.get_params"]], "query() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.query"]], "set_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[27, "skactiveml.pool.ExpectedModelVarianceReduction.set_params"]], "fourds (class in skactiveml.pool)": [[28, "skactiveml.pool.FourDs"]], "get_metadata_routing() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.get_metadata_routing"]], "get_params() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.get_params"]], "query() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.query"]], "set_params() (skactiveml.pool.fourds method)": [[28, "skactiveml.pool.FourDs.set_params"]], "greedybald (class in skactiveml.pool)": [[29, "skactiveml.pool.GreedyBALD"]], "get_metadata_routing() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.get_params"]], "query() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.query"]], "set_params() (skactiveml.pool.greedybald method)": [[29, "skactiveml.pool.GreedyBALD.set_params"]], "greedysamplingtarget (class in skactiveml.pool)": [[30, "skactiveml.pool.GreedySamplingTarget"]], "get_metadata_routing() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.get_params"]], "query() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.query"]], "set_params() (skactiveml.pool.greedysamplingtarget method)": [[30, "skactiveml.pool.GreedySamplingTarget.set_params"]], "greedysamplingx (class in skactiveml.pool)": [[31, "skactiveml.pool.GreedySamplingX"]], "get_metadata_routing() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.get_params"]], "query() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.query"]], "set_params() (skactiveml.pool.greedysamplingx method)": [[31, "skactiveml.pool.GreedySamplingX.set_params"]], "kldivergencemaximization (class in skactiveml.pool)": [[32, "skactiveml.pool.KLDivergenceMaximization"]], "get_metadata_routing() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.get_params"]], "query() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.query"]], "set_params() (skactiveml.pool.kldivergencemaximization method)": [[32, "skactiveml.pool.KLDivergenceMaximization.set_params"]], "montecarloeer (class in skactiveml.pool)": [[33, "skactiveml.pool.MonteCarloEER"]], "get_metadata_routing() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.get_metadata_routing"]], "get_params() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.get_params"]], "query() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.query"]], "set_params() (skactiveml.pool.montecarloeer method)": [[33, "skactiveml.pool.MonteCarloEER.set_params"]], "probabilistical (class in skactiveml.pool)": [[34, "skactiveml.pool.ProbabilisticAL"]], "get_metadata_routing() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.get_params"]], "query() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.query"]], "set_params() (skactiveml.pool.probabilistical method)": [[34, "skactiveml.pool.ProbabilisticAL.set_params"]], "querybycommittee (class in skactiveml.pool)": [[35, "skactiveml.pool.QueryByCommittee"]], "get_metadata_routing() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.get_metadata_routing"]], "get_params() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.get_params"]], "query() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.query"]], "set_params() (skactiveml.pool.querybycommittee method)": [[35, "skactiveml.pool.QueryByCommittee.set_params"]], "metrics (skactiveml.pool.quire attribute)": [[36, "skactiveml.pool.Quire.METRICS"]], "quire (class in skactiveml.pool)": [[36, "skactiveml.pool.Quire"]], "get_metadata_routing() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.get_metadata_routing"]], "get_params() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.get_params"]], "query() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.query"]], "set_params() (skactiveml.pool.quire method)": [[36, "skactiveml.pool.Quire.set_params"]], "randomsampling (class in skactiveml.pool)": [[37, "skactiveml.pool.RandomSampling"]], "get_metadata_routing() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.get_metadata_routing"]], "get_params() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.get_params"]], "query() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.query"]], "set_params() (skactiveml.pool.randomsampling method)": [[37, "skactiveml.pool.RandomSampling.set_params"]], "uncertaintysampling (class in skactiveml.pool)": [[38, "skactiveml.pool.UncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.get_params"]], "query() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.query"]], "set_params() (skactiveml.pool.uncertaintysampling method)": [[38, "skactiveml.pool.UncertaintySampling.set_params"]], "valueofinformationeer (class in skactiveml.pool)": [[39, "skactiveml.pool.ValueOfInformationEER"]], "get_metadata_routing() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.get_metadata_routing"]], "get_params() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.get_params"]], "query() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.query"]], "set_params() (skactiveml.pool.valueofinformationeer method)": [[39, "skactiveml.pool.ValueOfInformationEER.set_params"]], "average_kl_divergence() (in module skactiveml.pool)": [[40, "skactiveml.pool.average_kl_divergence"]], "batch_bald() (in module skactiveml.pool)": [[41, "skactiveml.pool.batch_bald"]], "cost_reduction() (in module skactiveml.pool)": [[42, "skactiveml.pool.cost_reduction"]], "expected_average_precision() (in module skactiveml.pool)": [[43, "skactiveml.pool.expected_average_precision"]], "intervalestimationannotmodel (class in skactiveml.pool.multiannotator)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel"]], "fit() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.fit"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_params"]], "predict_annotator_perf() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.predict_annotator_perf"]], "set_fit_request() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_fit_request"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[44, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_params"]], "intervalestimationthreshold (class in skactiveml.pool.multiannotator)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_params"]], "query() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.query"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[45, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.set_params"]], "singleannotatorwrapper (class in skactiveml.pool.multiannotator)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper"]], "get_metadata_routing() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_params"]], "query() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.query"]], "set_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[46, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.set_params"]], "uncertainty_scores() (in module skactiveml.pool)": [[47, "skactiveml.pool.uncertainty_scores"]], "indexclassifierwrapper (class in skactiveml.pool.utils)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper"]], "fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.fit"]], "is_fitted() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.is_fitted"]], "partial_fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.partial_fit"]], "precompute() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.precompute"]], "predict() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict"]], "predict_freq() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict_freq"]], "predict_proba() (skactiveml.pool.utils.indexclassifierwrapper method)": [[48, "skactiveml.pool.utils.IndexClassifierWrapper.predict_proba"]], "vote_entropy() (in module skactiveml.pool)": [[49, "skactiveml.pool.vote_entropy"]], "cognitivedualquerystrategy (class in skactiveml.stream)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategy method)": [[50, "skactiveml.stream.CognitiveDualQueryStrategy.update"]], "cognitivedualquerystrategyfixun (class in skactiveml.stream)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[51, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.update"]], "cognitivedualquerystrategyran (class in skactiveml.stream)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyran method)": [[52, "skactiveml.stream.CognitiveDualQueryStrategyRan.update"]], "cognitivedualquerystrategyranvarun (class in skactiveml.stream)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[53, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.update"]], "cognitivedualquerystrategyvarun (class in skactiveml.stream)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[54, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.update"]], "fixeduncertainty (class in skactiveml.stream)": [[55, "skactiveml.stream.FixedUncertainty"]], "get_metadata_routing() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.get_params"]], "query() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.query"]], "set_params() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.set_params"]], "update() (skactiveml.stream.fixeduncertainty method)": [[55, "skactiveml.stream.FixedUncertainty.update"]], "periodicsampling (class in skactiveml.stream)": [[56, "skactiveml.stream.PeriodicSampling"]], "get_metadata_routing() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.get_params"]], "query() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.query"]], "set_params() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.set_params"]], "update() (skactiveml.stream.periodicsampling method)": [[56, "skactiveml.stream.PeriodicSampling.update"]], "randomvariableuncertainty (class in skactiveml.stream)": [[57, "skactiveml.stream.RandomVariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.get_params"]], "query() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.query"]], "set_params() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.set_params"]], "update() (skactiveml.stream.randomvariableuncertainty method)": [[57, "skactiveml.stream.RandomVariableUncertainty.update"]], "split (class in skactiveml.stream)": [[58, "skactiveml.stream.Split"]], "get_metadata_routing() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.get_metadata_routing"]], "get_params() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.get_params"]], "query() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.query"]], "set_params() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.set_params"]], "update() (skactiveml.stream.split method)": [[58, "skactiveml.stream.Split.update"]], "streamdensitybasedal (class in skactiveml.stream)": [[59, "skactiveml.stream.StreamDensityBasedAL"]], "get_metadata_routing() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.get_params"]], "query() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.query"]], "set_params() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.set_params"]], "update() (skactiveml.stream.streamdensitybasedal method)": [[59, "skactiveml.stream.StreamDensityBasedAL.update"]], "streamprobabilistical (class in skactiveml.stream)": [[60, "skactiveml.stream.StreamProbabilisticAL"]], "get_metadata_routing() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.get_params"]], "query() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.query"]], "set_params() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.set_params"]], "update() (skactiveml.stream.streamprobabilistical method)": [[60, "skactiveml.stream.StreamProbabilisticAL.update"]], "streamrandomsampling (class in skactiveml.stream)": [[61, "skactiveml.stream.StreamRandomSampling"]], "get_metadata_routing() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.get_params"]], "query() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.query"]], "set_params() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.set_params"]], "update() (skactiveml.stream.streamrandomsampling method)": [[61, "skactiveml.stream.StreamRandomSampling.update"]], "variableuncertainty (class in skactiveml.stream)": [[62, "skactiveml.stream.VariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.get_params"]], "query() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.query"]], "set_params() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.set_params"]], "update() (skactiveml.stream.variableuncertainty method)": [[62, "skactiveml.stream.VariableUncertainty.update"]], "balancedincrementalquantilefilter (class in skactiveml.stream.budgetmanager)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.set_params"]], "update() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[63, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.update"]], "densitybasedsplitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[64, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.update"]], "estimatedbudgetzliobaite (class in skactiveml.stream.budgetmanager)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.set_params"]], "update() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[65, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.update"]], "fixeduncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[66, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.update"]], "randombudgetmanager (class in skactiveml.stream.budgetmanager)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[67, "skactiveml.stream.budgetmanager.RandomBudgetManager.update"]], "randomvariableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[68, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.update"]], "splitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[69, "skactiveml.stream.budgetmanager.SplitBudgetManager.update"]], "variableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[70, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.update"]], "extlabelencoder (class in skactiveml.utils)": [[71, "skactiveml.utils.ExtLabelEncoder"]], "fit() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.fit"]], "fit_transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.fit_transform"]], "get_metadata_routing() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.get_metadata_routing"]], "get_params() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.get_params"]], "inverse_transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.inverse_transform"]], "set_params() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.set_params"]], "transform() (skactiveml.utils.extlabelencoder method)": [[71, "skactiveml.utils.ExtLabelEncoder.transform"]], "_check_callable() (in module skactiveml.utils)": [[72, "skactiveml.utils._check_callable"]], "call_func() (in module skactiveml.utils)": [[73, "skactiveml.utils.call_func"]], "check_x_y() (in module skactiveml.utils)": [[74, "skactiveml.utils.check_X_y"]], "check_bound() (in module skactiveml.utils)": [[75, "skactiveml.utils.check_bound"]], "check_budget_manager() (in module skactiveml.utils)": [[76, "skactiveml.utils.check_budget_manager"]], "check_class_prior() (in module skactiveml.utils)": [[77, "skactiveml.utils.check_class_prior"]], "check_classes() (in module skactiveml.utils)": [[78, "skactiveml.utils.check_classes"]], "check_classifier_params() (in module skactiveml.utils)": [[79, "skactiveml.utils.check_classifier_params"]], "check_cost_matrix() (in module skactiveml.utils)": [[80, "skactiveml.utils.check_cost_matrix"]], "check_equal_missing_label() (in module skactiveml.utils)": [[81, "skactiveml.utils.check_equal_missing_label"]], "check_indices() (in module skactiveml.utils)": [[82, "skactiveml.utils.check_indices"]], "check_missing_label() (in module skactiveml.utils)": [[83, "skactiveml.utils.check_missing_label"]], "check_random_state() (in module skactiveml.utils)": [[84, "skactiveml.utils.check_random_state"]], "check_scalar() (in module skactiveml.utils)": [[85, "skactiveml.utils.check_scalar"]], "check_type() (in module skactiveml.utils)": [[86, "skactiveml.utils.check_type"]], "compute_vote_vectors() (in module skactiveml.utils)": [[87, "skactiveml.utils.compute_vote_vectors"]], "ext_confusion_matrix() (in module skactiveml.utils)": [[88, "skactiveml.utils.ext_confusion_matrix"]], "is_labeled() (in module skactiveml.utils)": [[89, "skactiveml.utils.is_labeled"]], "is_unlabeled() (in module skactiveml.utils)": [[90, "skactiveml.utils.is_unlabeled"]], "labeled_indices() (in module skactiveml.utils)": [[91, "skactiveml.utils.labeled_indices"]], "majority_vote() (in module skactiveml.utils)": [[92, "skactiveml.utils.majority_vote"]], "rand_argmax() (in module skactiveml.utils)": [[93, "skactiveml.utils.rand_argmax"]], "rand_argmin() (in module skactiveml.utils)": [[94, "skactiveml.utils.rand_argmin"]], "simple_batch() (in module skactiveml.utils)": [[95, "skactiveml.utils.simple_batch"]], "unlabeled_indices() (in module skactiveml.utils)": [[96, "skactiveml.utils.unlabeled_indices"]], "mesh() (in module skactiveml.visualization)": [[97, "skactiveml.visualization.mesh"]], "plot_annotator_utilities() (in module skactiveml.visualization)": [[98, "skactiveml.visualization.plot_annotator_utilities"]], "plot_contour_for_samples() (in module skactiveml.visualization)": [[99, "skactiveml.visualization.plot_contour_for_samples"]], "plot_decision_boundary() (in module skactiveml.visualization)": [[100, "skactiveml.visualization.plot_decision_boundary"]], "plot_stream_decision_boundary() (in module skactiveml.visualization)": [[101, "skactiveml.visualization.plot_stream_decision_boundary"]], "plot_stream_training_data() (in module skactiveml.visualization)": [[102, "skactiveml.visualization.plot_stream_training_data"]], "plot_utilities() (in module skactiveml.visualization)": [[103, "skactiveml.visualization.plot_utilities"]], "module": [[104, "module-skactiveml"], [104, "module-skactiveml.base"], [104, "module-skactiveml.classifier"], [104, "module-skactiveml.classifier.multiannotator"], [104, "module-skactiveml.exceptions"], [104, "module-skactiveml.pool"], [104, "module-skactiveml.pool.multiannotator"], [104, "module-skactiveml.pool.utils"], [104, "module-skactiveml.stream"], [104, "module-skactiveml.stream.budgetmanager"], [104, "module-skactiveml.utils"], [104, "module-skactiveml.visualization"]], "skactiveml": [[104, "module-skactiveml"]], "skactiveml.base": [[104, "module-skactiveml.base"]], "skactiveml.classifier": [[104, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator": [[104, "module-skactiveml.classifier.multiannotator"]], "skactiveml.exceptions": [[104, "module-skactiveml.exceptions"]], "skactiveml.pool": [[104, "module-skactiveml.pool"]], "skactiveml.pool.multiannotator": [[104, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils": [[104, "module-skactiveml.pool.utils"]], "skactiveml.stream": [[104, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager": [[104, "module-skactiveml.stream.budgetmanager"]], "skactiveml.utils": [[104, "module-skactiveml.utils"]], "skactiveml.visualization": [[104, "module-skactiveml.visualization"]]}})